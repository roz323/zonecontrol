//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zone Control CE Races Public Test
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_InitializeHashInput ();
void lib1_gf_AddBooleanToHashInput (bool lp_boolean);
void lib1_gf_AddByteToHashInput (byte lp_byte);
void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount);
void lib1_gf_AddIntegerToHashInput (int lp_integer);
void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount);
void lib1_gf_AddRealToHashInput (fixed lp_real);
void lib1_gf_AddStringToHashInput (string lp_string);
void lib1_gf_AddUnitToHashInput (unit lp_unit);
string lib1_gf_GenerateMD5HashCode ();
string lib1_gf_GenerateSHA256HashCode ();

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Global Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Hash Input
byte[8190] HashInputData;
int HashInputSize = 0;
int GetHashInputLittleEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    result = HashInputData[position];
    temp = HashInputData[position + 1];
    result |= temp << 8;
    temp = HashInputData[position + 2];
    result |= temp << 16;
    temp = HashInputData[position + 3];
    result |= temp << 24;
    return result;
}
int GetHashInputBigEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    temp = HashInputData[position];
    result = temp << 24;
    temp = HashInputData[position + 1];
    result |= temp << 16;
    temp = HashInputData[position + 2];
    result |= temp << 8;
    temp = HashInputData[position + 3];
    result |= temp;
    return result;
}
// ASCII conversion
string asciiTable = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";
byte CharToAsciiCode(string charContainingString, int charPosition)
{
    return StringFind( asciiTable, StringSub( charContainingString, charPosition + 1, charPosition + 1), c_stringCase );
}
//  Hex Conversion
string[16] HexTable;
string GetHexChar( int number )
{
    return HexTable[number];
}
string GetUnsignedLittleEndianHexRepresentation( int unsignedInt )
{
    string representation = "";
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    return representation;
}
string GetUnsignedHexRepresentation( int unsignedInt )
{   
    string representation = "";
    
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    return representation;
}
// Resolve data function
int GetFixedDataAsInt(fixed fixedVar)
{
    int data;
    data= ( FixedToInt(fixedVar) << 12 );
    fixedVar -= data;
    data|= FixedToInt( fixedVar* Pow2(12) );
    return data;
}
//  Operations
int UnsignedRightShift( int input, int shift )  // Right shift pads bit 1's when the value is under zero for signed integers. So this is the work-around.
{
    return input >> shift & ~( -1 << ( 32 - shift  ) );
}
int UnsignedLeftRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}
int UnsignedLeftRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MD5 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Md5F( int b, int c, int d )
{
    return d ^ ( b & ( c ^ d ) );
}
int Md5G( int b, int c, int d )
{
    return c ^ ( d & ( b ^ c ) );
}
int Md5H( int b, int c, int d )
{
    return b ^ c ^ d;
}
int Md5I( int b, int c, int d )
{
    return c ^ (b | (~d));
}
int Md5FF( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5F( b, c, d ) + k + w ), r ) + b;
}
int Md5GG( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5G( b, c, d ) + k + w ), r ) + b;
}
int Md5HH( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5H( b, c, d ) + k + w ), r ) + b;
}
int Md5II( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5I( b, c, d ) + k + w ), r ) + b;
}
string GenerateMd5HashCode()
{    
    //  Variables
    int h0 = 0x67452301;
    int h1 = 0x0E000000 << 4 | 0x0FCDAB89;
    int h2 = 0x09000000 << 4 | 0x08BADCFE;
    int h3 = 0x10325476;
    int a; int b; int c; int d;
    int i = 0; int j = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j ), 7, 0x0d000000 << 4 | 0x076aa478 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 1 ), 12, 0x0e000000 << 4 | 0x08c7b756 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 17, 0x242070db );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 3 ), 22, 0x0c000000 << 4 | 0x01bdceee );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 7, 0x0f000000 << 4 | 0x057c0faf );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 5 ), 12, 0x4787c62a );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 17, 0x0a000000 << 4 | 0x08304613 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 7 ), 22, 0x0f000000 << 4 | 0x0d469501 );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 7, 0x698098d8 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 9 ), 12, 0x08000000 << 4 | 0x0b44f7af );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 17, 0x0f000000 << 4 | 0x0fff5bb1 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 11 ), 22, 0x08000000 << 4 | 0x095cd7be );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 7, 0x6b901122 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 13 ), 12, 0x0f000000 << 4 | 0x0d987193 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j+ 14 ), 17, 0x0a000000 << 4 | 0x0679438e );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 15 ), 22, 0x49b40821 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 5, 0x0f000000 << 4 | 0x061e2562 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 6 ), 9, 0x0c000000 << 4 | 0x0040b340 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 14, 0x265e5a51 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j ), 20, 0x0e000000 << 4 | 0x09b6c7aa );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 5, 0x0d000000 << 4 | 0x062f105d );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 10 ), 9, 0x02441453 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 14, 0x0d000000 << 4 | 0x08a1e681 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 4 ), 20, 0x0e000000 << 4 | 0x07d3fbc8 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 5, 0x21e1cde6 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 14 ), 9, 0x0c000000 << 4 | 0x033707d6 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 14, 0x0f000000 << 4 | 0x04d50d87 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 8 ), 20, 0x455a14ed );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 5, 0x0a000000 << 4 | 0x09e3e905 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 2 ), 9, 0x0f000000 << 4 | 0x0cefa3f8 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 14,  0x676f02d9 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 12 ), 20, 0x08000000 << 4 | 0x0d2a4c8a );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 4, 0x0f000000 << 4 | 0x0ffa3942 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 8 ), 11, 0x08000000 << 4 | 0x0771f681 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 16, 0x6d9d6122 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 14 ), 23, 0x0f000000 << 4 | 0x0de5380c );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 4, 0x0a000000 << 4 | 0x04beea44 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 4 ), 11, 0x4bdecfa9 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 16, 0x0f000000 << 4 | 0x06bb4b60 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 10 ), 23, 0x0b000000 << 4 | 0x0ebfbc70 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 4, 0x289b7ec6 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 0 ), 11, 0x0e000000 << 4 | 0x0aa127fa );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 16, 0x0d000000 << 4 | 0x04ef3085 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 6 ), 23, 0x04881d05 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 4, 0x0d000000 << 4 | 0x09d4d039 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 12 ), 11, 0x0e000000 << 4 | 0x06db99e5 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 16, 0x1fa27cf8 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 2 ), 23, 0x0c000000 << 4 | 0x04ac5665 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j ), 6, 0x0f000000 << 4 | 0x04292244 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 7 ), 10, 0x432aff97 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 14 ), 15, 0x0a000000 << 4 | 0x0b9423a7 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 5 ), 21, 0x0f000000 << 4 | 0x0c93a039 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 6, 0x655b59c3 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 3 ), 10, 0x08000000 << 4 | 0x0f0ccc92 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 15, 0x0f000000 << 4 | 0x0feff47d );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 1 ), 21, 0x08000000 << 4 | 0x05845dd1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 6, 0x6fa87e4f );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 15 ), 10, 0x0f000000 << 4 | 0x0e2ce6e0 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 15, 0x0a000000 << 4 | 0x03014314 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 13 ), 21, 0x4e0811a1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 6, 0x0f000000 << 4 | 0x07537e82 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 11 ), 10, 0x0b000000 << 4 | 0x0d3af235 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 15, 0x2ad7d2bb );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 9 ), 21, 0x0e000000 << 4 | 0x0b86d391 );
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        i += 64;
        j += 16;
    }
    
    return GetUnsignedLittleEndianHexRepresentation( h0 ) + GetUnsignedLittleEndianHexRepresentation( h1 ) + GetUnsignedLittleEndianHexRepresentation( h2 ) + GetUnsignedLittleEndianHexRepresentation( h3 );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SHA256 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Sha256Ch( int x, int y, int z )
{
    return ( x & y ) ^ ( ~x & z );
}
int Sha256Maj( int x, int y, int z )
{
    return ( x & y ) ^ ( x & z ) ^ ( y & z );
}
int Sha256CapitalSigma0( int x )
{
    return UnsignedRightRotate32( x, 2 ) ^ UnsignedRightRotate32( x, 13 ) ^ UnsignedRightRotate32( x, 22 );
}
int Sha256CapitalSigma1( int x )
{
    return UnsignedRightRotate32( x, 6 ) ^ UnsignedRightRotate32( x, 11 ) ^ UnsignedRightRotate32( x, 25 );
}
int Sha256Sigma0( int x )
{
    return UnsignedRightRotate32( x, 7 ) ^ UnsignedRightRotate32( x, 18 ) ^ UnsignedRightShift( x, 3 );
}
int Sha256Sigma1( int x )
{
    return UnsignedRightRotate32( x, 17 ) ^ UnsignedRightRotate32( x, 19 ) ^ UnsignedRightShift( x, 10 );
}
int Sha256T0( int e, int f, int g, int h, int k, int w )
{
    return h + Sha256CapitalSigma1( e ) + Sha256Ch( e, f, g ) + k + w;
}
int Sha256T1( int a, int b, int c )
{
    return Sha256CapitalSigma0( a ) + Sha256Maj( a, b, c );
}
string GenerateSha256HashCode()
{
    //  Variables
    int h0 = 0x6a09e667;
    int h1 = 0x0b000000 << 4 | 0x0b67ae85;
    int h2 = 0x3c6ef372;
    int h3 = 0x0a000000 << 4 | 0x054ff53a;
    int h4 = 0x510e527f;
    int h5 = 0x09000000 << 4 | 0x0b05688c;
    int h6 = 0x1f83d9ab;
    int h7 = 0x5be0cd19;
    int a; int b; int c; int d; int e; int f; int g; int h; int t0; int t1;
    int[64] w;
    int i = 0; int j = 0; int k = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {   
        //  Working Variables
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        e = h4;
        f = h5;
        g = h6;
        h = h7;
        //  Preparing Extra Message Schedule
        j = 0;
        while ( j < 16 )
        {
            w[j] = GetHashInputBigEndianInt( k );
            j += 1;
            k += 1;
        }
        while ( j < 64 )
        {
            w[j] =  Sha256Sigma1( w[j - 2] ) +
            w[j - 7] +
            Sha256Sigma0( w[j - 15] ) +
            w[j - 16];
            
            j += 1;
        }
        // 0 to 15
        t0 = Sha256T0( e, f, g, h, 0x428a2f98, w[0] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x71374491, w[1] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x05c0fbcf, w[2] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x0e000000 << 4 | 0x09b5dba5, w[3] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x3956c25b, w[4] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x59f111f1, w[5] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x023f82a4, w[6] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0a000000 << 4 | 0x0b1c5ed5, w[7] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0; i += 1;
        t0 = Sha256T0( e, f, g, h, 0x0d000000 << 4 | 0x0807aa98, w[8] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x12835b01, w[9] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x243185be, w[10] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x550c7dc3, w[11] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x72be5d74, w[12] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x08000000 << 4 | 0x00deb1fe, w[13] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x0bdc06a7, w[14] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x019bf174, w[15] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 16 to 31
        t0 = Sha256T0( e, f, g, h, 0x0e000000 << 4 | 0x049b69c1, w[16] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0e000000 << 4 | 0x0fbe4786, w[17] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0fc19dc6, w[18] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x240ca1cc, w[19] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x2de92c6f, w[20] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4a7484aa, w[21] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5cb0a9dc, w[22] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x76f988da, w[23] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x09000000 << 4 | 0x083e5152, w[24] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x0831c66d, w[25] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x000327c8, w[26] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0b000000 << 4 | 0x0f597fc7, w[27] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0c000000 << 4 | 0x06e00bf3, w[28] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x05a79147, w[29] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x06ca6351, w[30] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x14292967, w[31] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 32 to 47
        t0 = Sha256T0( e, f, g, h, 0x27b70a85, w[32] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x2e1b2138, w[33] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x4d2c6dfc, w[34] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x53380d13, w[35] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x650a7354, w[36] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x766a0abb, w[37] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x08000000 << 4 | 0x01c2c92e, w[38] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x09000000 << 4 | 0x02722c85, w[39] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x0a000000 << 4 | 0x02bfe8a1, w[40] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x081a664b, w[41] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0c000000 << 4 | 0x024b8b70, w[42] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0c000000 << 4 | 0x076c51a3, w[43] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0d000000 << 4 | 0x0192e819, w[44] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x06990624, w[45] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0f000000 << 4 | 0x040e3585, w[46] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x106aa070, w[47] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 48 to 63
        t0 = Sha256T0( e, f, g, h, 0x19a4c116, w[48] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x1e376c08, w[49] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x2748774c, w[50] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x34b0bcb5, w[51] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x391c0cb3, w[52] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4ed8aa4a, w[53] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5b9cca4f, w[54] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x682e6ff3, w[55] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x748f82ee, w[56] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x78a5636f, w[57] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x08000000 << 4 | 0x04c87814, w[58] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x08000000 << 4 | 0x0cc70208, w[59] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x09000000 << 4 | 0x00befffa, w[60] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0a000000 << 4 | 0x04506ceb, w[61] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0b000000 << 4 | 0x0ef9a3f7, w[62] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x067178f2, w[63] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
        h5 += f;
        h6 += g;
        h7 += h;
        i += 49;
    }
    return  GetUnsignedHexRepresentation(h0) + 
            GetUnsignedHexRepresentation(h1) + 
            GetUnsignedHexRepresentation(h2) + 
            GetUnsignedHexRepresentation(h3) + 
            GetUnsignedHexRepresentation(h4) + 
            GetUnsignedHexRepresentation(h5) + 
            GetUnsignedHexRepresentation(h6) + 
            GetUnsignedHexRepresentation(h7);
}

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_InitializeHashInput () {
    // Variable Declarations
    string lv_emptyString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_emptyString = "";

    // Implementation
    HashInputSize = 0;
    if ( HexTable[0] == "" )
    {
        HexTable[0] = "0"; HexTable[1] = "1"; HexTable[2] = "2"; HexTable[3] = "3";
        HexTable[4] = "4"; HexTable[5] = "5"; HexTable[6] = "6"; HexTable[7] = "7";
        HexTable[8] = "8"; HexTable[9] = "9"; HexTable[10] = "a"; HexTable[11] = "b";
        HexTable[12] = "c"; HexTable[13] = "d"; HexTable[14] = "e"; HexTable[15] = "f";
    }
}

void lib1_gf_AddBooleanToHashInput (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(BoolToInt( lp_boolean ));
}

void lib1_gf_AddByteToHashInput (byte lp_byte) {
    // Automatic Variable Declarations
    // Implementation
    HashInputData[HashInputSize] = lp_byte;
    HashInputSize += 1;
}

void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount) {
    // Automatic Variable Declarations
    int auto16027E3F_ae;
    int auto16027E3F_var;

    // Implementation
    auto16027E3F_ae = lp_amount;
    auto16027E3F_var = 1;
    for ( ; auto16027E3F_var <= auto16027E3F_ae; auto16027E3F_var += 1 ) {
        lib1_gf_AddByteToHashInput(lp_byte);
    }
}

void lib1_gf_AddIntegerToHashInput (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(lp_integer);
    lib1_gf_AddByteToHashInput(lp_integer >> 8);
    lib1_gf_AddByteToHashInput(lp_integer >> 16);
    lib1_gf_AddByteToHashInput(lp_integer >> 24);
}

void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount) {
    // Automatic Variable Declarations
    int autoB1E99E46_ae;
    int autoB1E99E46_var;

    // Implementation
    autoB1E99E46_ae = lp_amount;
    autoB1E99E46_var = 1;
    for ( ; autoB1E99E46_var <= autoB1E99E46_ae; autoB1E99E46_var += 1 ) {
        lib1_gf_AddIntegerToHashInput(lp_integer);
    }
}

void lib1_gf_AddRealToHashInput (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddIntegerToHashInput(GetFixedDataAsInt( lp_real ));
}

void lib1_gf_AddStringToHashInput (string lp_string) {
    // Variable Declarations
    int lv_integer;

    // Automatic Variable Declarations
    int auto55AD67C6_ae;
    const int auto55AD67C6_ai = 1;

    // Variable Initialization

    // Implementation
    auto55AD67C6_ae = (StringLength(lp_string) - 1);
    lv_integer = 0;
    for ( ; ( (auto55AD67C6_ai >= 0 && lv_integer <= auto55AD67C6_ae) || (auto55AD67C6_ai < 0 && lv_integer >= auto55AD67C6_ae) ) ; lv_integer += auto55AD67C6_ai ) {
        lib1_gf_AddByteToHashInput(CharToAsciiCode( lp_string, lv_integer ));
    }
}

void lib1_gf_AddUnitToHashInput (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddStringToHashInput((UnitGetType(lp_unit)));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent));
}

string lib1_gf_GenerateMD5HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateMd5HashCode();
}

string lib1_gf_GenerateSHA256HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateSha256HashCode();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_timer_length = 50;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_CustomChatRecord {
    int lv_messages_Top;
    int[17] lv_messages_Bottom;
    int lv_messages_Container;
    int lv_skunkChat01;
    int lv_title;
    int lv_recipient;
    text[18] lv_playerNames;
    string[18] lv_playerNames_String;
    int lv_playerNameAsString;
    int lv_context_Label;
    int lv_context_Button;
    int lv_context_Frame;
    playergroup[17] lv_mutedPlayers;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_max_player_zoom_level;
text[17] gv_player_names;
text[17] gv_player_names_colored;
string[17] gv_player_handles;
bool gv_game_inbalanced;
bool gv_game_contains_ai;
int[9] gv_extra_bunk_position;
int gv_spawn_cycle;
fixed[13][3] gv_position_spawn_offsets;
int[17] gv_player_race_index;
string[4][5][3] gv_race_spawn_unit_types;
int[4][5][3] gv_race_spawn_unit_type_supply_cost;
string[4][3] gv_race_spawner_types;
string[4] gv_race_worker_types;
string[4] gv_race_research_facility_types;
string[4] gv_race_nuke_facility_types;
string[4][12] gv_race_teaminfo_icons;
string[4][9] gv_race_teaminfo_upgrades;
abilcmd[4][9] gv_race_teaminfo_upgrade_abilities;
bool gv_init_completed;
int gv_game_duration;
timer gv_game_timer;
timer gv_real_timer;
bool gv_boosted_production;
timer gv_cease_fire_timer;
bool gv_resetting_game;
bool gv_fog_of_war;
revealer[17] gv_fog_of_war_revealers;
int gv_starting_minerals;
int gv_cease_fire_duration;
bool[17] gv_observer_reveal_identity;
int gv_leaderboard_button;
int gv_alliance_checkbox;
bool gv_periodic_observer_reveal;
int gv_observer_reveal_checkbox;
int gv_toggle_control_button;
int gv_scan_ups_button;
bool[17] gv_movement_detected;
bool[17] gv_player_is_afk;
point[65] gv_bunker_slot_centers;
bool[65] gv_bunker_slot_is_real;
region[65] gv_bunker_slot_regions;
int gv_max_upgrades;
int[4] gv_zoom_buttons;
bool[17] gv_player_is_observer;
bool gv_anonymous_mode;
string gv_chat_mode;
bool gv_all_chat_enabled;
bool gv_custom_chat_enabled;
int[13] gv_position_lanes;
int[17] gv_player_lanes;
bool gv_mode_downgraded;
playergroup[5] gv_teams;
playergroup[5] gv_teams_and_observers;
playergroup gv_all_players;
playergroup gv_all_observers;
playergroup gv_all_players_and_observers;
int gv_num_teams;
int gv_players_per_team;
point[13] gv_engineering_bay_positions;
unit[17] gv_ghost_academies;
point[13] gv_initial_bunker_positions;
point[13] gv_nuke_silo_positions;
unit[17] gv_nuke_silos;
unitgroup[17] gv_player_pylons;
point[13] gv_pylon_positions_large_1;
point[13] gv_pylon_positions_large_2;
point[13] gv_pylon_positions_large_3;
point[13] gv_pylon_positions_small_1;
unit[17] gv_research_facilities;
unit[17] gv_initial_bunkers;
bool gv_player_draw;
string gv_magic;
fixed gv_game_average_elo;
fixed gv_total_wagers;
fixed[17] gv_player_elos;
fixed[17] gv_player_current_elo;
int[17] gv_player_wins;
int[17] gv_player_games;
int[17] gv_player_mode_games;
int[17] gv_player_mode_wins;
fixed[17] gv_player_elos_wagers;
string[17] gv_player_mode_history;
fixed[6] gv_team_elo_sums;
fixed[6] gv_team_elo_averages;
string gv_game_mode_string;
bool gv_full_game;
bank[17] gv_banks;
revealer[17] gv_player_revealers;
point[65] gv_bunker_spawn_points;
bool[17] gv_player_left_game;
fixed[17][3] gv_player_spawn_offsets;
int[17] gv_player_shards_collected;
bool[17] gv_player_alive;
bool[17] gv_team_alive;
point[65] gv_bunker_rally_points;
point[65][6] gv_bunker_rally_points_repeated;
int[65] gv_spawn_scan_order;
unit[65] gv_bunkers;
unit[65] gv_bunker_rally_units;
unit[65][6] gv_bunker_rally_units_repeated;
int[65] gv_bunker_rally_type;
bool[65] gv_bunker_merc_status;
int[65] gv_spawner_upgrade_status;
bool[65] gv_bunker_retire_status;
int[65] gv_spawner_tier;
int[17] gv_player_team;
int[13] gv_position_players;
int[17] gv_player_positions;
int[65] gv_bunker_owners;
point[65] gv_bunker_locations;
text[5] gv_team_short_names;
text[17] gv_nonanonymous_player_titles;
int[5] gv_simple_team_frames;
datetime gv_game_start_time;
fixed[5] gv_team_current_performance;
fixed[5][5] gv_team_current_performance_for_winning_team;
fixed[5] gv_team_peak_performance;
datetime[5] gv_team_peak_performance_time;
fixed[5][5] gv_team_peak_performance_for_winning_team;
datetime[5][5] gv_team_peak_performance_for_winning_team_time;
int[5] gv_team_scores;
int[17] gv_player_colors;
color[17] gv_player_state_colors;
int[5][5] gv_player_team_rank;
int[5] gv_team_rank;
int[13] gv_player_rank;
int[17] gv_player_scores;
int gv_teamLeaderboard;
int gv_playerLeaderboard;
int gv_simpleTeamLeaderboard;
int[17] gv_team_leaderboard_player_frames;
int[17] gv_team_leaderboard_player_scores;
int[17] gv_team_leaderboard_player_names;
int[5] gv_team_leaderboard_team_score_dialog_item;
int[5] gv_team_leaderboard_team_frames;
int[5] gv_team_leaderboard_team_name_dialog_item;
int[5] gv_team_leaderboard_team_dialog_item;
int[5] gv_team_leaderboard_team_scores;
int[17] gv_player_leaderboard_player_frames;
int[17] gv_player_leaderboard_player_scores;
int[17] gv_player_leaderboard_player_names;
int gv_results_button;
int gv_achievements_button;
int[17] gv_results_dialog;
fixed[5] gv_team_final_performance;
datetime[5] gv_team_final_performance_time;
int[17] gv_victory_button;
bool[17] gv_player_built_bunker;
bool[17] gv_player_bought_combat_early;
bool[17] gv_player_has_worker_death;
int[17] gv_player_early_tanks_built;
int gv_num_achievements;
string[101] gv_achievement_ids;
string[101] gv_achievements_names;
string[101] gv_achievement_icons;
int[17] gv_achievements_dialog;
int gv_help_dismiss;
int gv_help_dialog;
fixed[17] gv_player_upgrade_total_cost;
fixed[17] gv_player_net_resource_traded;
int[17] gv_player_tank_counts;
int[17] gv_player_bunker_counts;
int[17] gv_player_merc_bunker_counts;
int[17] gv_player_num_workers;
int gv_initial_resource;
int[17] gv_team_info_player_armor_level;
int[17] gv_team_info_player_attack_level;
int[17] gv_team_info_player_range_level;
int[17] gv_team_info_player_regen_level;
int[17] gv_team_info_player_speed_level;
int[17] gv_team_info_player_bunker_armor_level;
int[17] gv_team_info_player_bunker_regen_level;
int[17] gv_team_info_player_bunker_slots_level;
int gv_team_info_current_player;
int[17][5] gv_team_info_palyer_slot_map;
int[17] gv_team_info_player_dialogs;
int[17] gv_team_info_player_mineral;
int[17] gv_team_info_player_supply;
int[17] gv_team_info_player_losses;
int[17] gv_team_info_player_armor;
int[17] gv_team_info_player_range;
int[17] gv_team_info_player_regen;
int[17] gv_team_info_player_speed;
int[17] gv_team_info_player_bunker_armor;
int[17] gv_team_info_player_bunker_regen;
int[17] gv_team_info_player_bunker_slots;
int[17] gv_team_info_player_tanks;
int[17] gv_team_info_player_attack;
int[17] gv_team_info_player_workers;
int[17] gv_team_info_player_nukes;
int[17][8] gv_team_info_player_upgrade_buttons;
int[41] gv_tags;
int gv_current_tag;
int gv_zone_control_rate_limit;
int[17] gv_num_zones_controlled;
int[65] gv_zone_controller;
actor[65] gv_zone_controller_beacon;
int gv_untitledVariable002;
int gv_untitledVariable003;
bool gv_message_lock;
int gv_num_messages;
text[51] gv_messages;
unit[17] gv_last_turret;
int[17] gv_num_nukes_detected;
int[17] gv_num_nuke_used;
bool gv_reveal_because_two_team_left;
playergroup gv_dead_team_players;
bool[17] gv_player_inherited_bunks;
int gv_winning_team;
bool gv_game_over;
bool gv_game_over_test;
int gv_total_resource_granted;
int[17] gv_total_structure_granted_value;
unitgroup[17] gv_structuresGroup;
unitgroup[17] gv_structuresGroup2;
unitgroup[17] gv_structuresGroup3;
bool[17][17] gv_player_muted;
playergroup gv_cheated_players;
bool gv_chat_lock;
gs_CustomChatRecord gv_customChatRecord;
playergroup gv_event_players;
int gv_game_id;
int gv_event_number;
bank[17] gv_debug_banks;
bank[17] gv_event_banks;
timer[gv_timer_length + 1] gv_registeredTimer;
int gv_activePeriodicCount;
int gv_allPeriodicCount;
fixed[301] gv_activePeriodic;
fixed[301] gv_allPeriodic;
trigger[301] gv_activePeriodicTriggers;
trigger[301] gv_allPeriodicTriggers;
bool gv_game_paused;
bool gv_game_resuming;
int gv_pause_button;
bool[17] gv_pause_allowed_for_player;
int[17] gv_player_vote_statuses;
int gv_pause_overlay;
int[4] gv_pause_buttons;
int gv_countdown_label;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_handles[init_i] = "";
    }
    gv_game_timer = TimerCreate();
    gv_real_timer = TimerCreate();
    gv_leaderboard_button = c_invalidDialogControlId;
    gv_alliance_checkbox = c_invalidDialogControlId;
    gv_observer_reveal_checkbox = c_invalidDialogControlId;
    gv_toggle_control_button = c_invalidDialogControlId;
    gv_scan_ups_button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 64; init_i += 1) {
        gv_bunker_slot_is_real[init_i] = true;
    }
    gv_max_upgrades = 20;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_zoom_buttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_teams[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_teams_and_observers[init_i] = PlayerGroupEmpty();
    }
    gv_all_players = PlayerGroupEmpty();
    gv_all_observers = PlayerGroupEmpty();
    gv_all_players_and_observers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_pylons[init_i] = UnitGroupEmpty();
    }
    gv_magic = "";
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_elos[init_i] = 1000.0;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_mode_history[init_i] = "";
    }
    gv_game_mode_string = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_simple_team_frames[init_i] = c_invalidDialogControlId;
    }
    gv_game_start_time = CurrentDateTimeGet();
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_peak_performance_time[init_i] = IntToDateTime(0);
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_team_peak_performance_for_winning_team_time[init_i][init_j] = IntToDateTime(0);
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_colors[init_i] = 1;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_state_colors[init_i] = Color(0,0,0);
    }
    gv_teamLeaderboard = c_invalidDialogId;
    gv_playerLeaderboard = c_invalidDialogId;
    gv_simpleTeamLeaderboard = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_scores[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_names[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_score_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_name_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_scores[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_names[init_i] = c_invalidDialogControlId;
    }
    gv_results_button = c_invalidDialogControlId;
    gv_achievements_button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_results_dialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_final_performance_time[init_i] = IntToDateTime(0);
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_victory_button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_achievement_ids[init_i] = "";
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_achievements_names[init_i] = "";
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_achievements_dialog[init_i] = c_invalidDialogId;
    }
    gv_help_dismiss = c_invalidDialogControlId;
    gv_help_dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_num_workers[init_i] = 1;
    }
    gv_team_info_current_player = 1;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_dialogs[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_mineral[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_supply[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_losses[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_armor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_range[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_regen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_speed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_armor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_regen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_slots[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_tanks[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_attack[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_workers[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_nukes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 7; init_j += 1) {
            gv_team_info_player_upgrade_buttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 40; init_i += 1) {
        gv_tags[init_i] = c_textTagNone;
    }
    gv_zone_control_rate_limit = 18;
    gv_untitledVariable002 = 100;
    gv_dead_team_players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_structuresGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_structuresGroup2[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_structuresGroup3[init_i] = UnitGroupEmpty();
    }
    gv_cheated_players = PlayerGroupEmpty();
    gv_customChatRecord.lv_messages_Top = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        gv_customChatRecord.lv_messages_Bottom[init_i1] = c_invalidDialogControlId;
    }
    gv_customChatRecord.lv_messages_Container = c_invalidDialogControlId;
    gv_customChatRecord.lv_skunkChat01 = c_invalidDialogControlId;
    gv_customChatRecord.lv_title = c_invalidDialogControlId;
    gv_customChatRecord.lv_recipient = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        gv_customChatRecord.lv_playerNames_String[init_i1] = "";
    }
    gv_customChatRecord.lv_playerNameAsString = c_invalidDialogControlId;
    gv_customChatRecord.lv_context_Label = c_invalidDialogControlId;
    gv_customChatRecord.lv_context_Button = c_invalidDialogControlId;
    gv_customChatRecord.lv_context_Frame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        gv_customChatRecord.lv_mutedPlayers[init_i1] = PlayerGroupEmpty();
    }
    gv_event_players = PlayerGroupEmpty();
    gv_game_id = CurrentSynchronousGameTimeGet();
    gv_pause_button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_pause_allowed_for_player[init_i] = true;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_vote_statuses[init_i] = 1;
    }
    gv_pause_overlay = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_pause_buttons[init_i] = c_invalidDialogControlId;
    }
    gv_countdown_label = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_Build1v1Wall ();
void gf_StubbornCommand (int lp_player);
void gf_HandlesCommand (int lp_player);
void gf_ApplyPlayerSettings ();
void gf_ConfigureConstants ();
void gf_AssignTeamLocations ();
void gf_AssignPlayerColors ();
void gf_SpawnPlayers ();
void gf_SpectatorInit ();
void gf_SpawnPlayers2 ();
void gf_SpectatorZoom (int lp_player, int lp_level, bool lp_also_center);
void gf_SpectatorUI (int lp_player);
void gf_SpawnInitialBunk (int lp_player, int lp_position, int lp_player_race);
void gf_GrantStructure (int lp_player, unit lp_structure);
void gf_ScanOpponentUpsFn (int lp_player);
void gf_DebugCommand (int lp_player);
void gf_InitGameTime ();
void gf_TMFogCommand (int lp_palyer);
void gf_TMResetCommand (int lp_player);
void gf_TMResetUpgradesCommand (int lp_player);
void gf_ResetUpgrades ();
void gf_LoadGameSettings ();
void gf_ApplyTrainingMode ();
void gf_StartCeaseFire ();
void gf_EndCeaseFire ();
void gf_ApplyFogOfWar ();
void gf_BunkCountCommand (int lp_player);
void gf_TryAllowBadBuilds (int lp_player);
void gf_EnableTankSlotConstruction (int lp_player);
void gf_AllowBadBuildsCommand (int lp_player);
void gf_SyncObserverRevealIdentity (playergroup lp_sync_players);
void gf_SyncSharedControl (int lp_player);
void gf_AddControlButton ();
void gf_ControlCommand (int lp_command_player);
void gf_RevealCommand (int lp_player);
void gf_PlayerAfkEnded (int lp_player);
fixed gf_GetAverageOpponentElo (int lp_palyer);
void gf_RecordLastGameResults (int lp_winning_team);
void gf_SignBank (bank lp_bank);
bool gf_VerifyBank (bank lp_bank);
string gf_ComputeChecksum (bank lp_bank);
void gf_RecordCommand ();
void gf_DisplayElo (playergroup lp_players);
void gf_SaveBankIfFullGame (int lp_player);
void gf_RecordUpdateGameStart ();
void gf_RecordUpdateGameVictory (int lp_player);
void gf_PerfCommand (playergroup lp_players);
int gf_GetPlayerScore (int lp_player);
text gf_GetTeamPlayerList (int lp_team);
void gf_ShowFinalStandings (int lp_winning_team);
void gf_ShowCorrectLeaderboard (int lp_player);
void gf_ToggleLeaderboardMode (int lp_player);
void gf_UpdatePlayerColor (int lp_player);
void gf_UpdatePlayerNames (playergroup lp_update_group);
void gf_LeaderboardInit ();
void gf_UpdateLeaderboardSortOrder ();
void gf_UpdateLeaderboard (bool lp_force_update_sort);
string gf_GetDialogButtonText (int lp_player);
void gf_HideDialogsForPlayer (int lp_player);
void gf_CreateResultsButtons ();
void gf_ComputeFinalScores (int lp_winning_team);
void gf_CreateResultsDialog (int lp_winning_team, playergroup lp_show_player);
void gf_ResultsCommand (int lp_player);
void gf_AddAchievement (string lp_id, string lp_name, string lp_icon);
void gf_TestWinGame (int lp_player);
void gf_TestOneBunkAchievement (int lp_player);
void gf_TestEarlyCombatPurchased (int lp_player);
void gf_TestEarlyCombatAchievement (int lp_player);
void gf_TestSafeWorkerAchievement (int lp_player);
void gf_TestCarryTeammateAchievement (int lp_player);
void gf_TestTankRushAchievement (int lp_player);
void gf_TestVictoryBasedAcievements (int lp_winning_team);
void gf_MarkAchievementCompleted (string lp_id, int lp_player, int lp_level);
void gf_AchievementsCommand (int lp_player);
void gf_CreateAchievementsDialog (playergroup lp_show_player);
void gf_HelpCommand (int lp_player);
void gf_UpdateNetResourcesForPlayer (int lp_player);
void gf_TradesCommand (int lp_requesting_player);
void gf_UpdateTeamInfoColor (int lp_player);
void gf_RefreshTeamInfoSup ();
void gf_TeamInfoInit ();
void gf_UpdateTeamInfoForPlayer (int lp_player);
void gf_RegisterTagForCleanup (int lp_tag);
void gf_SetupZoneControlReward ();
void gf_SetupRewards ();
void gf_RewardMessage (point lp_position, int lp_killing_player, int lp_value, int lp_killed_player);
void gf_RedrawDeathNotifications ();
void gf_NotifyPlayerDied (int lp_palyer);
void gf_NotifyPlayerLeave (int lp_palyer);
void gf_AddMessage (text lp_message);
int gf_GetBunkerIndex (unit lp_bunker);
void gf_OnBunkerCreated (int lp_player, unit lp_bunker);
void gf_OnBunkerCreated3 (int lp_player, unit lp_bunker, bool lp_starting_bunker);
void gf_OnScvCreated (unit lp_worker);
fixed gf_TestHugeNukeAchievement (unit lp_unit);
void gf_UpdateAllWorkers (int lp_player);
void gf_UpdateSingleWorker (unit lp_worker, bool lp_player_has_nuke);
bool gf_PlayerHasNuke (int lp_player);
int gf_GetPlayerNumNukes (int lp_player);
void gf_SetDeadPlayerColor (int lp_player);
void gf_TestVictory ();
void gf_OnPlayerDead (int lp_player);
void gf_TestTeamDead (int lp_team);
void gf_ForceTeammateLeave (int lp_player);
void gf_OnPlayerLeave (int lp_player);
void gf_TestPlayerDead (int lp_player);
string gf_GetSectionName (bank lp_bank);
void gf_MutePlayerCommand (int lp_muting_player, string lp_muted_player_string, bool lp_mute);
void gf_InitChat ();
void gf_DialogItemRegister (int lp_dialogItem, int lp_dialogItemEvent, trigger lp_trigger);
void gf_SendChatMessage (string lp_message, playergroup lp_recipientPlayerGroup, int lp_sendingPlayer, text lp_nameofRecipient);
void gf_DisplayChatMessage (text lp_message, playergroup lp_recipientPlayerGroup, int lp_sendingPlayer);
void gf_GameMessage (text lp_message, playergroup lp_recipientPlayerGroup);
text gf_EmojifyStringAsText (string lp_inputText);
void gf_WriteMatchEndEvent (playergroup lp_event_players);
void gf_MatchEndCommand (int lp_player);
void gf_WriteDebug (string lp_key, text lp_text);
void gf_WriteEventForAllPlayers (string lp_type, string lp_text);
void gf_WriteEventForPlayers (playergroup lp_observers, string lp_type, string lp_text);
void gf_InitDebugBanks ();
void gf_InitEventBanks ();
timer gf_OneshotGameTime (fixed lp_time, trigger lp_trigger);
timer gf_OneshotRealTime (fixed lp_time, trigger lp_trigger);
timer gf_InternalOneshot (fixed lp_time, trigger lp_trigger, int lp_type);
void gf_Elapsed (trigger t, fixed lp_time);
void gf_Periodic (trigger t, fixed lp_time);
void gf_SetPeriodicTimerForTrigger (fixed lp_time, trigger lp_t);
void gf_TogglePeriodicTrigger (bool lp_onOff, trigger lp_trigger);
void gf_SetPeriodicTime (trigger lp_trigger, fixed lp_time);
void gf_PauseRegisteredTimers ();
void gf_UnpauseRegisteredTimers ();
void gf_PauseGame ();
void gf_ResumeGame ();
void gf_EvaluatePlayerStatuses ();
void gf_Overlay ();
void gf_junk ();
void gf_PlayerPause (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Zoom;
trigger gt_ButtonPress;
trigger gt_CheckForInvalidGame;
trigger gt_ScanOpponentUps;
trigger gt_MeleeInitialization;
trigger gt_CheckInitCompleted;
trigger gt_GameTimeRemaining;
trigger gt_CeaseFireOver;
trigger gt_AutoEnableBadBuilds;
trigger gt_PeriodicReveal;
trigger gt_Checkbox;
trigger gt_DetectMovement;
trigger gt_DetectPlayerChat;
trigger gt_TrackUnitMovement;
trigger gt_TrackRallyChange;
trigger gt_ShareControlForAfkPlayer;
trigger gt_DisplayEloAtStart;
trigger gt_ComputeStandings;
trigger gt_LeaderboardPeriodicRefresh;
trigger gt_InitWinGameAchievement;
trigger gt_InitOneBunk;
trigger gt_InitCombatShields;
trigger gt_InitSafeWorker;
trigger gt_InitCarryTeammate;
trigger gt_InitHugeNuke;
trigger gt_InitShardPickup;
trigger gt_TestPickupAchievement;
trigger gt_InitTankRush;
trigger gt_HelpInit;
trigger gt_PeriodicUpdateNetResources;
trigger gt_ResourceTradingTracker;
trigger gt_UpdateLosses;
trigger gt_TeamInfoTrackUpgrades;
trigger gt_RefreshTeamInfoMins;
trigger gt_UpdateTeamInfo;
trigger gt_ZoneControlDetection;
trigger gt_ZoneControlLimitReduction;
trigger gt_ZoneControlReward;
trigger gt_tower;
trigger gt_ShardSpawn;
trigger gt_ShardCollected;
trigger gt_SpawnUnit;
trigger gt_OnRallyChange;
trigger gt_OnUpgrade;
trigger gt_BunkerBuild;
trigger gt_BunkerBuild2;
trigger gt_ConstructionCancelled;
trigger gt_BunkerDestoryed;
trigger gt_TankDied;
trigger gt_ScvDied;
trigger gt_OnRetire;
trigger gt_OnUnretire;
trigger gt_ScvCalldown;
trigger gt_TurretCreated;
trigger gt_TurretDied;
trigger gt_DetectNukeAction;
trigger gt_DetectNukeEffect;
trigger gt_ArmNuke;
trigger gt_PeriodicCheckDeath;
trigger gt_PlayerLeaveGame;
trigger gt_MineralTrickle;
trigger gt_TwitchChat;
trigger gt_CheckCheat;
trigger gt_PunishCheat;
trigger gt_UseChatSystem;
trigger gt_EditValue;
trigger gt_MainLoop;
trigger gt_ButtonClicked;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_Build1v1Wall () {
    // Variable Declarations
    point lv_point;
    int lv_y;
    int lv_x;

    // Automatic Variable Declarations
    const int autoA1B54154_ae = 96;
    const int autoA1B54154_ai = 1;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("21") == "0001")) {
        lv_x = 15;
        for ( ; ( (autoA1B54154_ai >= 0 && lv_x <= autoA1B54154_ae) || (autoA1B54154_ai < 0 && lv_x >= autoA1B54154_ae) ) ; lv_x += autoA1B54154_ai ) {
            lv_point = Point((lv_x + 0.5), 53.5);
            libNtve_gf_CreateModelAtPoint("LoSBlockerColumn", lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathingBlocker1x1", c_unitCreateIgnorePlacement, 0, lv_point);
        }
    }

}

void gf_StubbornCommand (int lp_player) {
    // Variable Declarations
    bool lv_is_now_on;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_is_now_on = (BankValueGetAsFlag(gv_banks[lp_player], "Player", "stubborn_mode") == false);
    BankValueSetFromFlag(gv_banks[lp_player], "Player", "stubborn_mode", lv_is_now_on);
    if ((lv_is_now_on == true)) {
    }
    else {
        gf_GameMessage(StringExternal("Param/Value/689431A5"), PlayerGroupSingle(lp_player));
    }
    gf_SaveBankIfFullGame(lp_player);
    gf_ApplyPlayerSettings();
}

void gf_HandlesCommand (int lp_player) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto6841C15C_g;

    // Variable Initialization

    // Implementation
    auto6841C15C_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6841C15C_g, lv_player);
        if (lv_player < 0) { break; }
        gf_GameMessage(StringToText(gv_player_handles[lv_player]), PlayerGroupSingle(lp_player));
    }
}

void gf_ApplyPlayerSettings () {
    // Variable Declarations
    string lv_skin;
    bool lv_skin2;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoFFB6A355_g;

    // Variable Initialization

    // Implementation
    autoFFB6A355_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoFFB6A355_g, lv_player);
        if (lv_player < 0) { break; }
        gf_TryAllowBadBuilds(lv_player);
        PlayerApplySkin(lv_player, "MarineXPR", false);
        PlayerApplySkin(lv_player, "MarineXPR", false);
        PlayerApplySkin(lv_player, "GhostNova", false);
        PlayerApplySkin(lv_player, "ZealotTaldarim", false);
        PlayerApplySkin(lv_player, "ZealotGolden", false);
        PlayerApplySkin(lv_player, "ZealotXPR", false);
        PlayerApplySkin(lv_player, "ZealotPurifier", false);
        PlayerApplySkin(lv_player, "HighTemplarTaldarim", false);
        PlayerApplySkin(lv_player, "HighTemplarPurifier", false);
        PlayerApplySkin(lv_player, "StalkerTaldarim", false);
        PlayerApplySkin(lv_player, "StalkerDeluxe", false);
        PlayerApplySkin(lv_player, "StalkerGolden", false);
        PlayerApplySkin(lv_player, "StalkerTaldarim", false);
        PlayerApplySkin(lv_player, "StalkerPurifier", false);
        PlayerApplySkin(lv_player, "AdeptCE", false);
        PlayerApplySkin(lv_player, "AdeptTaldarim", false);
        PlayerApplySkin(lv_player, "AdeptPurifier", false);
        PlayerApplySkin(lv_player, "AdeptGolden", false);
        if ((gv_banks[lv_player] != null) && (BankValueGetAsFlag(gv_banks[lv_player], "Player", "stubborn_mode") == true)) {
            gf_GameMessage(StringExternal("Param/Value/4BDD3BD8"), PlayerGroupSingle(EventPlayer()));
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/ColorButton");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
        }
        else {
            UIUnitColorStyleOverride(PlayerGroupSingle(lv_player), c_unitColorStyleNormal);
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/ColorButton");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), false);
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
            PlayerOptionOverride(lv_player, "controlgroupmode", "3");
            PlayerOptionOverride(lv_player, "selectuncontrolable", "1");
        }
    }
}

void gf_ConfigureConstants () {
    // Variable Declarations
    int lv_y;
    int lv_x;
    int lv_num_lobby_teams;
    int lv_race;
    int lv_tier;
    int lv_merc;
    int lv_index;

    // Automatic Variable Declarations
    const int autoFACDB944_ae = 15;
    const int autoFACDB944_ai = 1;
    const int autoA08FAAE3_ae = 7;
    const int autoA08FAAE3_ai = 1;
    const int auto3D378665_ae = 7;
    const int auto3D378665_ai = 1;
    const int auto09C3E088_ae = 2;
    const int auto09C3E088_ai = 1;
    const int auto9745A44B_ae = 3;
    const int auto9745A44B_ai = 1;
    const int auto6C356C54_ae = 1;
    const int auto6C356C54_ai = 1;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("22") == "0002")) {
        gv_max_player_zoom_level = 60;
        gf_GameMessage(StringExternal("Param/Value/C02148CE"), gv_all_players_and_observers);
    }
    else {
        gv_max_player_zoom_level = 35;
        CameraSetData(PlayerGroupAll(), "Dflt2");
    }
    UISetResourceTradingAllowed(c_resourceTypeMinerals, true);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    if ((GameAttributeGameValue("24") == "0002")) {
        gf_GameMessage(StringExternal("Param/Value/C4D78A55"), gv_all_players_and_observers);
        gv_max_upgrades = 25;
    }

    if ((GameAttributeGameValue("24") == "0003")) {
        gv_max_upgrades = 30;
    }

    if ((GameAttributeGameValue("24") == "0004")) {
        gv_max_upgrades = 35;
    }

    if ((GameAttributeGameValue("24") == "0005")) {
        gv_max_upgrades = 99;
    }

    if ((GameAttributeGameValue("24") != "0001")) {
        gf_GameMessage(StringExternal("Param/Value/A8D1F3EB"), gv_all_players_and_observers);
    }

    if ((GameAttributeGameValue("20") == "0001")) {
    }

    if ((GameAttributeGameValue("20") == "0010")) {
        UISetResourceTradeCountdownTime(180);
    }

    if ((GameAttributeGameValue("20") == "0003")) {
        UISetResourceTradeCountdownTime(240);
    }

    if ((GameAttributeGameValue("20") == "0004")) {
        UISetResourceTradeCountdownTime(300);
    }

    if ((GameAttributeGameValue("20") == "0005")) {
        UISetResourceTradeCountdownTime(360);
    }

    if ((GameAttributeGameValue("20") == "0006")) {
        UISetResourceTradeCountdownTime(420);
    }

    if ((GameAttributeGameValue("20") == "0007")) {
        UISetResourceTradeCountdownTime(480);
    }

    if ((GameAttributeGameValue("20") == "0008")) {
        UISetResourceTradeCountdownTime(540);
    }

    if ((GameAttributeGameValue("20") == "0009")) {
        UISetResourceTradeCountdownTime(600);
    }

    if ((GameAttributeGameValue("20") == "0002")) {
        UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    }

    lv_index = 0;
    for ( ; ( (autoFACDB944_ai >= 0 && lv_index <= autoFACDB944_ae) || (autoFACDB944_ai < 0 && lv_index >= autoFACDB944_ae) ) ; lv_index += autoFACDB944_ai ) {
        if (((PlayerType(lv_index) != c_playerTypeNone))) {
            if (((GameAttributeGameValue("9") == "0001") || ((GameAttributeGameValue("9") == "0004") && (PlayerRace(lv_index) == "Terr")))) {
                gv_player_race_index[lv_index] = 0;
            }

            if (((GameAttributeGameValue("9") == "0002") || ((GameAttributeGameValue("9") == "0004") && (PlayerRace(lv_index) == "Prot")))) {
                gv_player_race_index[lv_index] = 1;
            }

            if (((GameAttributeGameValue("9") == "0003") || ((GameAttributeGameValue("9") == "0004") && (PlayerRace(lv_index) == "Zerg")))) {
                gv_player_race_index[lv_index] = 2;
            }

        }

    }
    gv_anonymous_mode = (GameAttributeGameValue("12") == "0001");
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 250);
    gv_chat_mode = GameAttributeGameValue("17");
    if ((gv_chat_mode == "0004")) {
        if ((gv_anonymous_mode == true)) {
            gv_chat_mode = "0001";
        }
        else {
            gv_chat_mode = "0003";
        }
    }

    gv_all_chat_enabled = (gv_chat_mode != "0002");
    gv_custom_chat_enabled = (gv_chat_mode != "0003");
    lv_x = 0;
    for ( ; ( (autoA08FAAE3_ai >= 0 && lv_x <= autoA08FAAE3_ae) || (autoA08FAAE3_ai < 0 && lv_x >= autoA08FAAE3_ae) ) ; lv_x += autoA08FAAE3_ai ) {
        lv_y = 0;
        for ( ; ( (auto3D378665_ai >= 0 && lv_y <= auto3D378665_ae) || (auto3D378665_ai < 0 && lv_y >= auto3D378665_ae) ) ; lv_y += auto3D378665_ai ) {
            lv_index = (lv_x + (lv_y * 8));
            gv_bunker_slot_centers[lv_index] = Point((21 + (lv_x * 10)), (89 - (lv_y * 10)));
            gv_bunker_slot_centers[lv_index] = Point((21 + (lv_x * 10)), (89 - (lv_y * 10)));
            gv_bunker_slot_regions[lv_index] = RegionRect((PointGetX(gv_bunker_slot_centers[lv_index]) - 4.5), (PointGetY(gv_bunker_slot_centers[lv_index]) - 4.5), (PointGetX(gv_bunker_slot_centers[lv_index]) + 4.5), (PointGetY(gv_bunker_slot_centers[lv_index]) + 4.5));
        }
    }
    gv_bunker_slot_is_real[0] = false;
    gv_bunker_slot_is_real[7] = false;
    gv_bunker_slot_is_real[56] = false;
    gv_bunker_slot_is_real[63] = false;
    gv_race_spawn_unit_types[0][0][0] = "Marine";
    gv_race_spawn_unit_types[0][1][0] = "Reaper";
    gv_race_spawn_unit_types[0][2][0] = "Marauder";
    gv_race_spawn_unit_types[0][3][0] = "Ghost";
    gv_race_spawn_unit_types[0][0][1] = "WarPig";
    gv_race_spawn_unit_types[0][1][1] = "MercReaper";
    gv_race_spawn_unit_types[0][2][1] = "HammerSecurity";
    gv_race_spawn_unit_types[0][3][1] = "Spectre";
    gv_race_spawn_unit_types[1][0][0] = "Zealot";
    gv_race_spawn_unit_types[1][1][0] = "Adept";
    gv_race_spawn_unit_types[1][2][0] = "Stalker";
    gv_race_spawn_unit_types[1][3][0] = "HighTemplar";
    gv_race_spawn_unit_types[1][0][1] = "ZealotAiur";
    gv_race_spawn_unit_types[1][1][1] = "Talis";
    gv_race_spawn_unit_types[1][2][1] = "StalkerPurifier";
    gv_race_spawn_unit_types[1][3][1] = "HighTemplarTaldarim";
    gv_race_spawn_unit_types[2][0][0] = "Zergling";
    gv_race_spawn_unit_types[2][1][0] = "Hydralisk";
    gv_race_spawn_unit_types[2][2][0] = "Roach";
    gv_race_spawn_unit_types[2][3][0] = "Ultralisk";
    gv_race_spawn_unit_types[2][0][1] = "Swarmling";
    gv_race_spawn_unit_types[2][1][1] = "HunterKiller";
    gv_race_spawn_unit_types[2][2][1] = "PrimalRoachACGluescreenDummy";
    gv_race_spawn_unit_types[2][3][1] = "HotSNoxious";
    lv_race = 0;
    for ( ; ( (auto09C3E088_ai >= 0 && lv_race <= auto09C3E088_ae) || (auto09C3E088_ai < 0 && lv_race >= auto09C3E088_ae) ) ; lv_race += auto09C3E088_ai ) {
        lv_tier = 0;
        for ( ; ( (auto9745A44B_ai >= 0 && lv_tier <= auto9745A44B_ae) || (auto9745A44B_ai < 0 && lv_tier >= auto9745A44B_ae) ) ; lv_tier += auto9745A44B_ai ) {
            lv_merc = 0;
            for ( ; ( (auto6C356C54_ai >= 0 && lv_merc <= auto6C356C54_ae) || (auto6C356C54_ai < 0 && lv_merc >= auto6C356C54_ae) ) ; lv_merc += auto6C356C54_ai ) {
                gv_race_spawn_unit_type_supply_cost[lv_race][lv_tier][lv_merc] = RoundI(UnitTypeGetProperty(gv_race_spawn_unit_types[lv_race][lv_tier][lv_merc], c_unitPropSuppliesUsed));
            }
        }
    }
    gv_race_spawner_types[0][0] = "Bunker";
    gv_race_spawner_types[0][1] = "InfestedBunker";
    gv_race_spawner_types[1][0] = "Gateway";
    gv_race_spawner_types[1][1] = "Gateway";
    gv_race_spawner_types[2][0] = "SunkenColony";
    gv_race_spawner_types[2][1] = "PrimalSunkenColony";
    gv_race_worker_types[0] = "SCV";
    gv_race_worker_types[1] = "Probe";
    gv_race_worker_types[2] = "Drone";
    gv_race_research_facility_types[0] = "EngineeringBay";
    gv_race_research_facility_types[1] = "Forge";
    gv_race_research_facility_types[2] = "EvolutionChamber";
    gv_race_nuke_facility_types[0] = "GhostAcademy";
    gv_race_nuke_facility_types[1] = "SoACaster";
    gv_race_nuke_facility_types[2] = "Spire";
    gv_race_teaminfo_icons[0][0] = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel0.dds";
    gv_race_teaminfo_icons[0][1] = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel0.dds";
    gv_race_teaminfo_icons[0][2] = "Assets\\Textures\\btn-tips-terran-penetrator.dds";
    gv_race_teaminfo_icons[0][3] = "Assets\\Textures\\btn-ability-terran-heal-color.dds";
    gv_race_teaminfo_icons[0][4] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_race_teaminfo_icons[0][5] = "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds";
    gv_race_teaminfo_icons[0][6] = "Assets\\Textures\\btn-upgrade-swann-regenerativebiosteel.dds";
    gv_race_teaminfo_icons[0][7] = "Assets\\Textures\\btn-upgrade-terran-neosteelframe.dds";
    gv_race_teaminfo_icons[0][8] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-sieged.dds";
    gv_race_teaminfo_icons[0][9] = "Assets\\Textures\\btn-unit-terran-scv.dds";
    gv_race_teaminfo_icons[0][10] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
    gv_race_teaminfo_icons[1][0] = "Assets\\Textures\\btn-ability-protoss-voidarmor.dds";
    gv_race_teaminfo_icons[1][1] = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds";
    gv_race_teaminfo_icons[1][2] = "Assets\\Textures\\btn-upgrade-protoss-structureovercharge.dds";
    gv_race_teaminfo_icons[1][3] = "Assets\\Textures\\btn-ability-protoss-shieldbattery-color.dds";
    gv_race_teaminfo_icons[1][4] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_race_teaminfo_icons[1][5] = "Assets\\Textures\\btn-ability-protoss-arcshield.dds";
    gv_race_teaminfo_icons[1][6] = "Assets\\Textures\\btn-ability-spearofadun-shieldovercharge.dds";
    gv_race_teaminfo_icons[1][7] = "Assets\\Textures\\btn-upgrade-protoss-researchbosoniccore.dds";
    gv_race_teaminfo_icons[1][8] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-sieged.dds";
    gv_race_teaminfo_icons[1][9] = "Assets\\Textures\\btn-unit-terran-scv.dds";
    gv_race_teaminfo_icons[1][10] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
    gv_race_teaminfo_icons[2][0] = "Assets\\Textures\\btn-ability-protoss-voidarmor.dds";
    gv_race_teaminfo_icons[2][1] = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds";
    gv_race_teaminfo_icons[2][2] = "Assets\\Textures\\btn-upgrade-protoss-structureovercharge.dds";
    gv_race_teaminfo_icons[2][3] = "Assets\\Textures\\btn-ability-protoss-shieldbattery-color.dds";
    gv_race_teaminfo_icons[2][4] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_race_teaminfo_icons[2][5] = "Assets\\Textures\\btn-ability-protoss-arcshield.dds";
    gv_race_teaminfo_icons[2][6] = "Assets\\Textures\\btn-ability-spearofadun-shieldovercharge.dds";
    gv_race_teaminfo_icons[2][7] = "Assets\\Textures\\btn-upgrade-protoss-researchbosoniccore.dds";
    gv_race_teaminfo_icons[1][8] = "Assets\\Textures\\btn-unit-terran-siegetankmercenary-sieged.dds";
    gv_race_teaminfo_icons[1][9] = "Assets\\Textures\\btn-unit-terran-scv.dds";
    gv_race_teaminfo_icons[1][10] = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";
    gv_race_teaminfo_upgrades[0][0] = "MarineArmor";
    gv_race_teaminfo_upgrades[0][1] = "MarineWeapons";
    gv_race_teaminfo_upgrades[0][2] = "MarineAttackRange";
    gv_race_teaminfo_upgrades[0][3] = "MarineLifeRegeneration";
    gv_race_teaminfo_upgrades[0][4] = "MarineMovespeed";
    gv_race_teaminfo_upgrades[0][5] = "BunkerArmor";
    gv_race_teaminfo_upgrades[0][6] = "BunkerLifeRegeneration";
    gv_race_teaminfo_upgrades[0][7] = "BunkerCapacity";
    gv_race_teaminfo_upgrades[1][0] = "MarineArmor";
    gv_race_teaminfo_upgrades[1][1] = "MarineWeapons";
    gv_race_teaminfo_upgrades[1][2] = "MarineAttackRange";
    gv_race_teaminfo_upgrades[1][3] = "MarineLifeRegeneration";
    gv_race_teaminfo_upgrades[1][4] = "MarineMovespeed";
    gv_race_teaminfo_upgrades[1][5] = "BunkerArmor";
    gv_race_teaminfo_upgrades[1][6] = "BunkerLifeRegeneration";
    gv_race_teaminfo_upgrades[1][7] = "BunkerCapacity";
    gv_race_teaminfo_upgrades[2][0] = "UpgradeShields";
    gv_race_teaminfo_upgrades[2][1] = "ProtossGroundWeaponsLevel1";
    gv_race_teaminfo_upgrades[2][2] = "AdeptPiercingAttack";
    gv_race_teaminfo_upgrades[2][3] = "UnknownUpgrade";
    gv_race_teaminfo_upgrades[2][4] = "MarineMovespeed";
    gv_race_teaminfo_upgrades[2][5] = "Structure";
    gv_race_teaminfo_upgrades[2][6] = "StuctureRegen";
    gv_race_teaminfo_upgrades[2][7] = "UpgradeBaseWeapon";
    gv_race_teaminfo_upgrade_abilities[0][0] = AbilityCommand("OrderInfantryArmorUpgrade", 0);
    gv_race_teaminfo_upgrade_abilities[0][1] = AbilityCommand("OrderInfantryWeaponsUpgrade", 0);
    gv_race_teaminfo_upgrade_abilities[0][2] = AbilityCommand("OrderInfantryAttackRangeUpgrade", 0);
    gv_race_teaminfo_upgrade_abilities[0][3] = AbilityCommand("OrderInfantryLifeRegenerationUpgrade", 0);
    gv_race_teaminfo_upgrade_abilities[0][4] = AbilityCommand("OrderInfantryMovespeedUpgrade", 0);
    gv_race_teaminfo_upgrade_abilities[0][5] = AbilityCommand("EngineeringBayResearch", 24);
    gv_race_teaminfo_upgrade_abilities[0][6] = AbilityCommand("EngineeringBayResearch", 23);
    gv_race_teaminfo_upgrade_abilities[0][7] = AbilityCommand("EngineeringBayResearch", 22);
    gv_race_teaminfo_upgrade_abilities[1][0] = AbilityCommand("EngineeringBayResearch", 28);
    gv_race_teaminfo_upgrade_abilities[1][1] = AbilityCommand("EngineeringBayResearch", 29);
    gv_race_teaminfo_upgrade_abilities[1][2] = AbilityCommand("EngineeringBayResearch", 27);
    gv_race_teaminfo_upgrade_abilities[1][3] = AbilityCommand("EngineeringBayResearch", 26);
    gv_race_teaminfo_upgrade_abilities[1][4] = AbilityCommand("EngineeringBayResearch", 25);
    gv_race_teaminfo_upgrade_abilities[1][5] = AbilityCommand("EngineeringBayResearch", 24);
    gv_race_teaminfo_upgrade_abilities[1][6] = AbilityCommand("EngineeringBayResearch", 23);
    gv_race_teaminfo_upgrade_abilities[1][7] = AbilityCommand("EngineeringBayResearch", 22);
    gv_race_teaminfo_upgrade_abilities[2][0] = AbilityCommand("EngineeringBayResearch", 28);
    gv_race_teaminfo_upgrade_abilities[2][1] = AbilityCommand("EngineeringBayResearch", 29);
    gv_race_teaminfo_upgrade_abilities[2][2] = AbilityCommand("EngineeringBayResearch", 27);
    gv_race_teaminfo_upgrade_abilities[2][3] = AbilityCommand("EngineeringBayResearch", 26);
    gv_race_teaminfo_upgrade_abilities[2][4] = AbilityCommand("EngineeringBayResearch", 25);
    gv_race_teaminfo_upgrade_abilities[2][5] = AbilityCommand("EngineeringBayResearch", 24);
    gv_race_teaminfo_upgrade_abilities[2][6] = AbilityCommand("EngineeringBayResearch", 23);
    gv_race_teaminfo_upgrade_abilities[2][7] = AbilityCommand("EngineeringBayResearch", 22);
    gv_spawner_tier[9] = 1;
    gv_spawner_tier[10] = 1;
    gv_spawner_tier[11] = 1;
    gv_spawner_tier[12] = 1;
    gv_spawner_tier[13] = 1;
    gv_spawner_tier[14] = 1;
    gv_spawner_tier[17] = 1;
    gv_spawner_tier[18] = 2;
    gv_spawner_tier[19] = 2;
    gv_spawner_tier[20] = 2;
    gv_spawner_tier[21] = 2;
    gv_spawner_tier[22] = 1;
    gv_spawner_tier[25] = 1;
    gv_spawner_tier[26] = 2;
    gv_spawner_tier[27] = 3;
    gv_spawner_tier[28] = 3;
    gv_spawner_tier[29] = 2;
    gv_spawner_tier[30] = 1;
    gv_spawner_tier[33] = 1;
    gv_spawner_tier[34] = 2;
    gv_spawner_tier[35] = 3;
    gv_spawner_tier[36] = 3;
    gv_spawner_tier[37] = 2;
    gv_spawner_tier[38] = 1;
    gv_spawner_tier[41] = 1;
    gv_spawner_tier[42] = 2;
    gv_spawner_tier[43] = 2;
    gv_spawner_tier[44] = 2;
    gv_spawner_tier[45] = 2;
    gv_spawner_tier[46] = 1;
    gv_spawner_tier[49] = 1;
    gv_spawner_tier[50] = 1;
    gv_spawner_tier[51] = 1;
    gv_spawner_tier[52] = 1;
    gv_spawner_tier[53] = 1;
    gv_spawner_tier[54] = 1;
    gv_spawn_scan_order[0] = 1;
    gv_spawn_scan_order[1] = 6;
    gv_spawn_scan_order[2] = 15;
    gv_spawn_scan_order[3] = 55;
    gv_spawn_scan_order[4] = 62;
    gv_spawn_scan_order[5] = 57;
    gv_spawn_scan_order[6] = 48;
    gv_spawn_scan_order[7] = 8;
    gv_spawn_scan_order[8] = 2;
    gv_spawn_scan_order[9] = 5;
    gv_spawn_scan_order[10] = 23;
    gv_spawn_scan_order[11] = 47;
    gv_spawn_scan_order[12] = 61;
    gv_spawn_scan_order[13] = 58;
    gv_spawn_scan_order[14] = 40;
    gv_spawn_scan_order[15] = 16;
    gv_spawn_scan_order[16] = 3;
    gv_spawn_scan_order[17] = 4;
    gv_spawn_scan_order[18] = 31;
    gv_spawn_scan_order[19] = 39;
    gv_spawn_scan_order[20] = 59;
    gv_spawn_scan_order[21] = 60;
    gv_spawn_scan_order[22] = 32;
    gv_spawn_scan_order[23] = 24;
    gv_spawn_scan_order[24] = 9;
    gv_spawn_scan_order[25] = 14;
    gv_spawn_scan_order[26] = 54;
    gv_spawn_scan_order[27] = 49;
    gv_spawn_scan_order[28] = 10;
    gv_spawn_scan_order[29] = 13;
    gv_spawn_scan_order[30] = 22;
    gv_spawn_scan_order[31] = 46;
    gv_spawn_scan_order[32] = 53;
    gv_spawn_scan_order[33] = 50;
    gv_spawn_scan_order[34] = 41;
    gv_spawn_scan_order[35] = 17;
    gv_spawn_scan_order[36] = 11;
    gv_spawn_scan_order[37] = 12;
    gv_spawn_scan_order[38] = 30;
    gv_spawn_scan_order[39] = 38;
    gv_spawn_scan_order[40] = 52;
    gv_spawn_scan_order[41] = 51;
    gv_spawn_scan_order[42] = 33;
    gv_spawn_scan_order[43] = 25;
    gv_spawn_scan_order[44] = 18;
    gv_spawn_scan_order[45] = 21;
    gv_spawn_scan_order[46] = 45;
    gv_spawn_scan_order[47] = 42;
    gv_spawn_scan_order[48] = 19;
    gv_spawn_scan_order[49] = 20;
    gv_spawn_scan_order[50] = 29;
    gv_spawn_scan_order[51] = 37;
    gv_spawn_scan_order[52] = 44;
    gv_spawn_scan_order[53] = 43;
    gv_spawn_scan_order[54] = 34;
    gv_spawn_scan_order[55] = 26;
    gv_spawn_scan_order[56] = 27;
    gv_spawn_scan_order[57] = 28;
    gv_spawn_scan_order[58] = 36;
    gv_spawn_scan_order[59] = 35;
    gv_spawn_scan_order[60] = 0;
    gv_spawn_scan_order[61] = 0;
    gv_spawn_scan_order[62] = 0;
    gv_spawn_scan_order[63] = 0;
    gv_engineering_bay_positions[0] = Point(18.5, 88.5);
    gv_engineering_bay_positions[1] = Point(21.5, 90.5);
    gv_engineering_bay_positions[2] = Point(90.5, 90.5);
    gv_engineering_bay_positions[3] = Point(93.5, 88.5);
    gv_engineering_bay_positions[4] = Point(93.5, 19.5);
    gv_engineering_bay_positions[5] = Point(90.5, 17.5);
    gv_engineering_bay_positions[6] = Point(21.5, 17.5);
    gv_engineering_bay_positions[7] = Point(18.5, 19.5);
    gv_engineering_bay_positions[8] = Point(18.5, 88.5);
    gv_engineering_bay_positions[9] = Point(21.5, 90.5);
    gv_engineering_bay_positions[10] = Point(90.5, 90.5);
    gv_engineering_bay_positions[11] = Point(93.5, 88.5);
    gv_nuke_silo_positions[0] = Point(16.5, 91.5);
    gv_nuke_silo_positions[1] = Point(19.5, 93.5);
    gv_nuke_silo_positions[2] = Point(92.5, 93.5);
    gv_nuke_silo_positions[3] = Point(95.5, 91.5);
    gv_nuke_silo_positions[4] = Point(95.5, 16.5);
    gv_nuke_silo_positions[5] = Point(92.5, 14.5);
    gv_nuke_silo_positions[6] = Point(19.5, 14.5);
    gv_nuke_silo_positions[7] = Point(16.5, 16.5);
    gv_nuke_silo_positions[8] = Point(16.5, 91.5);
    gv_nuke_silo_positions[9] = Point(92.5, 93.5);
    gv_nuke_silo_positions[10] = Point(95.5, 16.5);
    gv_nuke_silo_positions[11] = Point(19.5, 14.5);
    gv_initial_bunker_positions[0] = Point(21.5, 78.5);
    gv_initial_bunker_positions[1] = Point(31.5, 88.5);
    gv_initial_bunker_positions[2] = Point(80.5, 88.5);
    gv_initial_bunker_positions[3] = Point(90.5, 78.5);
    gv_initial_bunker_positions[4] = Point(90.5, 29.5);
    gv_initial_bunker_positions[5] = Point(80.5, 19.5);
    gv_initial_bunker_positions[6] = Point(31.5, 19.5);
    gv_initial_bunker_positions[7] = Point(21.5, 29.5);
    gv_initial_bunker_positions[8] = Point(31.5, 78.5);
    gv_initial_bunker_positions[9] = Point(80.5, 78.5);
    gv_initial_bunker_positions[10] = Point(80.5, 29.5);
    gv_initial_bunker_positions[11] = Point(31.5, 29.5);
    gv_position_spawn_offsets[0][0] = 1.0;
    gv_position_spawn_offsets[1][0] = 1.0;
    gv_position_spawn_offsets[2][0] = -1.0;
    gv_position_spawn_offsets[3][0] = -1.0;
    gv_position_spawn_offsets[4][0] = -1.0;
    gv_position_spawn_offsets[5][0] = -1.0;
    gv_position_spawn_offsets[6][0] = 1.0;
    gv_position_spawn_offsets[7][0] = 1.0;
    gv_position_spawn_offsets[8][0] = 1.0;
    gv_position_spawn_offsets[9][0] = -1.0;
    gv_position_spawn_offsets[10][0] = -1.0;
    gv_position_spawn_offsets[11][0] = 1.0;
    gv_position_spawn_offsets[0][1] = -1.0;
    gv_position_spawn_offsets[1][1] = -1.0;
    gv_position_spawn_offsets[2][1] = -1.0;
    gv_position_spawn_offsets[3][1] = -1.0;
    gv_position_spawn_offsets[4][1] = 1.0;
    gv_position_spawn_offsets[5][1] = 1.0;
    gv_position_spawn_offsets[6][1] = 1.0;
    gv_position_spawn_offsets[7][1] = 1.0;
    gv_position_spawn_offsets[8][1] = -1.0;
    gv_position_spawn_offsets[9][1] = -1.0;
    gv_position_spawn_offsets[10][1] = 1.0;
    gv_position_spawn_offsets[11][1] = 1.0;
    gv_extra_bunk_position[0] = 1;
    gv_extra_bunk_position[1] = 0;
    gv_extra_bunk_position[2] = 3;
    gv_extra_bunk_position[3] = 2;
    gv_extra_bunk_position[4] = 5;
    gv_extra_bunk_position[5] = 4;
    gv_extra_bunk_position[6] = 7;
    gv_extra_bunk_position[7] = 6;
    gv_position_lanes[0] = 7;
    gv_position_lanes[7] = 0;
    gv_position_lanes[1] = 2;
    gv_position_lanes[2] = 1;
    gv_position_lanes[3] = 4;
    gv_position_lanes[4] = 3;
    gv_position_lanes[5] = 6;
    gv_position_lanes[6] = 5;
    gv_position_lanes[8] = 10;
    gv_position_lanes[10] = 8;
    gv_position_lanes[9] = 11;
    gv_position_lanes[11] = 9;
    gv_pylon_positions_large_1[0] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[1] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[2] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[3] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[4] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[5] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[6] = Point(96.0, 14.0);
    gv_pylon_positions_large_1[7] = Point(96.0, 14.0);
    gv_pylon_positions_large_1[8] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[9] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[10] = Point(16.0, 14.0);
    gv_pylon_positions_large_1[11] = Point(96.0, 14.0);
    gv_pylon_positions_large_2[0] = Point(96.0, 14.0);
    gv_pylon_positions_large_2[1] = Point(96.0, 14.0);
    gv_pylon_positions_large_2[2] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[3] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[4] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[5] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[6] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[7] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[8] = Point(96.0, 14.0);
    gv_pylon_positions_large_2[9] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[10] = Point(16.0, 94.0);
    gv_pylon_positions_large_2[11] = Point(16.0, 94.0);
    gv_pylon_positions_large_3[0] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[1] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[2] = Point(96.0, 14.0);
    gv_pylon_positions_large_3[3] = Point(96.0, 14.0);
    gv_pylon_positions_large_3[4] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[5] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[6] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[7] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[8] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[9] = Point(96.0, 14.0);
    gv_pylon_positions_large_3[10] = Point(96.0, 94.0);
    gv_pylon_positions_large_3[11] = Point(96.0, 94.0);
    gv_pylon_positions_small_1[0] = Point(16.0, 94.0);
    gv_pylon_positions_small_1[1] = Point(16.0, 94.0);
    gv_pylon_positions_small_1[2] = Point(96.0, 94.0);
    gv_pylon_positions_small_1[3] = Point(96.0, 94.0);
    gv_pylon_positions_small_1[4] = Point(96.0, 14.0);
    gv_pylon_positions_small_1[5] = Point(96.0, 14.0);
    gv_pylon_positions_small_1[6] = Point(16.0, 14.0);
    gv_pylon_positions_small_1[7] = Point(16.0, 14.0);
    gv_pylon_positions_small_1[8] = Point(16.0, 94.0);
    gv_pylon_positions_small_1[9] = Point(96.0, 94.0);
    gv_pylon_positions_small_1[10] = Point(96.0, 14.0);
    gv_pylon_positions_small_1[11] = Point(16.0, 14.0);
}

void gf_AssignTeamLocations () {
    int init_i;

    // Variable Declarations
    int lv_team_index2;
    int lv_team_index;
    int lv_size;
    int lv_swap_player;
    int lv_loop;
    int lv_team1;
    int lv_team2;
    int lv_position;
    int lv_slot_on_team;
    int[6][5] lv_team_placement;
    string lv_mode;
    int lv_current_slot;
    int lv_team;
    int[6][5] lv_lobby_teams;
    bool[17] lv_lobby_player_has_team;
    int[6] lv_lobby_team_size;
    int lv_lobby_team;
    int lv_lobby_current_team;
    playergroup[5] lv_teams;
    int lv_player2;
    string lv_attribute_value;
    int lv_player;
    int lv_max_team_size;
    int lv_min_team_size;
    int lv_num_lobby_teams;

    // Automatic Variable Declarations
    playergroup auto4A73E408_g;
    playergroup auto8785B3BC_g;
    int auto07BC1A5F_ae;
    const int auto07BC1A5F_ai = 1;
    playergroup auto4D3D80E7_g;
    int autoE286ED9A_ae;
    const int autoE286ED9A_ai = 1;
    const int autoCD8200B8_ae = 15;
    const int autoCD8200B8_ai = 1;
    const int autoEB2318FC_ae = 5;
    const int autoEB2318FC_ai = 1;
    const int auto9C6A9D8F_ae = 10;
    const int auto9C6A9D8F_ai = 1;
    const int auto2C5951D7_ae = 3;
    const int auto2C5951D7_ai = 1;
    const int auto70BD7D8D_ae = 30;
    const int auto70BD7D8D_ai = 1;
    int auto52884C1E_ae;
    const int auto52884C1E_ai = 1;
    int auto947EBC81_ae;
    const int auto947EBC81_ai = 1;
    playergroup autoDA4A409A_g;
    const int autoD84268BD_ae = 15;
    const int autoD84268BD_ai = 1;
    const int autoAD41E70C_ae = 15;
    const int autoAD41E70C_ai = 1;

    // Variable Initialization
    lv_lobby_current_team = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_teams[init_i] = PlayerGroupEmpty();
    }
    lv_min_team_size = 4;

    // Implementation
    if ((GameAttributeGameValue("19") == "0001")) {
        lv_num_lobby_teams = 2;
    }
    else {
        lv_num_lobby_teams = 4;
    }
    auto4A73E408_g = GameAttributePlayersForTeam((lv_num_lobby_teams + 1));
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4A73E408_g, lv_player);
        if (lv_player < 0) { break; }
        gv_player_is_observer[lv_player] = true;
    }
    auto8785B3BC_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8785B3BC_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            gv_game_contains_ai = true;
        }

    }
    lv_mode = GameAttributeGameValue("1");
    auto07BC1A5F_ae = lv_num_lobby_teams;
    lv_lobby_team = 1;
    for ( ; ( (auto07BC1A5F_ai >= 0 && lv_lobby_team <= auto07BC1A5F_ae) || (auto07BC1A5F_ai < 0 && lv_lobby_team >= auto07BC1A5F_ae) ) ; lv_lobby_team += auto07BC1A5F_ai ) {
        auto4D3D80E7_g = GameAttributePlayersForTeam(lv_lobby_team);
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4D3D80E7_g, lv_player);
            if (lv_player < 0) { break; }
            lv_lobby_teams[lv_lobby_current_team][lv_lobby_team_size[lv_lobby_current_team]] = lv_player;
            lv_lobby_team_size[lv_lobby_current_team] = (lv_lobby_team_size[lv_lobby_current_team] + 1);
            lv_lobby_player_has_team[lv_player] = true;
        }
        if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_lobby_team)) >= 1)) {
            lv_max_team_size = MaxI(lv_max_team_size, lv_lobby_team_size[lv_lobby_current_team]);
            lv_min_team_size = MinI(lv_min_team_size, lv_lobby_team_size[lv_lobby_current_team]);
            lv_lobby_current_team += 1;
        }

    }
    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 2) && (lv_lobby_current_team == 3))) {
        lv_mode = "0004";
    }

    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0006") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 3) && (lv_lobby_current_team == 5))) {
        lv_mode = "0006";
    }

    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 5))) {
        lv_mode = "0003";
    }

    if (((lv_mode == "0002") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 2) && (lv_lobby_current_team == 3))) {
        lv_mode = "0004";
    }

    if (((lv_mode == "0002") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0004") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0003") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if ((lv_mode == "0006")) {
        gv_game_mode_string = "3v3v3v3";
        gv_num_teams = 4;
        gv_players_per_team = 3;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[1][2] = 8;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[2][2] = 9;
        lv_team_placement[3][0] = 4;
        lv_team_placement[3][1] = 5;
        lv_team_placement[3][2] = 10;
        lv_team_placement[4][0] = 6;
        lv_team_placement[4][1] = 7;
        lv_team_placement[4][2] = 11;
    }
    else if ((lv_mode == "0001")) {
        gv_game_mode_string = "2v2v2v2";
        gv_num_teams = 4;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[3][0] = 4;
        lv_team_placement[3][1] = 5;
        lv_team_placement[4][0] = 6;
        lv_team_placement[4][1] = 7;
    }
    else if ((lv_mode == "0002")) {
        gv_game_mode_string = "4v4";
        gv_num_teams = 2;
        gv_players_per_team = 4;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[1][2] = 4;
        lv_team_placement[1][3] = 5;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[2][2] = 6;
        lv_team_placement[2][3] = 7;
        if ((GameAttributeGameValue("23") == "0002")) {
            lv_team_placement[1][0] = 4;
            lv_team_placement[1][1] = 5;
            lv_team_placement[1][2] = 2;
            lv_team_placement[1][3] = 3;
            lv_team_placement[2][0] = 0;
            lv_team_placement[2][1] = 1;
            lv_team_placement[2][2] = 6;
            lv_team_placement[2][3] = 7;
        }

        if ((GameAttributeGameValue("23") == "0003")) {
            lv_team_placement[1][0] = 0;
            lv_team_placement[1][1] = 1;
            lv_team_placement[1][2] = 2;
            lv_team_placement[1][3] = 3;
            lv_team_placement[2][0] = 4;
            lv_team_placement[2][1] = 5;
            lv_team_placement[2][2] = 6;
            lv_team_placement[2][3] = 7;
        }

    }
    else if ((lv_mode == "0003")) {
        gv_game_mode_string = "1v1v1v1";
        gv_num_teams = 4;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 0;
        lv_team_placement[2][0] = 2;
        lv_team_placement[3][0] = 4;
        lv_team_placement[4][0] = 6;
    }
    else if ((lv_mode == "0004")) {
        gv_game_mode_string = "2v2";
        gv_num_teams = 2;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 4;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 6;
        if ((GameAttributeGameValue("23") == "0002")) {
            lv_team_placement[1][0] = 0;
            lv_team_placement[1][1] = 6;
            lv_team_placement[2][0] = 2;
            lv_team_placement[2][1] = 4;
        }

        if ((GameAttributeGameValue("23") == "0003")) {
            lv_team_placement[1][0] = 0;
            lv_team_placement[1][1] = 2;
            lv_team_placement[2][0] = 4;
            lv_team_placement[2][1] = 6;
        }

        if ((GameAttributeGameValue("23") == "0004")) {
            lv_team_placement[1][0] = 0;
            lv_team_placement[1][1] = 1;
            lv_team_placement[2][0] = 2;
            lv_team_placement[2][1] = 7;
        }

    }
    else if ((lv_mode == "0005")) {
        gv_game_mode_string = "1v1";
        gv_num_teams = 2;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 1;
        lv_team_placement[2][0] = 2;
    }
    if ((lv_mode != GameAttributeGameValue("1"))) {
        gf_GameMessage((StringExternal("Param/Value/4A211734") + StringToText(gv_game_mode_string)), PlayerGroupAll());
        gv_mode_downgraded = true;
    }

    autoE286ED9A_ae = gv_num_teams;
    lv_team = 1;
    for ( ; ( (autoE286ED9A_ai >= 0 && lv_team <= autoE286ED9A_ae) || (autoE286ED9A_ai < 0 && lv_team >= autoE286ED9A_ae) ) ; lv_team += autoE286ED9A_ai ) {
        if ((GameAttributeGameValue("16") == "0001")) {
            while ((lv_lobby_team_size[lv_team] < gv_players_per_team)) {
                lv_player = 1;
                for ( ; ( (autoCD8200B8_ai >= 0 && lv_player <= autoCD8200B8_ae) || (autoCD8200B8_ai < 0 && lv_player >= autoCD8200B8_ae) ) ; lv_player += autoCD8200B8_ai ) {
                    if (((gv_player_is_observer[lv_player] != true) && (lv_lobby_player_has_team[lv_player] == false))) {
                        lv_lobby_teams[lv_team][lv_lobby_team_size[lv_team]] = lv_player;
                        lv_lobby_team_size[lv_team] = (lv_lobby_team_size[lv_team] + 1);
                        lv_lobby_player_has_team[lv_player] = true;
                        break;
                    }

                }
            }
        }
        else {
            if ((lv_lobby_team_size[lv_team] < gv_players_per_team)) {
                gv_game_inbalanced = true;
            }

        }
    }
    if ((GameAttributeGameValue("3") == "0001")) {
        lv_loop = 1;
        for ( ; ( (auto70BD7D8D_ai >= 0 && lv_loop <= auto70BD7D8D_ae) || (auto70BD7D8D_ai < 0 && lv_loop >= auto70BD7D8D_ae) ) ; lv_loop += auto70BD7D8D_ai ) {
            lv_team1 = RandomInt(1, gv_num_teams);
            lv_team2 = RandomInt(1, gv_num_teams);
            lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team1] - 1));
            lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team2] - 1));
            if (((lv_lobby_teams[lv_team1][lv_team_index] > 0) && (lv_lobby_teams[lv_team2][lv_team_index2] > 0))) {
                lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index2];
                lv_lobby_teams[lv_team2][lv_team_index2] = lv_swap_player;
            }

        }
    }
    else {
        if ((GameAttributeGameValue("2") != "0002")) {
            lv_loop = 1;
            for ( ; ( (autoEB2318FC_ai >= 0 && lv_loop <= autoEB2318FC_ae) || (autoEB2318FC_ai < 0 && lv_loop >= autoEB2318FC_ae) ) ; lv_loop += autoEB2318FC_ai ) {
                lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_swap_player = lv_lobby_teams[lv_team][lv_team_index];
                lv_lobby_teams[lv_team][lv_team_index] = lv_lobby_teams[lv_team][lv_team_index2];
                lv_lobby_teams[lv_team][lv_team_index2] = lv_swap_player;
            }
        }

        if ((GameAttributeGameValue("2") == "0001")) {
            lv_loop = 1;
            for ( ; ( (auto9C6A9D8F_ai >= 0 && lv_loop <= auto9C6A9D8F_ae) || (auto9C6A9D8F_ai < 0 && lv_loop >= auto9C6A9D8F_ae) ) ; lv_loop += auto9C6A9D8F_ai ) {
                lv_team1 = RandomInt(1, gv_num_teams);
                lv_team2 = RandomInt(1, gv_num_teams);
                lv_team_index = 0;
                for ( ; ( (auto2C5951D7_ai >= 0 && lv_team_index <= auto2C5951D7_ae) || (auto2C5951D7_ai < 0 && lv_team_index >= auto2C5951D7_ae) ) ; lv_team_index += auto2C5951D7_ai ) {
                    lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                    lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index];
                    lv_lobby_teams[lv_team2][lv_team_index] = lv_swap_player;
                }
            }
        }

    }
    auto52884C1E_ae = gv_num_teams;
    lv_team = 0;
    for ( ; ( (auto52884C1E_ai >= 0 && lv_team <= auto52884C1E_ae) || (auto52884C1E_ai < 0 && lv_team >= auto52884C1E_ae) ) ; lv_team += auto52884C1E_ai ) {
        lv_current_slot = 0;
        auto947EBC81_ae = (lv_lobby_team_size[lv_team] - 1);
        lv_team_index = 0;
        for ( ; ( (auto947EBC81_ai >= 0 && lv_team_index <= auto947EBC81_ae) || (auto947EBC81_ai < 0 && lv_team_index >= auto947EBC81_ae) ) ; lv_team_index += auto947EBC81_ai ) {
            lv_player = lv_lobby_teams[lv_team][lv_team_index];
            if (((lv_lobby_player_has_team[lv_player] == true))) {
                lv_position = lv_team_placement[lv_team][lv_current_slot];
                gv_position_players[lv_position] = lv_player;
                gv_player_positions[lv_player] = lv_position;
                lv_current_slot = (lv_current_slot + 1);
                gv_player_team[lv_player] = (lv_team - 1);
                libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(lv_player), gv_teams[gv_player_team[lv_player]]);
                PlayerGroupAdd(lv_teams[gv_player_team[lv_player]], lv_player);
                PlayerGroupAdd(gv_teams_and_observers[gv_player_team[lv_player]], lv_player);
            }

        }
    }
    autoDA4A409A_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDA4A409A_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_is_observer[lv_player] == false) && (lv_lobby_player_has_team[lv_player] == true))) {
            PlayerGroupAdd(gv_all_players_and_observers, lv_player);
            PlayerGroupAdd(gv_all_players, lv_player);
        }

    }
    lv_player = 0;
    for ( ; ( (autoD84268BD_ai >= 0 && lv_player <= autoD84268BD_ae) || (autoD84268BD_ai < 0 && lv_player >= autoD84268BD_ae) ) ; lv_player += autoD84268BD_ai ) {
        if (((gv_player_is_observer[lv_player] == false) && (PlayerType(lv_player) != c_playerTypeNeutral) && (PlayerType(lv_player) != c_playerTypeHostile) && (lv_lobby_player_has_team[lv_player] == true))) {
            lv_player2 = 0;
            for ( ; ( (autoAD41E70C_ai >= 0 && lv_player2 <= autoAD41E70C_ae) || (autoAD41E70C_ai < 0 && lv_player2 >= autoAD41E70C_ae) ) ; lv_player2 += autoAD41E70C_ai ) {
                if (((gv_player_is_observer[lv_player2] == false) && (PlayerType(lv_player2) != c_playerTypeNeutral) && (PlayerType(lv_player2) != c_playerTypeHostile) && (lv_lobby_player_has_team[lv_player] == true) && (lv_player2 != lv_player))) {
                    if (((gv_player_team[lv_player] == gv_player_team[lv_player2]))) {
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Ally);
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, true);
                        PlayerSetAlliance(lv_player2, c_allianceIdVision, lv_player, true);
                        PlayerSetAlliance(lv_player, c_allianceIdPushable, lv_player2, true);
                        PlayerSetAlliance(lv_player2, c_allianceIdPushable, lv_player, true);
                    }
                    else {
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, false);
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
            }
        }
    }
}

void gf_AssignPlayerColors () {
    int init_i;

    // Variable Declarations
    int lv_assigned;
    int lv_i1;
    int lv_i2;
    int lv_swap;
    string lv_swap_name;
    int lv_loop;
    int[13] lv_color_list;
    string[13] lv_color_name_list;
    bool[13] lv_color_taken;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoE9C4A8AA_g;
    playergroup auto976A0773_g;
    const int auto7DD74CA5_ae = 25;
    const int auto7DD74CA5_ai = 1;
    playergroup auto71C86433_g;

    // Variable Initialization
    lv_swap = 1;
    lv_swap_name = "";
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_color_list[init_i] = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_color_name_list[init_i] = "";
    }

    // Implementation
    autoE9C4A8AA_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE9C4A8AA_g, lv_player);
        if (lv_player < 0) { break; }
        gv_player_colors[lv_player] = PlayerGetColorIndex(lv_player, false);
        gv_player_names[lv_player] = PlayerName(lv_player);
        gv_player_names_colored[lv_player] = TextWithColor(gv_player_names[lv_player], libNtve_gf_ConvertPlayerColorToColor(gv_player_colors[lv_player]));
    }
    auto976A0773_g = gv_all_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto976A0773_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, 0, true);
        gv_player_colors[lv_player] = PlayerGetColorIndex(lv_player, false);
        gv_player_names[lv_player] = PlayerName(lv_player);
        gv_player_names_colored[lv_player] = TextWithColor(gv_player_names[lv_player], libNtve_gf_ConvertPlayerColorToColor(gv_player_colors[lv_player]));
    }
    if ((gv_anonymous_mode == false)) {
        return ;
    }

    lv_color_list[0] = 1;
    lv_color_name_list[0] = "Red";
    lv_color_list[1] = 2;
    lv_color_name_list[1] = "Blue";
    lv_color_list[2] = 4;
    lv_color_name_list[2] = "Purple";
    lv_color_list[3] = 3;
    lv_color_name_list[3] = "Teal";
    lv_color_list[4] = 6;
    lv_color_name_list[4] = "Orange";
    lv_color_list[5] = 7;
    lv_color_name_list[5] = "Green";
    lv_color_list[6] = 8;
    lv_color_name_list[6] = "Light Pink";
    lv_color_list[7] = 12;
    lv_color_name_list[7] = "Brown";
    lv_color_list[8] = 15;
    lv_color_name_list[8] = "Pink";
    lv_color_list[9] = 13;
    lv_color_name_list[9] = "Light Green";
    lv_color_list[10] = 11;
    lv_color_name_list[10] = "Dark Green";
    lv_color_list[11] = 9;
    lv_color_name_list[11] = "Violet";
    lv_loop = 1;
    for ( ; ( (auto7DD74CA5_ai >= 0 && lv_loop <= auto7DD74CA5_ae) || (auto7DD74CA5_ai < 0 && lv_loop >= auto7DD74CA5_ae) ) ; lv_loop += auto7DD74CA5_ai ) {
        lv_i1 = RandomInt(0, 9);
        lv_i2 = RandomInt(0, 9);
        lv_swap = lv_color_list[lv_i1];
        lv_swap_name = lv_color_name_list[lv_i1];
        lv_color_list[lv_i1] = lv_color_list[lv_i2];
        lv_color_name_list[lv_i1] = lv_color_name_list[lv_i2];
        lv_color_list[lv_i2] = lv_swap;
        lv_color_name_list[lv_i2] = lv_swap_name;
    }
    auto71C86433_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto71C86433_g, lv_player);
        if (lv_player < 0) { break; }
        gv_player_colors[lv_player] = lv_color_list[lv_assigned];
        gv_player_names[lv_player] = StringToText(lv_color_name_list[lv_assigned]);
        gv_player_names_colored[lv_player] = TextWithColor(gv_player_names[lv_player], libNtve_gf_ConvertPlayerColorToColor(gv_player_colors[lv_player]));
        lv_assigned += 1;
        PlayerSetState(lv_player, c_playerStateShowWorldTip, false);
        PlayerSetColorIndex(lv_player, gv_player_colors[lv_player], true);
    }
}

void gf_SpawnPlayers () {
    // Variable Declarations
    bool lv_spawn_extra_bunk;
    int lv_player_race;
    unit lv_unit;
    int lv_player;
    int lv_position;

    // Automatic Variable Declarations
    playergroup autoF3930426_g;

    // Variable Initialization

    // Implementation
    lv_spawn_extra_bunk = ((GameAttributeGameValue("10") == "0001") && (PlayerGroupCount(gv_all_players) <= 4));
    autoF3930426_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF3930426_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "UpgradeLimit", gv_max_upgrades);
        PlayerModifyPropertyInt(lv_player, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 500);
        gv_total_resource_granted = gv_starting_minerals;
        PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_starting_minerals);
        lv_position = gv_player_positions[lv_player];
        gv_player_lanes[lv_player] = gv_position_players[gv_position_lanes[lv_position]];
        lv_player_race = gv_player_race_index[lv_player];
        gv_player_spawn_offsets[lv_player][0] = gv_position_spawn_offsets[lv_position][0];
        gv_player_spawn_offsets[lv_player][1] = gv_position_spawn_offsets[lv_position][1];
        gv_player_alive[lv_player] = true;
        gv_team_alive[gv_player_team[lv_player]] = true;
        VisRevealArea(gv_position_players[lv_position], RegionEntireMap(), 0.1, false);
        UnitCreate(1, gv_race_nuke_facility_types[lv_player_race], c_unitCreateIgnorePlacement, lv_player, gv_nuke_silo_positions[lv_position], 270.0);
        gv_nuke_silos[lv_player] = UnitLastCreated();
        UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
        gv_ghost_academies[lv_player] = UnitLastCreated();
        UnitCreate(1, gv_race_research_facility_types[lv_player_race], c_unitCreateIgnorePlacement, lv_player, gv_engineering_bay_positions[lv_position], 270.0);
        gv_research_facilities[lv_player] = UnitLastCreated();
        UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
        CameraPan(lv_player, gv_initial_bunker_positions[lv_position], 0.01, -1, 10.0, false);
        gf_SpawnInitialBunk(lv_player, lv_position, lv_player_race);
        if ((lv_spawn_extra_bunk == true)) {
            gv_position_players[gv_extra_bunk_position[lv_position]] = lv_player;
            gf_SpawnInitialBunk(lv_player, gv_extra_bunk_position[lv_position], lv_player_race);
        }
        gv_initial_bunkers[lv_player] = lv_unit;
        UnitCreate(1, gv_race_worker_types[lv_player_race], 0, lv_player, PointWithOffset(gv_initial_bunker_positions[lv_position], (-4.0 * gv_position_spawn_offsets[lv_position][0]), (-4.0 * gv_position_spawn_offsets[lv_position][1])), 270.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        lv_unit = UnitLastCreated();
        gf_OnScvCreated(lv_unit);
        gv_total_structure_granted_value[lv_player] += 3000;
        gv_total_structure_granted_value[lv_player] += 4500;
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
        libHots_gf_StoreActorForUnit(UnitLastCreated(), 1, libNtve_gf_ActorLastCreated());
        UnitCreate(1, "LargeInvisiblePylon", 0, lv_player, gv_pylon_positions_large_1[lv_position], 270.0);
        UnitGroupAdd(gv_player_pylons[lv_player], UnitLastCreated());
        UnitCreate(1, "LargeInvisiblePylon", 0, lv_player, gv_pylon_positions_large_2[lv_position], 270.0);
        UnitGroupAdd(gv_player_pylons[lv_player], UnitLastCreated());
        UnitCreate(1, "LargeInvisiblePylon", 0, lv_player, gv_pylon_positions_large_3[lv_position], 270.0);
        UnitGroupAdd(gv_player_pylons[lv_player], UnitLastCreated());
        UnitCreate(1, "SmallInvisiblePylon", 0, lv_player, gv_pylon_positions_small_1[lv_position], 270.0);
        UnitGroupAdd(gv_player_pylons[lv_player], UnitLastCreated());
    }
}

void gf_SpectatorInit () {
    // Variable Declarations
    int lv_zoom_dialog;
    int lv_possible_spectator;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    const int auto8DC16B56_ae = 3;
    const int auto8DC16B56_ai = 1;
    const int auto54EBEAF6_ae = 15;
    const int auto54EBEAF6_ai = 1;
    const int auto285C103B_ae = 3;
    const int auto285C103B_ai = 1;
    playergroup autoF6CB2BFD_g;

    // Variable Initialization
    lv_zoom_dialog = c_invalidDialogControlId;

    // Implementation
    PlayerSetColorIndex(0, 0, true);
    UISetResourceVisible(PlayerGroupSingle(0), c_resourceTypeMinerals, false);
    PlayerGroupAdd(gv_all_players_and_observers, 0);
    PlayerGroupAdd(gv_all_observers, 0);
    lv_team = 0;
    for ( ; ( (auto8DC16B56_ai >= 0 && lv_team <= auto8DC16B56_ae) || (auto8DC16B56_ai < 0 && lv_team >= auto8DC16B56_ae) ) ; lv_team += auto8DC16B56_ai ) {
        PlayerGroupAdd(gv_teams_and_observers[lv_team], 0);
        lv_possible_spectator = 1;
        for ( ; ( (auto54EBEAF6_ai >= 0 && lv_possible_spectator <= auto54EBEAF6_ae) || (auto54EBEAF6_ai < 0 && lv_possible_spectator >= auto54EBEAF6_ae) ) ; lv_possible_spectator += auto54EBEAF6_ai ) {
            if (((gv_player_is_observer[lv_possible_spectator] == true) && (PlayerType(lv_possible_spectator) == c_playerTypeUser))) {
                PlayerGroupAdd(gv_all_players_and_observers, lv_possible_spectator);
                PlayerGroupAdd(gv_all_observers, lv_possible_spectator);
                gf_SpectatorUI(lv_possible_spectator);
                gf_SpectatorZoom(lv_possible_spectator, 3, true);
                lv_team = 0;
                for ( ; ( (auto285C103B_ai >= 0 && lv_team <= auto285C103B_ae) || (auto285C103B_ai < 0 && lv_team >= auto285C103B_ae) ) ; lv_team += auto285C103B_ai ) {
                    PlayerGroupAdd(gv_teams_and_observers[lv_team], lv_possible_spectator);
                }
                autoF6CB2BFD_g = PlayerGroupAll();
                lv_player = -1;
                while (true) {
                    lv_player = PlayerGroupNextPlayer(autoF6CB2BFD_g, lv_player);
                    if (lv_player < 0) { break; }
                    if ((lv_player != lv_possible_spectator)) {
                        libNtve_gf_SetAllianceOneWay(lv_player, lv_possible_spectator, libNtve_ge_AllianceSetting_Ally);
                    }

                }
            }

        }
    }
    gf_SpectatorUI(0);
    CameraSetData(gv_all_observers, "Dflt3");
    DialogCreate(300, 110, c_anchorBottomLeft, 180, 235, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ZoneZoom/ZoomButtons");
    lv_zoom_dialog = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), gv_all_observers, c_anchorTopLeft, 0, 50);
    DialogControlHookup(lv_zoom_dialog, c_triggerControlTypeButton, "Zoom1");
    gv_zoom_buttons[0] = DialogControlLastCreated();
    DialogControlHookup(lv_zoom_dialog, c_triggerControlTypeButton, "Zoom2");
    gv_zoom_buttons[1] = DialogControlLastCreated();
    DialogControlHookup(lv_zoom_dialog, c_triggerControlTypeButton, "Zoom3");
    gv_zoom_buttons[2] = DialogControlLastCreated();
    UISetMiniMapBounds(gv_all_observers, RegionFromId(2));
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    DialogControlSetPosition(DialogControlLastCreated(), gv_all_observers, c_anchorBottom, 0, 0);
}

void gf_SpawnPlayers2 () {
    // Variable Declarations
    bool lv_spawn_extra_bunk;
    int lv_player_race;
    unit lv_unit;
    int lv_player;
    int lv_position;

    // Automatic Variable Declarations
    playergroup autoCE60FD86_g;

    // Variable Initialization

    // Implementation
    autoCE60FD86_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCE60FD86_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            gv_player_handles[lv_player] = PlayerHandle(lv_player);
            if ((gv_player_handles[lv_player] == null)) {
                gv_player_handles[lv_player] = "";
            }

        }

    }
}

void gf_SpectatorZoom (int lp_player, int lp_level, bool lp_also_center) {
    // Variable Declarations
    point lv_position;
    fixed lv_zoom_adjust;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_also_center == true)) {
        lv_position = UnitGetPosition(UnitFromId(2058176399));
    }
    else {
        lv_position = CameraGetTarget(lp_player);
    }
    if ((lp_level == 1)) {
        lv_zoom_adjust = 30.0;
    }

    if ((lp_level == 2)) {
        lv_zoom_adjust = 65.0;
    }

    if ((lp_level == 3)) {
        lv_zoom_adjust = 85.0;
    }

    libNtve_gf_SwooshCamera(lp_player, (CameraGetDistance(lp_player) + 0.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + lv_zoom_adjust), lv_position, 1.5);
}

void gf_SpectatorUI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeCommandPanel, false);
    PlayerSetColorIndex(lp_player, 0, true);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/ColorButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    VisRevealArea(lp_player, RegionEntireMap(), 0.0, false);
    PlayerOptionOverride(lp_player, "controlgroupmode", "3");
    PlayerOptionOverride(lp_player, "selectuncontrolable", "1");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TeamResourceButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/Minimap");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(lp_player), c_anchorBottomLeft, 0, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MissionTimePanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(lp_player), c_anchorBottomLeft, 5, 265);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel");
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 512, PlayerGroupSingle(lp_player));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(lp_player), c_anchorBottomRight, 0, 0);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel/UnitWireframe");
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 9999, PlayerGroupSingle(lp_player));
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeTeamResourceButton, false);
}

void gf_SpawnInitialBunk (int lp_player, int lp_position, int lp_player_race) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, gv_race_spawner_types[lp_player_race][0], c_unitCreateIgnorePlacement, lp_player, gv_initial_bunker_positions[lp_position], 270.0);
    gv_player_bunker_counts[lp_player] += 1;
    lv_unit = UnitLastCreated();
    gf_OnBunkerCreated3(lp_player, lv_unit, true);
    gf_OnBunkerCreated(lp_player, lv_unit);
    gf_GrantStructure(lp_player, lv_unit);
}

void gf_GrantStructure (int lp_player, unit lp_structure) {
    // Automatic Variable Declarations
    // Implementation
    gv_total_structure_granted_value[lp_player] += UnitTypeGetCost(UnitGetType(lp_structure), c_unitCostMinerals);
}

void gf_ScanOpponentUpsFn (int lp_player) {
    // Variable Declarations
    bool[17] lv_team_unit_visible;
    int lv_unit_team;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC580E08D_g;
    int autoC580E08D_u;
    const int auto90D4E6D7_ae = 15;
    const int auto90D4E6D7_ai = 1;

    // Variable Initialization

    // Implementation
    autoC580E08D_g = UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC580E08D_u = UnitGroupCount(autoC580E08D_g, c_unitCountAll);
    for (;; autoC580E08D_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC580E08D_g, autoC580E08D_u);
        if (lv_unit == null) { break; }
        lv_unit_team = UnitGetOwner(lv_unit);
        if ((lv_team_unit_visible[lv_unit_team] == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_unit, lp_player) == true)) {
            lv_team_unit_visible[lv_unit_team] = true;
        }

    }
    lv_unit_team = 1;
    for ( ; ( (auto90D4E6D7_ai >= 0 && lv_unit_team <= auto90D4E6D7_ae) || (auto90D4E6D7_ai < 0 && lv_unit_team >= auto90D4E6D7_ae) ) ; lv_unit_team += auto90D4E6D7_ai ) {
        if ((lv_team_unit_visible[lv_unit_team] == true)) {
            gf_DisplayChatMessage(TextWithColor((IntToText(gv_team_info_player_armor_level[lv_unit_team]) + StringExternal("Param/Value/B9A2623E") + IntToText(gv_team_info_player_attack_level[lv_unit_team]) + StringExternal("Param/Value/DE677AC0") + IntToText(gv_team_info_player_range_level[lv_unit_team]) + StringExternal("Param/Value/DDF332AE") + IntToText(gv_team_info_player_regen_level[lv_unit_team]) + StringExternal("Param/Value/69C83475") + IntToText(gv_team_info_player_speed_level[lv_unit_team])), libNtve_gf_ConvertPlayerColorToColor(gv_player_colors[lv_unit_team])), PlayerGroupSingle(lp_player), 0);
        }

    }
}

void gf_DebugCommand (int lp_player) {
    // Variable Declarations
    bool[17] lv_team_unit_visible;
    int lv_unit_team;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_GameMessage((StringExternal("Param/Value/9CCD38A4") + libNtve_gf_ConvertBooleanToText(gv_full_game) + StringExternal("Param/Value/13A42130") + libNtve_gf_ConvertBooleanToText((GameAttributeGameValue("3") == "0001"))), PlayerGroupActive());
}

void gf_InitGameTime () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_game_timer, 50000.0, false, c_timeGame);
    TimerStart(gv_real_timer, 50000.0, false, c_timeReal);
    if ((GameAttributeGameValue("18") == "0002")) {
        gv_game_duration = 60;
    }

    if ((GameAttributeGameValue("18") == "0004")) {
        gv_game_duration = 75;
    }

    if ((GameAttributeGameValue("18") == "0003")) {
        gv_game_duration = 90;
    }

    if ((GameAttributeGameValue("18") == "0001")) {
        gv_game_duration = 0;
        return ;
    }

    gf_OneshotRealTime(10.0, gt_GameTimeRemaining);
    gf_OneshotRealTime(60.0, gt_GameTimeRemaining);
    gf_OneshotRealTime(((gv_game_duration * 60) - 60), gt_GameTimeRemaining);
    gf_OneshotRealTime(((gv_game_duration * 60) - 300), gt_GameTimeRemaining);
    gf_OneshotRealTime(((gv_game_duration * 60) - 900), gt_GameTimeRemaining);
    gf_OneshotRealTime(((gv_game_duration * 60) - 1800), gt_GameTimeRemaining);
}

void gf_TMFogCommand (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("8") == "0001")) {
    }
    else {
        gf_GameMessage(StringExternal("Param/Value/E752B8EC"), PlayerGroupSingle(lp_palyer));
        return ;
    }
    gv_fog_of_war = !(gv_fog_of_war);
    gf_ApplyFogOfWar();
}

void gf_TMResetCommand (int lp_player) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto91C944CC_g;
    unitgroup auto9E186194_g;
    int auto9E186194_u;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("8") == "0001")) {
    }
    else {
        gf_GameMessage(StringExternal("Param/Value/6EF9EAEA"), PlayerGroupSingle(lp_player));
        return ;
    }
    auto91C944CC_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto91C944CC_g, lv_player);
        if (lv_player < 0) { break; }
        gv_resetting_game = true;
        gf_ResetUpgrades();
        auto9E186194_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9E186194_u = UnitGroupCount(auto9E186194_g, c_unitCountAll);
        for (;; auto9E186194_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto9E186194_g, auto9E186194_u);
            if (lv_unit == null) { break; }
            UnitKill(lv_unit);
        }
        gv_resetting_game = false;
    }
}

void gf_TMResetUpgradesCommand (int lp_player) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("8") == "0001")) {
    }
    else {
        gf_GameMessage(StringExternal("Param/Value/3397408D"), PlayerGroupSingle(lp_player));
        return ;
    }
    gf_ResetUpgrades();
}

void gf_ResetUpgrades () {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC8B7CC3F_g;
    const int auto1ABD0225_ae = 7;
    const int auto1ABD0225_ai = 1;

    // Variable Initialization

    // Implementation
    autoC8B7CC3F_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC8B7CC3F_g, lv_player);
        if (lv_player < 0) { break; }
        lv_index = 0;
        for ( ; ( (auto1ABD0225_ai >= 0 && lv_index <= auto1ABD0225_ae) || (auto1ABD0225_ai < 0 && lv_index >= auto1ABD0225_ae) ) ; lv_index += auto1ABD0225_ai ) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_player, gv_race_teaminfo_upgrades[gv_player_race_index[lv_player]][lv_index], 0);
        }
    }
}

void gf_LoadGameSettings () {
    // Variable Declarations
    string lv_starting_minerals_attribute;
    string lv_cease_fire_duration_attribute;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_fog_of_war = (GameAttributeGameValue("13") == "0001");
    lv_starting_minerals_attribute = GameAttributeGameValue("14");
    if ((lv_starting_minerals_attribute == "0001")) {
        gv_starting_minerals = 50;
    }

    if ((lv_starting_minerals_attribute == "0002")) {
        gv_starting_minerals = 1000;
    }

    if ((lv_starting_minerals_attribute == "0003")) {
        gv_starting_minerals = 5000;
    }

    if ((lv_starting_minerals_attribute == "0004")) {
        gv_starting_minerals = 10000;
    }

    if ((lv_starting_minerals_attribute == "0005")) {
        gv_starting_minerals = 25000;
    }

    if ((lv_starting_minerals_attribute == "0006")) {
        gv_starting_minerals = 50000;
    }

    if ((lv_starting_minerals_attribute == "0007")) {
        gv_starting_minerals = 100000;
    }

    lv_cease_fire_duration_attribute = GameAttributeGameValue("15");
    if ((lv_cease_fire_duration_attribute == "0001")) {
        gv_cease_fire_duration = 0;
    }

    if ((lv_cease_fire_duration_attribute == "0002")) {
        gv_cease_fire_duration = 60;
    }

    if ((lv_cease_fire_duration_attribute == "0003")) {
        gv_cease_fire_duration = 120;
    }

    if ((lv_cease_fire_duration_attribute == "0004")) {
        gv_cease_fire_duration = 180;
    }

}

void gf_ApplyTrainingMode () {
    // Automatic Variable Declarations
    // Implementation
    gf_ApplyFogOfWar();
    if ((GameAttributeGameValue("15") != "0001")) {
        gf_StartCeaseFire();
    }

}

void gf_StartCeaseFire () {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto5E4AA486_g;
    unitgroup auto4519CE5C_g;
    int auto4519CE5C_u;
    unitgroup auto748FE99A_g;
    int auto748FE99A_u;

    // Variable Initialization

    // Implementation
    gv_cease_fire_timer = TimerCreate();
    TriggerAddEventTimer(gt_CeaseFireOver, gv_cease_fire_timer);
    TimerStart(gv_cease_fire_timer, gv_cease_fire_duration, false, c_timeReal);
    gv_boosted_production = true;
    auto5E4AA486_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5E4AA486_g, lv_player);
        if (lv_player < 0) { break; }
        auto4519CE5C_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4519CE5C_u = UnitGroupCount(auto4519CE5C_g, c_unitCountAll);
        for (;; auto4519CE5C_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto4519CE5C_g, auto4519CE5C_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAddPlayer(lv_unit, "ChronoBoostEnergyCost", 1, 1);
        }
        auto748FE99A_g = UnitGroup(gv_race_worker_types[gv_player_race_index[lv_player]], lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto748FE99A_u = UnitGroupCount(auto748FE99A_g, c_unitCountAll);
        for (;; auto748FE99A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto748FE99A_g, auto748FE99A_u);
            if (lv_unit == null) { break; }
            UnitBehaviorAddPlayer(lv_unit, "ChronoBoostEnergyCost", 1, 1);
        }
    }
}

void gf_EndCeaseFire () {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto0C13BEDC_g;
    unitgroup auto65D0980E_g;
    int auto65D0980E_u;

    // Variable Initialization

    // Implementation
    auto0C13BEDC_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0C13BEDC_g, lv_player);
        if (lv_player < 0) { break; }
        auto65D0980E_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto65D0980E_u = UnitGroupCount(auto65D0980E_g, c_unitCountAll);
        for (;; auto65D0980E_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto65D0980E_g, auto65D0980E_u);
            if (lv_unit == null) { break; }
            UnitBehaviorRemove(lv_unit, "ChronoBoostEnergyCost", 1);
        }
    }
    gv_cease_fire_timer = null;
    gv_boosted_production = false;
}

void gf_ApplyFogOfWar () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoAE599F5B_g;
    playergroup auto6B702932_g;

    // Variable Initialization

    // Implementation
    if ((gv_fog_of_war == true)) {
        autoAE599F5B_g = gv_all_players;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoAE599F5B_g, lv_player);
            if (lv_player < 0) { break; }
            if ((gv_fog_of_war_revealers[lv_player] != null)) {
                VisRevealerDestroy(gv_fog_of_war_revealers[lv_player]);
                gv_fog_of_war_revealers[lv_player] = null;
            }

        }
    }
    else {
        auto6B702932_g = gv_all_players;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto6B702932_g, lv_player);
            if (lv_player < 0) { break; }
            VisRevealerCreate(lv_player, RegionEntireMap());
            gv_fog_of_war_revealers[lv_player] = VisRevealerLastCreated();
        }
    }
}

void gf_BunkCountCommand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_GameMessage(IntToText(gv_player_bunker_counts[EventPlayer()]), PlayerGroupSingle(lp_player));
    gf_GameMessage(IntToText(gv_player_merc_bunker_counts[EventPlayer()]), PlayerGroupSingle(lp_player));
}

void gf_TryAllowBadBuilds (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_player_race_index[lp_player] == 0) && ((gv_player_games[lp_player] >= 5) || ((BankKeyExists(gv_banks[lp_player], "P", "abb") == true) && (BankValueGetAsFlag(gv_banks[lp_player], "P", "abb") == true))))) {
        UnitIssueOrder(gv_nuke_silos[lp_player], Order(AbilityCommand("EngineeringBayResearch", 15)), c_orderQueueAddToEnd);
    }

}

void gf_EnableTankSlotConstruction (int lp_player) {
    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    unitgroup autoB74A0826_g;
    int autoB74A0826_u;

    // Variable Initialization

    // Implementation
    autoB74A0826_g = gv_player_pylons[lp_player];
    autoB74A0826_u = UnitGroupCount(autoB74A0826_g, c_unitCountAll);
    for (;; autoB74A0826_u -= 1) {
        lv_pylon = UnitGroupUnitFromEnd(autoB74A0826_g, autoB74A0826_u);
        if (lv_pylon == null) { break; }
        UnitRemove(lv_pylon);
    }
    UnitCreate(1, "InvisiblePylon", 0, lp_player, gv_pylon_positions_small_1[gv_player_positions[lp_player]], 270.0);
    gv_player_pylons[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
}

void gf_AllowBadBuildsCommand (int lp_player) {
    // Variable Declarations
    bool lv_bad_builds_allowed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bad_builds_allowed = !(BankValueGetAsFlag(gv_banks[lp_player], "P", "abb"));
    if ((lv_bad_builds_allowed == false)) {
        gf_GameMessage(StringExternal("Param/Value/1F8BB3B8"), PlayerGroupSingle(lp_player));
    }
    else {
        gf_GameMessage(StringExternal("Param/Value/1964AE3D"), PlayerGroupSingle(lp_player));
    }
    BankValueSetFromFlag(gv_banks[lp_player], "P", "abb", lv_bad_builds_allowed);
    gf_SaveBankIfFullGame(lp_player);
    gf_TryAllowBadBuilds(lp_player);
}

void gf_SyncObserverRevealIdentity (playergroup lp_sync_players) {
    // Variable Declarations
    int lv_observer;

    // Automatic Variable Declarations
    playergroup autoAC738BEE_g;

    // Variable Initialization

    // Implementation
    autoAC738BEE_g = lp_sync_players;
    lv_observer = -1;
    while (true) {
        lv_observer = PlayerGroupNextPlayer(autoAC738BEE_g, lv_observer);
        if (lv_observer < 0) { break; }
        gv_observer_reveal_identity[lv_observer] = (gv_periodic_observer_reveal || libNtve_gf_DialogItemIsChecked(gv_observer_reveal_checkbox, lv_observer));
    }
    gf_UpdatePlayerNames(lp_sync_players);
}

void gf_SyncSharedControl (int lp_player) {
    // Variable Declarations
    bool lv_has_control_shared;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    playergroup auto973C1AA8_g;

    // Variable Initialization

    // Implementation
    lv_player = lp_player;
    lv_has_control_shared = libNtve_gf_DialogItemIsChecked(gv_alliance_checkbox, lv_player);
    if ((lv_has_control_shared == false)) {
        gf_GameMessage((TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/CABF479B")), gv_teams[gv_player_team[lv_player]]);
    }
    else {
        gf_GameMessage((TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/59C82D4B")), gv_teams[gv_player_team[lv_player]]);
    }
    auto973C1AA8_g = gv_teams[gv_player_team[lv_player]];
    lv_ally = -1;
    while (true) {
        lv_ally = PlayerGroupNextPlayer(auto973C1AA8_g, lv_ally);
        if (lv_ally < 0) { break; }
        if ((lv_player != lv_ally)) {
            if ((lv_has_control_shared == false)) {
                PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, false);
            }
            else {
                PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, true);
            }
        }

    }
}

void gf_AddControlButton () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(75, 80, c_anchorTopRight, 5, 0, true);
    DialogSetVisible(DialogLastCreated(), gv_all_players_and_observers, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorTopRight, 0, 35, StringExternal("Param/Value/76DCB49E"), false);
    DialogControlSetVisible(DialogControlLastCreated(), gv_all_observers, false);
    DialogControlSetVisible(DialogControlLastCreated(), gv_all_players, true);
    gv_alliance_checkbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorTopRight, 0, 0, StringExternal("Param/Value/35D57A04"), false);
    DialogControlSetVisible(DialogControlLastCreated(), gv_all_players, false);
    DialogControlSetVisible(DialogControlLastCreated(), gv_all_observers, true);
    gv_observer_reveal_checkbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 36, 36, c_anchorTopLeft, 0, 35, StringExternal("Param/Value/0035E0FF"), StringToText(""), "");
    DialogControlSetPosition(DialogControlLastCreated(), gv_all_observers, c_anchorTopLeft, 0, 0);
    gv_leaderboard_button = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 40, 0);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/Pause");
    gv_pause_button = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/ToggleShareControl");
    gv_toggle_control_button = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/ScanUpsButton");
    gv_scan_ups_button = DialogControlLastCreated();
    UISetFrameVisible(gv_all_players, c_syncFrameTypeTeamResourceButton, true);
    UISetFrameVisible(gv_all_players_and_observers, c_syncFrameTypeAllianceButton, false);
}

void gf_ControlCommand (int lp_command_player) {
    // Variable Declarations
    int lv_player;
    text lv_text;
    int lv_team;

    // Automatic Variable Declarations
    const int auto9195E2F3_ae = 3;
    const int auto9195E2F3_ai = 1;
    playergroup auto13B57C66_g;

    // Variable Initialization

    // Implementation
    if ((gv_player_is_observer[lp_command_player] == true)) {
        gf_GameMessage(StringExternal("Param/Value/13C936EA"), PlayerGroupSingle(lp_command_player));
        lv_team = 0;
        for ( ; ( (auto9195E2F3_ai >= 0 && lv_team <= auto9195E2F3_ae) || (auto9195E2F3_ai < 0 && lv_team >= auto9195E2F3_ae) ) ; lv_team += auto9195E2F3_ai ) {
            lv_text = (gv_team_short_names[lv_team] + StringExternal("Param/Value/CB32798C"));
            auto13B57C66_g = gv_teams[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(auto13B57C66_g, lv_player);
                if (lv_player < 0) { break; }
                if ((libNtve_gf_DialogItemIsChecked(gv_alliance_checkbox, lv_player) == true)) {
                    lv_text = (lv_text + gv_player_names_colored[lv_player] + StringExternal("Param/Value/D45AC080"));
                }

            }
            gf_GameMessage(lv_text, PlayerGroupSingle(lp_command_player));
        }
    }
    else {
        if ((libNtve_gf_DialogItemIsChecked(gv_alliance_checkbox, lp_command_player) == true)) {
            libNtve_gf_SetDialogItemChecked(gv_alliance_checkbox, false, PlayerGroupSingle(lp_command_player));
        }
        else {
            libNtve_gf_SetDialogItemChecked(gv_alliance_checkbox, true, PlayerGroupSingle(lp_command_player));
        }
    }
}

void gf_RevealCommand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player_is_observer[lp_player] == false)) {
        return ;
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_observer_reveal_checkbox, lp_player) == true)) {
        libNtve_gf_SetDialogItemChecked(gv_observer_reveal_checkbox, false, PlayerGroupSingle(lp_player));
    }
    else {
        libNtve_gf_SetDialogItemChecked(gv_observer_reveal_checkbox, true, PlayerGroupSingle(lp_player));
    }
}

void gf_PlayerAfkEnded (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto9C1E4D45_ae = 7;
    const int auto9C1E4D45_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_player_is_afk[lp_player] == true)) {
        gv_player_is_afk[lp_player] = false;
        lv_index = 0;
        for ( ; ( (auto9C1E4D45_ai >= 0 && lv_index <= auto9C1E4D45_ae) || (auto9C1E4D45_ai < 0 && lv_index >= auto9C1E4D45_ae) ) ; lv_index += auto9C1E4D45_ai ) {
            DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lp_player][lv_index], PlayerGroupAll(), false);
        }
    }

}

fixed gf_GetAverageOpponentElo (int lp_palyer) {
    // Variable Declarations
    fixed lv_running_total;
    fixed lv_num_teams;
    int lv_team;

    // Automatic Variable Declarations
    const int autoC86A7EAC_ae = 3;
    const int autoC86A7EAC_ai = 1;

    // Variable Initialization

    // Implementation
    lv_team = 0;
    for ( ; ( (autoC86A7EAC_ai >= 0 && lv_team <= autoC86A7EAC_ae) || (autoC86A7EAC_ai < 0 && lv_team >= autoC86A7EAC_ae) ) ; lv_team += autoC86A7EAC_ai ) {
        if (((PlayerGroupCount(gv_teams[lv_team]) != 0) && (lv_team != gv_player_team[lp_palyer]))) {
            lv_running_total += gv_team_elo_averages[lv_team];
            lv_num_teams += 1.0;
        }

    }
    return (lv_running_total / lv_num_teams);
}

void gf_RecordLastGameResults (int lp_winning_team) {
    // Variable Declarations
    int lv_team;
    int lv_player;
    int lv_bank_player;

    // Automatic Variable Declarations
    playergroup auto1FDC3B8D_g;
    playergroup auto4BD7ABBA_g;

    // Variable Initialization

    // Implementation
    auto1FDC3B8D_g = gv_all_players;
    lv_bank_player = -1;
    while (true) {
        lv_bank_player = PlayerGroupNextPlayer(auto1FDC3B8D_g, lv_bank_player);
        if (lv_bank_player < 0) { break; }
        BankSectionRemove(gv_banks[lv_bank_player], "LastGame");
        BankSectionRemove(gv_banks[lv_bank_player], "LG");
        BankValueSetFromString(gv_banks[lv_bank_player], "LG", "mode", gv_game_mode_string);
        BankValueSetFromInt(gv_banks[lv_bank_player], "LG", "winningteam", lp_winning_team);
        BankValueSetFromInt(gv_banks[lv_bank_player], "LG", "time", CurrentSynchronousGameTimeGet());
        auto4BD7ABBA_g = gv_all_players;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4BD7ABBA_g, lv_player);
            if (lv_player < 0) { break; }
            lv_team = gv_player_team[lv_player];
            BankValueSetFromFixed(gv_banks[lv_bank_player], "LG", ("t" + (IntToString(lv_team) + "perf")), gv_team_final_performance[lv_team]);
            BankValueSetFromFixed(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "elo")), gv_player_current_elo[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "wins")), gv_player_mode_wins[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "games")), gv_player_mode_games[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "team")), gv_player_team[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "position")), gv_player_positions[lv_player]);
            BankValueSetFromString(gv_banks[lv_bank_player], "LG", ("p" + (IntToString(lv_player) + "handle")), gv_player_handles[lv_player]);
        }
    }
}

void gf_SignBank (bank lp_bank) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromString(lp_bank, "Unsigned", "signature", gf_ComputeChecksum(lp_bank));
}

bool gf_VerifyBank (bank lp_bank) {
    // Variable Declarations
    int lv_string;
    int lv_section_number;
    string lv_section_name;
    int lv_key;
    string lv_key_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section_name = "";
    lv_key_name = "";

    // Implementation
    return (BankValueGetAsString(BankLastCreated(), "Unsigned", "signature") == gf_ComputeChecksum(lp_bank));
}

string gf_ComputeChecksum (bank lp_bank) {
    // Variable Declarations
    string lv_attr2;
    string lv_attr;
    int lv_string;
    int lv_section_number;
    string lv_section_name;
    int lv_key;
    string lv_key_name;

    // Automatic Variable Declarations
    int autoADA9B3E7_ae;
    const int autoADA9B3E7_ai = 1;
    int autoD053C6EB_ae;
    const int autoD053C6EB_ai = 1;

    // Variable Initialization
    lv_attr2 = "";
    lv_section_name = "";
    lv_key_name = "";

    // Implementation
    lib1_gf_InitializeHashInput();
    lib1_gf_AddStringToHashInput("nice");
    lv_attr = GameAttributeGameValue("4");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("5");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("6");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("7");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    autoADA9B3E7_ae = (BankSectionCount(lp_bank) - 1);
    lv_section_number = 0;
    for ( ; ( (autoADA9B3E7_ai >= 0 && lv_section_number <= autoADA9B3E7_ae) || (autoADA9B3E7_ai < 0 && lv_section_number >= autoADA9B3E7_ae) ) ; lv_section_number += autoADA9B3E7_ai ) {
        lv_section_name = BankSectionName(lp_bank, lv_section_number);
        if ((lv_section_name == "Unsigned")) {
        }
        else {
            autoD053C6EB_ae = (BankKeyCount(lp_bank, lv_section_name) - 1);
            lv_key = 0;
            for ( ; ( (autoD053C6EB_ai >= 0 && lv_key <= autoD053C6EB_ae) || (autoD053C6EB_ai < 0 && lv_key >= autoD053C6EB_ae) ) ; lv_key += autoD053C6EB_ai ) {
                lv_key_name = BankKeyName(lp_bank, lv_section_name, lv_key);
                lib1_gf_AddStringToHashInput(lv_section_name);
                lib1_gf_AddStringToHashInput(",");
                lib1_gf_AddStringToHashInput(lv_key_name);
                lib1_gf_AddStringToHashInput(",");
                if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeString) == true)) {
                    lib1_gf_AddStringToHashInput(BankValueGetAsString(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeInt) == true)) {
                    lib1_gf_AddIntegerToHashInput(BankValueGetAsInt(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypePoint) == true)) {
                    lib1_gf_AddStringToHashInput(libNtve_gf_ConvertPointToString(BankValueGetAsPoint(lp_bank, lv_section_name, lv_key_name)));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeFixed) == true)) {
                    lib1_gf_AddRealToHashInput(BankValueGetAsFixed(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeFlag) == true)) {
                    lib1_gf_AddBooleanToHashInput(BankValueGetAsFlag(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeUnit) == true)) {
                    TriggerDebugOutput(1, StringExternal("Param/Value/63C0F234"), true);
                }
                lib1_gf_AddStringToHashInput("\\n");
            }
        }
    }
    return lib1_gf_GenerateSHA256HashCode();
}

void gf_RecordCommand () {
    // Variable Declarations
    text lv_message;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC6B1AAAD_g;

    // Variable Initialization

    // Implementation
    autoC6B1AAAD_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC6B1AAAD_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_anonymous_mode == true)) {
            lv_message = (StringToText("") + TextWithColor(PlayerName(lv_player), Color(100.00, 100.00, 100.00)));
        }
        else {
            lv_message = (StringToText("") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
        }
        lv_message = (lv_message + StringExternal("Param/Value/077CBEA9"));
        lv_message = (lv_message + IntToText(gv_player_mode_wins[lv_player]));
        lv_message = (lv_message + StringExternal("Param/Value/C385B952"));
        lv_message = (lv_message + IntToText((gv_player_mode_games[lv_player] - gv_player_mode_wins[lv_player])));
        lv_message = (lv_message + StringExternal("Param/Value/C840F232"));
        gf_GameMessage(lv_message, PlayerGroupSingle(EventPlayer()));
    }
}

void gf_DisplayElo (playergroup lp_players) {
    // Variable Declarations
    int lv_player;
    text lv_message;

    // Automatic Variable Declarations
    playergroup auto11B949D1_g;

    // Variable Initialization

    // Implementation
    auto11B949D1_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto11B949D1_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            gf_GameMessage((StringExternal("Param/Value/FF7D3D0F") + FixedToText(gf_GetAverageOpponentElo(lv_player), 1)), PlayerGroupSingle(lv_player));
            lv_message = (StringToText("") + StringExternal("Param/Value/AD714ED6"));
            lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(((gv_total_wagers / gv_players_per_team) - gv_player_elos_wagers[lv_player]), c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(13)));
            lv_message = (lv_message + StringExternal("Param/Value/911BE273"));
            lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(gv_player_elos_wagers[lv_player], c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(1)));
            gf_GameMessage(lv_message, PlayerGroupSingle(lv_player));
        }

    }
}

void gf_SaveBankIfFullGame (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_full_game == true) && (gv_player_is_observer[lp_player] == false) && (gv_player_left_game[lp_player] == false))) {
        gf_SignBank(gv_banks[lp_player]);
        BankSave(gv_banks[lp_player]);
    }

}

void gf_RecordUpdateGameStart () {
    // Variable Declarations
    fixed lv_max_team_elo;
    fixed lv_min_team_elo;
    fixed lv_elo_boost;
    text lv_message;
    int lv_real_player_count;
    fixed lv_r1;
    fixed lv_r2;
    fixed lv_e1;
    int lv_team;
    fixed lv_average_team_elo;
    fixed lv_average_opponent_elo;
    fixed lv_total_elo;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF6B8A1AF_g;
    playergroup autoB2E70265_g;
    playergroup auto4FD0733F_g;
    playergroup auto63DE3FB6_g;

    // Variable Initialization
    lv_max_team_elo = -2000.0;
    lv_min_team_elo = 10000.0;
    lv_elo_boost = 1.0;

    // Implementation
    autoF6B8A1AF_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF6B8A1AF_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) && (gv_player_is_observer[lv_player] == false))) {
            lv_real_player_count = (lv_real_player_count + 1);
        }

    }
    if ((((GameAttributeGameValue("8") == "0002") && (gv_mode_downgraded == false) && (lv_real_player_count == (gv_num_teams * gv_players_per_team))) || (lv_real_player_count >= 0))) {
        gv_full_game = true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/EDA088A4"), true);
        TriggerDebugOutput(1, IntToText(lv_real_player_count), true);
        TriggerDebugOutput(1, libNtve_gf_ConvertBooleanToText(gv_mode_downgraded), true);
        gf_GameMessage(StringExternal("Param/Value/71C62D9B"), gv_all_players_and_observers);
    }
    autoB2E70265_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB2E70265_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        BankLoad("ZoneControlCE", lv_player);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        if (((BankVerify(BankLastCreated()) == true) && (gf_VerifyBank(BankLastCreated()) == true))) {
        }
        else {
            BankSectionRemove(BankLastCreated(), "Player");
        }
        gv_banks[lv_player] = BankLastCreated();
        gv_player_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "games");
        if ((PlayerGroupHasPlayer(gv_all_players, lv_player) == true)) {
            gv_player_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "wins");
            gv_player_mode_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("wins" + gv_game_mode_string));
            gv_player_mode_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string));
            BankValueSetFromString(BankLastCreated(), "Player", "handle", gv_player_handles[lv_player]);
            BankValueSetFromInt(BankLastCreated(), "Player", "games", (gv_player_games[lv_player] + 1));
            BankValueSetFromInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string), (gv_player_mode_games[lv_player] + 1));
            if (true) {
                gv_player_mode_history[lv_player] = BankValueGetAsString(BankLastCreated(), "Player", ("history" + gv_game_mode_string));
                if (((BankKeyExists(gv_banks[lv_player], "Player", ("history" + gv_game_mode_string)) == true) && (StringEqual(gv_player_mode_history[lv_player], "", c_stringCase) == false) && (StringLength(gv_player_mode_history[lv_player]) > 1))) {
                    gv_player_mode_history[lv_player] = StringSub(gv_player_mode_history[lv_player], 1, 100);
                }

                BankValueSetFromString(BankLastCreated(), "Player", ("history" + gv_game_mode_string), ("L" + gv_player_mode_history[lv_player]));
            }

            if ((BankKeyExists(BankLastCreated(), "Player", ("elo" + gv_game_mode_string)) == true)) {
                gv_player_elos[lv_player] = BankValueGetAsFixed(BankLastCreated(), "Player", ("elo" + gv_game_mode_string));
            }

            if ((gv_player_elos[lv_player] < 200.0)) {
                gv_player_elos[lv_player] = 1000.0;
            }

            if (((gv_player_elos[lv_player] > 2500.0) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-2438645", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-4728462", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-4632373", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-4668107", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-10852186", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-5692110", c_stringCase) == false) && (StringEqual(gv_player_handles[lv_player], "1-S2-1-2425002", c_stringCase) == false))) {
                gv_player_elos[lv_player] = 2300.0;
            }

            if ((gv_player_elos[lv_player] > 3500.0)) {
                gv_player_elos[lv_player] = 3500.0;
            }

            gv_team_elo_sums[lv_team] = (gv_team_elo_sums[lv_team] + gv_player_elos[lv_player]);
            lv_total_elo = (lv_total_elo + gv_player_elos[lv_player]);
        }

        if (((StringEqual(gv_player_handles[lv_player], "1-S2-1-2420053", c_stringCase) == true) && ((gv_player_games[lv_player] <= 20) || (gv_player_wins[lv_player] >= (gv_player_mode_games[lv_player] / 3))))) {
            gv_player_wins[lv_player] = 13;
            gv_player_games[lv_player] = 60;
            gv_player_elos[lv_player] = 875.0;
        }

        if ((((StringEqual(gv_player_handles[lv_player], "1-S2-1-2420053", c_stringCase) == true)) && ((gv_player_games[lv_player] <= 20) || (gv_player_wins[lv_player] >= (gv_player_mode_games[lv_player] / 3))))) {
            gv_player_wins[lv_player] = 13;
            gv_player_games[lv_player] = 60;
            gv_player_elos[lv_player] = 875.0;
        }

    }
    auto4FD0733F_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4FD0733F_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        gv_team_elo_averages[lv_team] = (gv_team_elo_sums[lv_team] / gv_players_per_team);
        lv_min_team_elo = MinF(lv_min_team_elo, gv_team_elo_averages[lv_team]);
        lv_max_team_elo = MaxF(lv_max_team_elo, gv_team_elo_averages[lv_team]);
    }
    if ((GameAttributeGameValue("3") == "0001")) {
        gf_GameMessage(StringExternal("Param/Value/39650EBA"), PlayerGroupActive());
        lv_elo_boost = 1.5;
    }

    if (((lv_max_team_elo - lv_min_team_elo) <= 350.0)) {
        gf_GameMessage(StringExternal("Param/Value/1C257F3D"), PlayerGroupActive());
        lv_elo_boost = 1.5;
    }

    if (((lv_max_team_elo - lv_min_team_elo) <= 250.0)) {
        gf_GameMessage(StringExternal("Param/Value/475FF37B"), PlayerGroupActive());
        lv_elo_boost = 2.0;
    }

    auto63DE3FB6_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto63DE3FB6_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        lv_average_opponent_elo = ((lv_total_elo - gv_team_elo_sums[lv_team]) / ((gv_num_teams - 1) * gv_players_per_team));
        lv_r1 = Pow(10.0, (gv_team_elo_averages[lv_team] / 400.0));
        lv_r2 = Pow(10.0, (lv_average_opponent_elo / 400.0));
        lv_e1 = (lv_r1 / (lv_r1 + lv_r2));
        gv_player_elos_wagers[lv_player] = ((6.0 * lv_e1) / 1.0);
        gv_player_elos_wagers[lv_player] *= lv_elo_boost;
        gv_total_wagers = (gv_total_wagers + gv_player_elos_wagers[lv_player]);
        gv_player_current_elo[lv_player] = (gv_player_elos[lv_player] - gv_player_elos_wagers[lv_player]);
        BankValueSetFromFixed(gv_banks[lv_player], "Player", ("elo" + gv_game_mode_string), gv_player_current_elo[lv_player]);
        gf_SaveBankIfFullGame(lv_player);
    }
    gv_game_average_elo = (lv_total_elo / PlayerGroupCount(gv_all_players));
}

void gf_RecordUpdateGameVictory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_banks[lp_player], "Player", "wins", (gv_player_wins[lp_player] + 1));
    BankValueSetFromInt(gv_banks[lp_player], "Player", ("wins" + gv_game_mode_string), (gv_player_mode_wins[lp_player] + 1));
    gv_player_current_elo[lp_player] = ((gv_player_elos[lp_player] - gv_player_elos_wagers[lp_player]) + (gv_total_wagers / gv_players_per_team));
    BankValueSetFromFixed(gv_banks[lp_player], "Player", ("elo" + gv_game_mode_string), gv_player_current_elo[lp_player]);
    BankValueSetFromString(gv_banks[lp_player], "Player", ("history" + gv_game_mode_string), ("W" + gv_player_mode_history[lp_player]));
}

void gf_PerfCommand (playergroup lp_players) {
    // Variable Declarations
    fixed lv_top_team_score;
    int lv_top_team;
    int lv_team;

    // Automatic Variable Declarations
    int auto2F4E32DC_ae;
    const int auto2F4E32DC_ai = 1;
    int auto3A53D7A3_ae;
    const int auto3A53D7A3_ai = 1;

    // Variable Initialization

    // Implementation
    auto2F4E32DC_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto2F4E32DC_ai >= 0 && lv_team <= auto2F4E32DC_ae) || (auto2F4E32DC_ai < 0 && lv_team >= auto2F4E32DC_ae) ) ; lv_team += auto2F4E32DC_ai ) {
        if ((gv_team_peak_performance[lv_team] > lv_top_team_score)) {
            lv_top_team_score = gv_team_peak_performance[lv_team];
            lv_top_team = lv_team;
        }

    }
    auto3A53D7A3_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto3A53D7A3_ai >= 0 && lv_team <= auto3A53D7A3_ae) || (auto3A53D7A3_ai < 0 && lv_team >= auto3A53D7A3_ae) ) ; lv_team += auto3A53D7A3_ai ) {
        gf_GameMessage((gv_team_short_names[lv_team] + StringExternal("Param/Value/35C39E8D") + FixedToText(gv_team_peak_performance[lv_team], 2) + StringExternal("Param/Value/204DD57E") + FixedToText(gv_team_peak_performance_for_winning_team[lv_top_team][lv_team], 2)), lp_players);
    }
}

int gf_GetPlayerScore (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (PlayerScoreValueGetAsInt(lp_player, "UnitsKilledValue") + (PlayerScoreValueGetAsInt(lp_player, "StructuresKilledValue") + gv_player_shards_collected[lp_player]));
}

text gf_GetTeamPlayerList (int lp_team) {
    // Variable Declarations
    int lv_player;
    text lv_string;

    // Automatic Variable Declarations
    playergroup auto5CEE6BAE_g;

    // Variable Initialization

    // Implementation
    lv_string = StringToText("");
    auto5CEE6BAE_g = gv_teams[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5CEE6BAE_g, lv_player);
        if (lv_player < 0) { break; }
        lv_string = (lv_string + StringExternal("Param/Value/2DABF6B5") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/BB11940F"));
    }
    return lv_string;
}

void gf_ShowFinalStandings (int lp_winning_team) {
    // Variable Declarations
    fixed lv_cur_top_performance;
    int lv_runner_up_team;
    int lv_team;

    // Automatic Variable Declarations
    const int auto9614AB2F_ae = 3;
    const int auto9614AB2F_ai = 1;
    const int auto063A0715_ae = 3;
    const int auto063A0715_ai = 1;

    // Variable Initialization
    lv_runner_up_team = -1;

    // Implementation
    lv_runner_up_team = lp_winning_team;
    lv_team = 0;
    for ( ; ( (auto9614AB2F_ai >= 0 && lv_team <= auto9614AB2F_ae) || (auto9614AB2F_ai < 0 && lv_team >= auto9614AB2F_ae) ) ; lv_team += auto9614AB2F_ai ) {
        if ((gv_team_peak_performance[lv_team] >= gv_team_peak_performance[lv_runner_up_team])) {
            lv_runner_up_team = lv_team;
            lv_cur_top_performance = gv_team_peak_performance[lv_team];
        }
    }
    if ((lv_runner_up_team == lp_winning_team)) {
        lv_cur_top_performance = 0.0;
        lv_team = 0;
        for ( ; ( (auto063A0715_ai >= 0 && lv_team <= auto063A0715_ae) || (auto063A0715_ai < 0 && lv_team >= auto063A0715_ae) ) ; lv_team += auto063A0715_ai ) {
            if ((gv_team_peak_performance_for_winning_team[lp_winning_team][lv_team] >= lv_cur_top_performance)) {
                lv_runner_up_team = lv_team;
                lv_cur_top_performance = gv_team_peak_performance_for_winning_team[lp_winning_team][lv_team];
            }
        }
    }
}

void gf_ShowCorrectLeaderboard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerType(lp_player) == c_playerTypeNeutral) || (BankKeyExists(gv_banks[lp_player], "P", "leaderboard") == false) || (StringEqual(BankValueGetAsString(gv_banks[lp_player], "P", "leaderboard"), "t", c_stringCase) == true))) {
        DialogSetVisible(gv_teamLeaderboard, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_playerLeaderboard, PlayerGroupSingle(lp_player), false);
    }
    else {
        if ((StringEqual(BankValueGetAsString(gv_banks[lp_player], "P", "leaderboard"), "p", c_stringCase) == true)) {
            DialogSetVisible(gv_teamLeaderboard, PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_playerLeaderboard, PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogSetVisible(gv_playerLeaderboard, PlayerGroupSingle(lp_player), false);
            DialogSetVisible(gv_teamLeaderboard, PlayerGroupSingle(lp_player), false);
        }
    }
}

void gf_ToggleLeaderboardMode (int lp_player) {
    // Variable Declarations
    string lv_new_leaderboard_type;
    string lv_leaderboard_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_new_leaderboard_type = "";
    lv_leaderboard_type = "p";

    // Implementation
    lv_leaderboard_type = BankValueGetAsString(gv_banks[lp_player], "P", "leaderboard");
    if (((BankKeyExists(gv_banks[lp_player], "P", "leaderboard") == false) || (StringEqual(lv_leaderboard_type, "t", c_stringCase) == true))) {
        lv_new_leaderboard_type = "p";
    }
    else {
        if ((StringEqual(lv_leaderboard_type, "p", c_stringCase) == true)) {
            lv_new_leaderboard_type = "n";
        }
        else {
            if ((StringEqual(lv_leaderboard_type, "n", c_stringCase) == true)) {
                lv_new_leaderboard_type = "t";
            }

        }
    }
    BankValueSetFromString(gv_banks[lp_player], "P", "leaderboard", lv_new_leaderboard_type);
    gf_SaveBankIfFullGame(lp_player);
    gf_ShowCorrectLeaderboard(lp_player);
}

void gf_UpdatePlayerColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(gv_team_leaderboard_player_names[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_leaderboard_player_scores[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_player_leaderboard_player_names[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_player_leaderboard_player_scores[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
}

void gf_UpdatePlayerNames (playergroup lp_update_group) {
    // Variable Declarations
    int lv_update_player;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto38CB71E6_g;
    playergroup autoC0A5D197_g;

    // Variable Initialization

    // Implementation
    auto38CB71E6_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto38CB71E6_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_anonymous_mode == true)) {
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_player_names[lv_player], gv_player_names[lv_player], lp_update_group);
            libNtve_gf_SetDialogItemText(gv_player_leaderboard_player_names[lv_player], gv_player_names[lv_player], lp_update_group);
            autoC0A5D197_g = lp_update_group;
            lv_update_player = -1;
            while (true) {
                lv_update_player = PlayerGroupNextPlayer(autoC0A5D197_g, lv_update_player);
                if (lv_update_player < 0) { break; }
                if (((gv_observer_reveal_identity[lv_update_player] == true) || (gv_reveal_because_two_team_left == true) || ((gv_player_is_observer[lv_update_player] == false) && (gv_player_team[lv_player] == gv_player_team[lv_update_player])))) {
                    libNtve_gf_SetDialogItemText(gv_team_leaderboard_player_names[lv_player], gv_nonanonymous_player_titles[lv_player], PlayerGroupSingle(lv_update_player));
                    libNtve_gf_SetDialogItemText(gv_player_leaderboard_player_names[lv_player], gv_nonanonymous_player_titles[lv_player], PlayerGroupSingle(lv_update_player));
                }

            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_player_names[lv_player], gv_nonanonymous_player_titles[lv_player], lp_update_group);
            libNtve_gf_SetDialogItemText(gv_player_leaderboard_player_names[lv_player], gv_nonanonymous_player_titles[lv_player], lp_update_group);
        }
    }
}

void gf_LeaderboardInit () {
    // Variable Declarations
    int lv_slot;
    text[6] lv_team_short_names;
    int[5] lv_current_team_rank;
    int lv_current_rank;
    int lv_teamFrame;
    int lv_playerFrame;
    int lv_player;
    int lv_position;
    int lv_team;
    string lv_name_string;

    // Automatic Variable Declarations
    playergroup autoD05B9120_g;
    playergroup auto5FBD3F8B_g;
    const int auto4816E9DC_ae = 3;
    const int auto4816E9DC_ai = 1;
    int autoAFDD36F3_ae;
    const int autoAFDD36F3_ai = 1;
    playergroup auto1286F6C1_g;
    const int auto7B97FBB6_ae = 11;
    const int auto7B97FBB6_ai = 1;

    // Variable Initialization
    lv_teamFrame = c_invalidDialogControlId;
    lv_playerFrame = c_invalidDialogControlId;
    lv_name_string = "";

    // Implementation
    autoD05B9120_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD05B9120_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_games[lv_player] >= 1))) {
            gv_nonanonymous_player_titles[lv_player] = (PlayerName(lv_player) + (StringExternal("Param/Value/20E44777") + (IntToText(RoundI(gv_player_elos[lv_player])) + StringExternal("Param/Value/0DF3FE86"))));
        }
        else {
            gv_nonanonymous_player_titles[lv_player] = PlayerName(lv_player);
        }
    }
    DialogCreate(500, 500, c_anchorTopRight, 10, 70, true);
    gv_teamLeaderboard = DialogLastCreated();
    DialogCreate(500, 400, c_anchorTopRight, 10, 70, true);
    gv_playerLeaderboard = DialogLastCreated();
    DialogCreate(150, 200, c_anchorBottomRight, 10, 300, true);
    gv_simpleTeamLeaderboard = DialogLastCreated();
    DialogSetImageVisible(gv_teamLeaderboard, false);
    DialogSetImageVisible(gv_simpleTeamLeaderboard, false);
    DialogSetImageVisible(gv_playerLeaderboard, false);
    DialogSetVisible(gv_simpleTeamLeaderboard, PlayerGroupAll(), true);
    gf_ShowCorrectLeaderboard(0);
    if ((gv_player_alive[gv_position_players[1]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[1]]] = (lv_team_short_names[gv_player_team[gv_position_players[1]]] + TextWithColor(StringExternal("Param/Value/A698A56B"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[1], false))));
    }

    if ((gv_player_alive[gv_position_players[0]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[0]]] = (lv_team_short_names[gv_player_team[gv_position_players[0]]] + TextWithColor(StringExternal("Param/Value/A0987309"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[0], false))));
    }

    if ((gv_player_alive[gv_position_players[2]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[2]]] = (lv_team_short_names[gv_player_team[gv_position_players[2]]] + TextWithColor(StringExternal("Param/Value/7674BEDF"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[2], false))));
    }

    if ((gv_player_alive[gv_position_players[3]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[3]]] = (lv_team_short_names[gv_player_team[gv_position_players[3]]] + TextWithColor(StringExternal("Param/Value/28003E0A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[3], false))));
    }

    if ((gv_player_alive[gv_position_players[5]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[5]]] = (lv_team_short_names[gv_player_team[gv_position_players[5]]] + TextWithColor(StringExternal("Param/Value/D82F42FA"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[5], false))));
    }

    if ((gv_player_alive[gv_position_players[4]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[4]]] = (lv_team_short_names[gv_player_team[gv_position_players[4]]] + TextWithColor(StringExternal("Param/Value/1AE20288"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[4], false))));
    }

    if ((gv_player_alive[gv_position_players[6]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[6]]] = (lv_team_short_names[gv_player_team[gv_position_players[6]]] + TextWithColor(StringExternal("Param/Value/C63ADDFB"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[6], false))));
    }

    if ((gv_player_alive[gv_position_players[7]] == true)) {
        lv_team_short_names[gv_player_team[gv_position_players[7]]] = (lv_team_short_names[gv_player_team[gv_position_players[7]]] + TextWithColor(StringExternal("Param/Value/9FD17718"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_position_players[7], false))));
    }

    auto5FBD3F8B_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5FBD3F8B_g, lv_player);
        if (lv_player < 0) { break; }
        gf_ShowCorrectLeaderboard(lv_player);
    }
    lv_team = 0;
    for ( ; ( (auto4816E9DC_ai >= 0 && lv_team <= auto4816E9DC_ae) || (auto4816E9DC_ai < 0 && lv_team >= auto4816E9DC_ae) ) ; lv_team += auto4816E9DC_ai ) {
        gv_team_short_names[lv_team] = lv_team_short_names[lv_team];
    }
    autoAFDD36F3_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (autoAFDD36F3_ai >= 0 && lv_team <= autoAFDD36F3_ae) || (autoAFDD36F3_ai < 0 && lv_team >= autoAFDD36F3_ae) ) ; lv_team += autoAFDD36F3_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            DialogControlCreateFromTemplate(gv_simpleTeamLeaderboard, c_triggerControlTypePanel, "ZoneLeaderboard/SimpleTeamFrame");
            gv_simple_team_frames[lv_team] = DialogControlLastCreated();
            DialogControlHookup(gv_simple_team_frames[lv_team], c_triggerControlTypeLabel, "S1");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_team_short_names[lv_team], PlayerGroupAll());
            gv_team_rank[lv_current_rank] = lv_team;
            lv_current_rank = (lv_current_rank + 1);
            DialogControlCreateFromTemplate(gv_teamLeaderboard, c_triggerControlTypePanel, "ZoneLeaderboard/TeamFrame");
            lv_teamFrame = DialogControlLastCreated();
            gv_team_leaderboard_team_frames[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamScore");
            gv_team_leaderboard_team_score_dialog_item[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamName");
            gv_team_leaderboard_team_name_dialog_item[lv_team] = DialogControlLastCreated();
            lv_name_string = "";
            if (((PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[0]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[1]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[8]) == true))) {
                lv_name_string = (lv_name_string + "Top Left  ");
            }

            if (((PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[2]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[3]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[9]) == true))) {
                lv_name_string = (lv_name_string + "Top Right  ");
            }

            if (((PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[4]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[5]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[10]) == true))) {
                lv_name_string = (lv_name_string + "Bot Right  ");
            }

            if (((PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[6]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[7]) == true) || (PlayerGroupHasPlayer(gv_teams[lv_team], gv_position_players[11]) == true))) {
                lv_name_string = (lv_name_string + "Bot Left  ");
            }

            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(lv_name_string), PlayerGroupAll());
        }

    }
    auto1286F6C1_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1286F6C1_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            lv_team = gv_player_team[lv_player];
            gv_player_team_rank[lv_team][lv_current_team_rank[lv_team]] = lv_player;
            lv_current_team_rank[lv_team] = (lv_current_team_rank[lv_team] + 1);
            DialogControlCreateInPanelFromTemplate(gv_team_leaderboard_team_frames[gv_player_team[lv_player]], c_triggerControlTypePanel, "ZoneLeaderboard/PlayerFrame");
            lv_playerFrame = DialogControlLastCreated();
            gv_team_leaderboard_player_frames[lv_player] = lv_playerFrame;
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Score");
            gv_team_leaderboard_player_scores[lv_player] = DialogControlLastCreated();
            gv_player_state_colors[lv_player] = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Name");
            gv_team_leaderboard_player_names[lv_player] = DialogControlLastCreated();
        }
    }
    lv_current_rank = 0;
    lv_slot = 0;
    for ( ; ( (auto7B97FBB6_ai >= 0 && lv_slot <= auto7B97FBB6_ae) || (auto7B97FBB6_ai < 0 && lv_slot >= auto7B97FBB6_ae) ) ; lv_slot += auto7B97FBB6_ai ) {
        lv_player = gv_position_players[lv_slot];
        if (((gv_player_is_observer[lv_player] == true) || (gv_player_leaderboard_player_frames[lv_player] != c_invalidDialogControlId))) {
        }
        else {
            if ((gv_player_alive[lv_player] == true)) {
                gv_player_rank[lv_current_rank] = lv_player;
                lv_current_rank = (lv_current_rank + 1);
                DialogControlCreateFromTemplate(gv_playerLeaderboard, c_triggerControlTypePanel, "ZoneLeaderboard/PlayerFrame");
                lv_playerFrame = DialogControlLastCreated();
                gv_player_leaderboard_player_frames[lv_player] = lv_playerFrame;
                DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Score");
                gv_player_leaderboard_player_scores[lv_player] = DialogControlLastCreated();
                gv_player_state_colors[lv_player] = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
                DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Name");
                gv_player_leaderboard_player_names[lv_player] = DialogControlLastCreated();
                gf_UpdatePlayerColor(lv_player);
                gf_UpdateLeaderboardSortOrder();
            }
        }
    }
    gf_UpdatePlayerNames(gv_all_players_and_observers);
    gf_UpdateLeaderboardSortOrder();
}

void gf_UpdateLeaderboardSortOrder () {
    // Variable Declarations
    color lv_team_color;
    int lv_player_rank;
    int lv_team_rank;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    int auto45D61597_ae;
    const int auto45D61597_ai = 1;
    int auto6A520955_ae;
    const int auto6A520955_ai = 1;
    int auto37397ADC_ae;
    const int auto37397ADC_ai = 1;
    const int auto6E4B72E8_ae = 11;
    const int auto6E4B72E8_ai = 1;

    // Variable Initialization
    lv_team_color = Color(0,0,0);

    // Implementation
    auto45D61597_ae = (gv_num_teams - 1);
    lv_team_rank = 0;
    for ( ; ( (auto45D61597_ai >= 0 && lv_team_rank <= auto45D61597_ae) || (auto45D61597_ai < 0 && lv_team_rank >= auto45D61597_ae) ) ; lv_team_rank += auto45D61597_ai ) {
        DialogControlSetPosition(gv_team_leaderboard_team_frames[gv_team_rank[lv_team_rank]], PlayerGroupAll(), c_anchorTopLeft, 0, ((((gv_players_per_team + 1) * 28) + 5) * lv_team_rank));
        DialogControlSetPosition(gv_simple_team_frames[gv_team_rank[lv_team_rank]], PlayerGroupAll(), c_anchorTopRight, 0, ((lv_team_rank * 27) + 0));
    }
    auto6A520955_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto6A520955_ai >= 0 && lv_team <= auto6A520955_ae) || (auto6A520955_ai < 0 && lv_team >= auto6A520955_ae) ) ; lv_team += auto6A520955_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_team_color = gv_player_state_colors[gv_player_team_rank[lv_team][0]];
            libNtve_gf_SetDialogItemColor(gv_team_leaderboard_team_name_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_team_leaderboard_team_score_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
        }

        auto37397ADC_ae = (gv_players_per_team - 1);
        lv_player_rank = 0;
        for ( ; ( (auto37397ADC_ai >= 0 && lv_player_rank <= auto37397ADC_ae) || (auto37397ADC_ai < 0 && lv_player_rank >= auto37397ADC_ae) ) ; lv_player_rank += auto37397ADC_ai ) {
            lv_player = gv_player_team_rank[lv_team][lv_player_rank];
            if ((lv_player > 0)) {
                DialogControlSetPosition(gv_team_leaderboard_player_frames[lv_player], PlayerGroupAll(), c_anchorTopLeft, 20, ((lv_player_rank + 1) * 28));
            }

        }
    }
    lv_player_rank = 0;
    for ( ; ( (auto6E4B72E8_ai >= 0 && lv_player_rank <= auto6E4B72E8_ae) || (auto6E4B72E8_ai < 0 && lv_player_rank >= auto6E4B72E8_ae) ) ; lv_player_rank += auto6E4B72E8_ai ) {
        lv_player = gv_player_rank[lv_player_rank];
        if ((lv_player > 0)) {
            DialogControlSetPosition(gv_player_leaderboard_player_frames[lv_player], PlayerGroupAll(), c_anchorTopLeft, 20, ((lv_player_rank + 0) * 28));
        }

    }
}

void gf_UpdateLeaderboard (bool lp_force_update_sort) {
    // Variable Declarations
    fixed lv_teams_left;
    int lv_total_score;
    int lv_team2;
    int lv_team1;
    int lv_player2;
    int lv_player1;
    bool lv_swap_needed;
    bool lv_player_sort_order_modified;
    int lv_swap;
    int lv_sort_index;
    int lv_team;
    int[5] lv_team_scores;
    int[5] lv_team_nuke_scores;
    int lv_player;
    int lv_player_score;

    // Automatic Variable Declarations
    playergroup autoCE5FF33E_g;
    const int auto81D86527_ae = 3;
    const int auto81D86527_ai = 1;
    int auto34AC0828_ae;
    const int auto34AC0828_ai = 1;
    int auto1F60DB84_ae;
    const int auto1F60DB84_ai = 1;
    int autoF24ADD00_ae;
    const int autoF24ADD00_ai = 1;
    int auto95E8FBC3_ae;
    const int auto95E8FBC3_ai = 1;

    // Variable Initialization

    // Implementation
    autoCE5FF33E_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCE5FF33E_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            if ((gv_num_nukes_detected[lv_player] == 0)) {
                lv_team_nuke_scores[gv_player_team[lv_player]] += 500;
            }

            lv_player_score = gf_GetPlayerScore(lv_player);
            gv_player_scores[lv_player] = lv_player_score;
            lv_team_scores[gv_player_team[lv_player]] = (lv_player_score + lv_team_scores[gv_player_team[lv_player]]);
            gv_team_scores[gv_player_team[lv_player]] = lv_team_scores[gv_player_team[lv_player]];
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_player_scores[lv_player], IntToText(lv_player_score), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_player_leaderboard_player_scores[lv_player], IntToText(lv_player_score), PlayerGroupAll());
        }

    }
    lv_team = 0;
    for ( ; ( (auto81D86527_ai >= 0 && lv_team <= auto81D86527_ae) || (auto81D86527_ai < 0 && lv_team >= auto81D86527_ae) ) ; lv_team += auto81D86527_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_team_score_dialog_item[lv_team], IntToText(lv_team_scores[lv_team]), PlayerGroupAll());
        }

    }
    auto34AC0828_ae = (gv_num_teams - 2);
    lv_sort_index = 0;
    for ( ; ( (auto34AC0828_ai >= 0 && lv_sort_index <= auto34AC0828_ae) || (auto34AC0828_ai < 0 && lv_sort_index >= auto34AC0828_ae) ) ; lv_sort_index += auto34AC0828_ai ) {
        lv_team1 = gv_team_rank[lv_sort_index];
        lv_team2 = gv_team_rank[(lv_sort_index + 1)];
        if ((gv_team_alive[lv_team1] == gv_team_alive[lv_team2])) {
            lv_swap_needed = (lv_team_scores[lv_team1] < lv_team_scores[lv_team2]);
        }
        else {
            lv_swap_needed = gv_team_alive[lv_team2];
        }
        if ((lv_swap_needed == true)) {
            gv_team_rank[lv_sort_index] = lv_team2;
            gv_team_rank[(lv_sort_index + 1)] = lv_team1;
            lv_player_sort_order_modified = true;
        }

    }
    auto1F60DB84_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto1F60DB84_ai >= 0 && lv_team <= auto1F60DB84_ae) || (auto1F60DB84_ai < 0 && lv_team >= auto1F60DB84_ae) ) ; lv_team += auto1F60DB84_ai ) {
        autoF24ADD00_ae = (gv_players_per_team - 2);
        lv_sort_index = 0;
        for ( ; ( (autoF24ADD00_ai >= 0 && lv_sort_index <= autoF24ADD00_ae) || (autoF24ADD00_ai < 0 && lv_sort_index >= autoF24ADD00_ae) ) ; lv_sort_index += autoF24ADD00_ai ) {
            lv_player1 = gv_player_team_rank[lv_team][lv_sort_index];
            lv_player2 = gv_player_team_rank[lv_team][(lv_sort_index + 1)];
            if ((gv_player_alive[lv_player1] == gv_player_alive[lv_player2])) {
                lv_swap_needed = (gv_player_scores[lv_player1] < gv_player_scores[lv_player2]);
            }
            else {
                lv_swap_needed = gv_player_alive[lv_player2];
            }
            if ((lv_swap_needed == true)) {
                gv_player_team_rank[lv_team][lv_sort_index] = lv_player2;
                gv_player_team_rank[lv_team][(lv_sort_index + 1)] = lv_player1;
                lv_player_sort_order_modified = true;
            }

        }
    }
    auto95E8FBC3_ae = ((gv_num_teams * gv_players_per_team) - 2);
    lv_sort_index = 0;
    for ( ; ( (auto95E8FBC3_ai >= 0 && lv_sort_index <= auto95E8FBC3_ae) || (auto95E8FBC3_ai < 0 && lv_sort_index >= auto95E8FBC3_ae) ) ; lv_sort_index += auto95E8FBC3_ai ) {
        lv_player1 = gv_player_rank[lv_sort_index];
        lv_player2 = gv_player_rank[(lv_sort_index + 1)];
        if ((gv_player_alive[lv_player1] == gv_player_alive[lv_player2])) {
            lv_swap_needed = (gv_player_scores[lv_player1] < gv_player_scores[lv_player2]);
        }
        else {
            lv_swap_needed = gv_player_alive[lv_player2];
        }
        if ((lv_swap_needed == true)) {
            gv_player_rank[lv_sort_index] = lv_player2;
            gv_player_rank[(lv_sort_index + 1)] = lv_player1;
            lv_player_sort_order_modified = true;
        }

    }
    if (((lp_force_update_sort == true) || (lv_player_sort_order_modified == true))) {
        gf_UpdateLeaderboardSortOrder();
    }

}

string gf_GetDialogButtonText (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_game_over == false)) {
        return "Dismiss";
    }

    if ((gv_winning_team == gv_player_team[lp_player])) {
        return "Victory";
    }
    else {
        return "Defeat";
    }
}

void gf_HideDialogsForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_results_dialog[lp_player] != c_invalidDialogId)) {
        DialogSetVisible(gv_results_dialog[lp_player], PlayerGroupSingle(lp_player), false);
        gv_results_dialog[lp_player] = c_invalidDialogId;
    }

    if ((gv_achievements_dialog[lp_player] != c_invalidDialogId)) {
        DialogSetVisible(gv_achievements_dialog[lp_player], PlayerGroupSingle(lp_player), false);
        gv_achievements_dialog[lp_player] = c_invalidDialogId;
    }

}

void gf_CreateResultsButtons () {
    // Variable Declarations
    int lv_panel;
    int lv_dialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_dialog = c_invalidDialogId;

    // Implementation
    DialogCreate(400, 80, c_anchorTop, 0, 10, false);
    lv_dialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, "ZoneResults/ResultsDialogButtons");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "ResultsTab");
    gv_results_button = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeButton, "AchievementsTab");
    gv_achievements_button = DialogControlLastCreated();
}

void gf_ComputeFinalScores (int lp_winning_team) {
    // Variable Declarations
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto5F5C6DF5_g;

    // Variable Initialization

    // Implementation
    auto5F5C6DF5_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5F5C6DF5_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        if ((lv_team == lp_winning_team)) {
            gv_team_final_performance[lv_team] = gv_team_peak_performance[lv_team];
            gv_team_final_performance_time[lv_team] = gv_team_peak_performance_time[lv_team];
        }
        else {
            gv_team_final_performance[lv_team] = gv_team_peak_performance_for_winning_team[lp_winning_team][lv_team];
            gv_team_final_performance_time[lv_team] = gv_team_peak_performance_for_winning_team_time[lp_winning_team][lv_team];
        }
    }
}

void gf_CreateResultsDialog (int lp_winning_team, playergroup lp_show_player) {
    // Variable Declarations
    fixed lv_peak_score;
    datetime lv_peak_score_time;
    color lv_elo_change_color;
    fixed lv_elo_change;
    int lv_button;
    int lv_team;
    int lv_player;
    int lv_current_offset;
    int lv_dialog;
    int lv_player_row;

    // Automatic Variable Declarations
    playergroup auto36B0CB86_g;
    const int auto17774444_ae = 4;
    const int auto17774444_ai = 1;
    playergroup auto65A0E146_g;

    // Variable Initialization
    lv_elo_change_color = Color(100,100,100);
    lv_dialog = c_invalidDialogId;
    lv_player_row = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1200, 630, c_anchorTop, 0, 60, false);
    lv_dialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), lp_show_player, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1100, 600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 100, c_anchorBottom, 0, 70, StringToText(""), StringExternal("Param/Value/07DB2B02"), "");
    auto36B0CB86_g = lp_show_player;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto36B0CB86_g, lv_player);
        if (lv_player < 0) { break; }
        gv_results_dialog[lv_player] = lv_dialog;
        gv_victory_button[lv_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_GetDialogButtonText(lv_player)), PlayerGroupSingle(lv_player));
    }
    DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, "ZoneResults/ResultsTitle");
    DialogControlSetPosition(DialogControlLastCreated(), lp_show_player, c_anchorTopLeft, 0, 50);
    lv_current_offset = 100;
    lv_team = 0;
    for ( ; ( (auto17774444_ai >= 0 && lv_team <= auto17774444_ae) || (auto17774444_ai < 0 && lv_team >= auto17774444_ae) ) ; lv_team += auto17774444_ai ) {
        lv_current_offset += 15;
        auto65A0E146_g = gv_teams[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto65A0E146_g, lv_player);
            if (lv_player < 0) { break; }
            DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, "ZoneResults/ResultsPlayer");
            lv_player_row = DialogControlLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), lp_show_player, c_anchorTopLeft, 0, lv_current_offset);
            DialogControlHookup(lv_player_row, c_triggerControlTypeLabel, "ResultsName");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(lv_player), lp_show_player);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), lp_show_player);
            DialogControlHookup(lv_player_row, c_triggerControlTypeLabel, "ResultsElo");
            lv_elo_change = (gv_player_current_elo[lv_player] - gv_player_elos[lv_player]);
            if ((lv_elo_change > 0.0)) {
                lv_elo_change_color = Color(9.02, 73.33, 0.00);
            }

            if ((lv_elo_change < 0.0)) {
                lv_elo_change_color = Color(71.37, 1.96, 3.92);
            }

            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (FixedToText(gv_player_current_elo[lv_player], 0) + StringExternal("Param/Value/DB7F0C5D") + TextWithColor(FixedToText(lv_elo_change, 1), lv_elo_change_color) + StringExternal("Param/Value/0E083112")), lp_show_player);
            DialogControlHookup(lv_player_row, c_triggerControlTypeLabel, "ResultsPeakPerformance");
            lv_peak_score = gv_team_final_performance[gv_player_team[lv_player]];
            lv_peak_score_time = gv_team_final_performance_time[gv_player_team[lv_player]];
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), FixedToText(lv_peak_score, 2), lp_show_player);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (FixedToText(lv_peak_score, 2) + StringExternal("Param/Value/08AECC7B") + TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), (DateTimeToInt(lv_peak_score_time) - DateTimeToInt(gv_game_start_time)))), lp_show_player);
            lv_current_offset += 35;
        }
    }
}

void gf_ResultsCommand (int lp_player) {
    // Variable Declarations
    int lv_possible_winning_team;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_anonymous_mode == true)) {
        return ;
    }

    lv_possible_winning_team = gv_player_team[lp_player];
    gf_ComputeFinalScores(lv_possible_winning_team);
    gf_CreateResultsDialog(lv_possible_winning_team, PlayerGroupSingle(lp_player));
}

void gf_AddAchievement (string lp_id, string lp_name, string lp_icon) {
    // Automatic Variable Declarations
    // Implementation
    gv_achievement_ids[gv_num_achievements] = lp_id;
    gv_achievements_names[gv_num_achievements] = lp_name;
    gv_achievement_icons[gv_num_achievements] = lp_icon;
    gv_num_achievements += 1;
}

void gf_TestWinGame (int lp_player) {
    // Variable Declarations
    int lv_teammate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_MarkAchievementCompleted("wg", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
}

void gf_TestOneBunkAchievement (int lp_player) {
    // Variable Declarations
    int lv_teammate;

    // Automatic Variable Declarations
    playergroup auto7547A006_g;

    // Variable Initialization

    // Implementation
    if ((gv_player_built_bunker[lp_player] == true)) {
        return ;
    }

    gf_MarkAchievementCompleted("1b", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
    auto7547A006_g = gv_teams[gv_player_team[lp_player]];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto7547A006_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((gv_player_built_bunker[lv_teammate] == true)) {
            return ;
        }

    }
    gf_MarkAchievementCompleted("1bx2", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
}

void gf_TestEarlyCombatPurchased (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_player_alive[gv_player_lanes[lp_player]] == true) && (gv_movement_detected[gv_player_lanes[lp_player]] == true) && (TimerGetElapsed(gv_game_timer) <= 60.0) && (gv_player_scores[gv_player_lanes[lp_player]] <= 50))) {
        gf_GameMessage(StringExternal("Param/Value/0A48B5E9"), PlayerGroupSingle(lp_player));
        gv_player_bought_combat_early[lp_player] = true;
    }

}

void gf_TestEarlyCombatAchievement (int lp_player) {
    // Variable Declarations
    int lv_teammate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_player_bought_combat_early[lp_player] == true)) {
        gf_MarkAchievementCompleted("cs", lp_player, RoundI(gv_player_elos[gv_player_lanes[lp_player]]));
    }

}

void gf_TestSafeWorkerAchievement (int lp_player) {
    // Variable Declarations
    int lv_teammate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_player_has_worker_death[lp_player] == true)) {
        return ;
    }

    gf_MarkAchievementCompleted("sscv", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
}

void gf_TestCarryTeammateAchievement (int lp_player) {
    // Variable Declarations
    int lv_teammate;

    // Automatic Variable Declarations
    playergroup auto053EF8FE_g;

    // Variable Initialization

    // Implementation
    auto053EF8FE_g = gv_teams[gv_player_team[lp_player]];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto053EF8FE_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((gv_player_alive[lv_teammate] != true)) {
            return ;
        }

        if (((lv_teammate != lp_player) && (gv_player_elos[lv_teammate] > 700.0))) {
            return ;
        }

    }
    gf_MarkAchievementCompleted("ct", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
}

void gf_TestTankRushAchievement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((TimerGetElapsed(gv_game_timer) <= 1500.0) && (gv_player_early_tanks_built[lp_player] >= 2))) {
        gf_MarkAchievementCompleted("tr", lp_player, RoundI(gf_GetAverageOpponentElo(lp_player)));
    }

}

void gf_TestVictoryBasedAcievements (int lp_winning_team) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto25B0A8C5_g;
    playergroup auto1DC28DEC_g;
    playergroup auto79E5299F_g;

    // Variable Initialization

    // Implementation
    auto25B0A8C5_g = gv_teams[gv_winning_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto25B0A8C5_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            gf_TestTankRushAchievement(lv_player);
        }

    }
    auto1DC28DEC_g = gv_teams[gv_winning_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1DC28DEC_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_inherited_bunks[lv_player] == true)) {
            return ;
        }

    }
    auto79E5299F_g = gv_teams[gv_winning_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto79E5299F_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            gf_TestWinGame(lv_player);
            gf_TestEarlyCombatAchievement(lv_player);
            gf_TestOneBunkAchievement(lv_player);
            gf_TestSafeWorkerAchievement(lv_player);
            gf_TestCarryTeammateAchievement(lv_player);
        }

    }
}

void gf_MarkAchievementCompleted (string lp_id, int lp_player, int lp_level) {
    // Variable Declarations
    int lv_current_level;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_banks[lp_player] != null) && (GameAttributeGameValue("1") == "0001") && (GameAttributeGameValue("9") == "0001")) {
        lv_current_level = BankValueGetAsInt(gv_banks[lp_player], "C", lp_id);
        BankValueSetFromInt(gv_banks[lp_player], "C", lp_id, MaxI(lv_current_level, lp_level));
    }

}

void gf_AchievementsCommand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_anonymous_mode == true)) {
        return ;
    }

    gf_CreateAchievementsDialog(PlayerGroupSingle(lp_player));
}

void gf_CreateAchievementsDialog (playergroup lp_show_player) {
    // Variable Declarations
    text lv_tooltip_text;
    int lv_level;
    int lv_achievement_index;
    int lv_button;
    int lv_player;
    int lv_current_offset;
    int lv_dialog;
    int lv_player_row;

    // Automatic Variable Declarations
    playergroup autoEE18D22E_g;
    playergroup auto300DF7D6_g;
    int auto6D196538_ae;
    const int auto6D196538_ai = 1;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_player_row = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1200, 630, c_anchorTop, 0, 60, false);
    lv_dialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), lp_show_player, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1100, 600, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_small_base.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 100, c_anchorBottom, 0, 70, StringToText(""), StringExternal("Param/Value/4E2F7B84"), "");
    autoEE18D22E_g = lp_show_player;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoEE18D22E_g, lv_player);
        if (lv_player < 0) { break; }
        gv_achievements_dialog[lv_player] = lv_dialog;
        gv_victory_button[lv_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(gf_GetDialogButtonText(lv_player)), PlayerGroupSingle(lv_player));
    }
    lv_current_offset = 100;
    auto300DF7D6_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto300DF7D6_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_banks[lv_player] != null)) {
            DialogControlCreateFromTemplate(lv_dialog, c_triggerControlTypePanel, "ZoneResults/AchievementsPlayer");
            lv_player_row = DialogControlLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), lp_show_player, c_anchorTopLeft, 0, lv_current_offset);
            DialogControlHookup(lv_player_row, c_triggerControlTypeLabel, "AchievementsName");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(lv_player), lp_show_player);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), lp_show_player);
            auto6D196538_ae = (gv_num_achievements - 1);
            lv_achievement_index = 0;
            for ( ; ( (auto6D196538_ai >= 0 && lv_achievement_index <= auto6D196538_ae) || (auto6D196538_ai < 0 && lv_achievement_index >= auto6D196538_ae) ) ; lv_achievement_index += auto6D196538_ai ) {
                lv_level = BankValueGetAsInt(gv_banks[lv_player], "C", gv_achievement_ids[lv_achievement_index]);
                DialogControlHookup(lv_player_row, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(IntToString(lv_achievement_index)));
                lv_tooltip_text = StringToText(gv_achievements_names[lv_achievement_index]);
                if ((lv_level > 0)) {
                    if ((lv_level > 1)) {
                        lv_tooltip_text = (lv_tooltip_text + StringExternal("Param/Value/E621DDBB") + FixedToText(lv_level, 0));
                    }

                    DialogControlSetVisible(DialogControlLastCreated(), lp_show_player, true);
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_achievement_icons[lv_achievement_index], lp_show_player);
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_tooltip_text, lp_show_player);
                }
                else {
                    DialogControlSetVisible(DialogControlLastCreated(), lp_show_player, false);
                }
            }
            lv_current_offset += 35;
        }

    }
}

void gf_HelpCommand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_help_dialog, PlayerGroupSingle(lp_player), true);
}

void gf_UpdateNetResourcesForPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_last;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_last = gv_player_net_resource_traded[lp_player];
    gv_player_net_resource_traded[lp_player] = (PlayerScoreValueGetAsFixed(lp_player, "MineralsReceived") - PlayerScoreValueGetAsFixed(lp_player, "MineralsDonated"));
    if ((lv_last != gv_player_net_resource_traded[lp_player])) {
        if ((lv_last > gv_player_net_resource_traded[lp_player])) {
            gf_GameMessage((FixedToText((lv_last - gv_player_net_resource_traded[lp_player]), c_fixedPrecisionAny) + StringExternal("Param/Value/C7618A52")), PlayerGroupSingle(lp_player));
        }
        else {
            gf_GameMessage((FixedToText((gv_player_net_resource_traded[lp_player] - lv_last), c_fixedPrecisionAny) + StringExternal("Param/Value/F08140B8")), PlayerGroupSingle(lp_player));
        }
    }

}

void gf_TradesCommand (int lp_requesting_player) {
    // Variable Declarations
    playergroup lv_display_to_players;
    int lv_display_player;
    playergroup lv_display_players;
    text lv_message;

    // Automatic Variable Declarations
    playergroup auto676FF216_g;

    // Variable Initialization
    lv_display_to_players = PlayerGroupEmpty();
    lv_display_players = PlayerGroupEmpty();

    // Implementation
    if ((gv_player_is_observer[lp_requesting_player] == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_all_players, lv_display_players);
        PlayerGroupAdd(lv_display_to_players, lp_requesting_player);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_teams[gv_player_team[lp_requesting_player]], lv_display_to_players);
        PlayerGroupAdd(lv_display_players, lp_requesting_player);
    }
    auto676FF216_g = lv_display_players;
    lv_display_player = -1;
    while (true) {
        lv_display_player = PlayerGroupNextPlayer(auto676FF216_g, lv_display_player);
        if (lv_display_player < 0) { break; }
        lv_message = StringToText("");
        gf_UpdateNetResourcesForPlayer(lv_display_player);
        lv_message = (lv_message + gv_player_names_colored[lv_display_player]);
        if ((gv_player_net_resource_traded[lv_display_player] < 1)) {
            lv_message = (lv_message + StringExternal("Param/Value/4355C44A"));
            lv_message = (lv_message + FixedToText((0.0 - gv_player_net_resource_traded[lv_display_player]), 0));
        }
        else {
            lv_message = (lv_message + StringExternal("Param/Value/BE296957"));
            lv_message = (lv_message + FixedToText((0.0 + gv_player_net_resource_traded[lv_display_player]), 0));
        }
        lv_message = (lv_message + StringExternal("Param/Value/61BEA48B"));
        gf_GameMessage(lv_message, lv_display_to_players);
    }
}

void gf_UpdateTeamInfoColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(gv_team_info_player_mineral[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_supply[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_armor[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_attack[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_range[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_regen[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_speed[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_armor[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_regen[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_slots[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_tanks[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_workers[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_nukes[lp_player], gv_player_state_colors[lp_player], PlayerGroupAll());
}

void gf_RefreshTeamInfoSup () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB215CC0D_g;

    // Variable Initialization

    // Implementation
    autoB215CC0D_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB215CC0D_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_team_info_player_supply[lv_player], (IntToText(PlayerGetPropertyInt(lv_player, c_playerPropSuppliesUsed)) + StringExternal("Param/Value/1CB8727B") + IntToText(PlayerGetPropertyInt(lv_player, c_playerPropSuppliesMade))), PlayerGroupAll());
    }
}

void gf_TeamInfoInit () {
    int init_i;

    // Variable Declarations
    int lv_x_offset;
    bool[17] lv_teammate_displayed;
    int lv_slot;
    int lv_header;
    int[17] lv_player_slot_counts;
    int lv_player;
    int lv_teammate;
    int lv_mainDialog;
    int lv_position;

    // Automatic Variable Declarations
    playergroup auto1B60C81C_g;
    playergroup auto016BB882_g;
    playergroup autoE9B603BB_g;
    playergroup auto530E5BC5_g;
    const int auto1A1D42E3_ae = 15;
    const int auto1A1D42E3_ai = 1;
    const int autoDFAEC939_ae = 7;
    const int autoDFAEC939_ai = 1;

    // Variable Initialization
    lv_header = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_player_slot_counts[init_i] = 1;
    }
    lv_mainDialog = c_invalidDialogId;

    // Implementation
    DialogCreate(1000, 300, c_anchorTopLeft, 10, 10, true);
    lv_mainDialog = DialogLastCreated();
    DialogSetImageVisible(lv_mainDialog, false);
    DialogSetVisible(lv_mainDialog, PlayerGroupAll(), true);
    DialogControlCreateFromTemplate(lv_mainDialog, c_triggerControlTypePanel, "ZoneTeammateStats/TeammateStateIcons");
    lv_header = DialogControlLastCreated();
    auto1B60C81C_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1B60C81C_g, lv_player);
        if (lv_player < 0) { break; }
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "PlayerMineralIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\icon-mineral.dds", PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "PlayerSupplyIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\icon-supply-terran_nobg.dds", PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "SpeedIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][4], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "RegenIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][3], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "RangeIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][2], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "AttackIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][1], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "ArmorIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][0], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerArmorIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][5], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerRegenIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][6], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerSlotsIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][7], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "TankIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][8], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "WorkerIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][9], PlayerGroupSingle(lv_player));
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "NukeIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][10], PlayerGroupSingle(lv_player));
    }
    auto016BB882_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto016BB882_g, lv_player);
        if (lv_player < 0) { break; }
        DialogControlCreateFromTemplate(lv_mainDialog, c_triggerControlTypePanel, "ZoneTeammateStats/TeammateState");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_team_info_player_dialogs[lv_player] = DialogControlLastCreated();
        DialogControlSetPosition(gv_team_info_player_dialogs[lv_player], PlayerGroupSingle(lv_player), c_anchorTopLeft, 100, ((0 * 30) + 30));
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "PlayerMinerals");
        gv_team_info_player_mineral[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "PlayerSupply");
        gv_team_info_player_supply[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "PlayerLosses");
        gv_team_info_player_losses[lv_player] = DialogControlLastCreated();
        if ((GameAttributeGameValue("8") == "0002")) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }

        DialogControlSetVisible(DialogControlLastCreated(), gv_all_observers, true);
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "AttackUp");
        gv_team_info_player_attack[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "ArmorUp");
        gv_team_info_player_armor[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "RangeUp");
        gv_team_info_player_range[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "RegenUp");
        gv_team_info_player_regen[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "SpeedUp");
        gv_team_info_player_speed[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerArmorUp");
        gv_team_info_player_bunker_armor[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerRegenUp");
        gv_team_info_player_bunker_regen[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerSlotsUp");
        gv_team_info_player_bunker_slots[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "TankCount");
        gv_team_info_player_tanks[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "WorkerCount");
        gv_team_info_player_workers[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "NukeCount");
        gv_team_info_player_nukes[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "NukeCount");
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "ArmorUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][0] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "AttackUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][1] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "RangeUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][2] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "RegenUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][3] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "SpeedUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][4] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerArmorUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][5] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerRegenUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][6] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerSlotsUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][7] = DialogControlLastCreated();
        TriggerAddEventDialogControl(gt_ButtonPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
        gf_UpdateTeamInfoColor(lv_player);
    }
    autoE9B603BB_g = gv_all_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE9B603BB_g, lv_player);
        if (lv_player < 0) { break; }
        lv_player_slot_counts[lv_player] = 0;
    }
    auto530E5BC5_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto530E5BC5_g, lv_player);
        if (lv_player < 0) { break; }
        lv_teammate = 0;
        for ( ; ( (auto1A1D42E3_ai >= 0 && lv_teammate <= auto1A1D42E3_ae) || (auto1A1D42E3_ai < 0 && lv_teammate >= auto1A1D42E3_ae) ) ; lv_teammate += auto1A1D42E3_ai ) {
            lv_teammate_displayed[lv_teammate] = false;
        }
        if ((gv_player_is_observer[lv_player] == true)) {
            lv_x_offset = 0;
        }
        else {
            lv_x_offset = 100;
        }
        DialogControlSetPosition(lv_header, PlayerGroupSingle(lv_player), c_anchorTopLeft, lv_x_offset, 0);
        lv_position = 0;
        for ( ; ( (autoDFAEC939_ai >= 0 && lv_position <= autoDFAEC939_ae) || (autoDFAEC939_ai < 0 && lv_position >= autoDFAEC939_ae) ) ; lv_position += autoDFAEC939_ai ) {
            lv_teammate = gv_position_players[lv_position];
            if (((lv_teammate_displayed[lv_teammate] == false) && (gv_player_alive[lv_teammate] == true))) {
                lv_teammate_displayed[lv_teammate] = true;
                if (((gv_player_is_observer[lv_player] == true) || (lv_player == 0) || (gv_player_team[lv_player] == gv_player_team[lv_teammate]))) {
                    DialogControlSetVisible(gv_team_info_player_dialogs[lv_teammate], PlayerGroupSingle(lv_player), true);
                }

                if ((((lv_player != lv_teammate) && ((gv_player_is_observer[lv_player] == true) || (lv_player == 0) || (gv_player_team[lv_player] == gv_player_team[lv_teammate]))))) {
                    DialogControlSetPosition(gv_team_info_player_dialogs[lv_teammate], PlayerGroupSingle(lv_player), c_anchorTopLeft, lv_x_offset, ((lv_player_slot_counts[lv_player] * 22) + 30));
                    lv_player_slot_counts[lv_player] = (lv_player_slot_counts[lv_player] + 1);
                }

            }

        }
    }
}

void gf_UpdateTeamInfoForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player_alive[lp_player] == true)) {
        libNtve_gf_SetDialogItemText(gv_team_info_player_armor[lp_player], IntToText(gv_team_info_player_armor_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_attack[lp_player], IntToText(gv_team_info_player_attack_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_range[lp_player], IntToText(gv_team_info_player_range_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_regen[lp_player], IntToText(gv_team_info_player_regen_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_speed[lp_player], IntToText(gv_team_info_player_speed_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_armor[lp_player], IntToText(gv_team_info_player_bunker_armor_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_regen[lp_player], IntToText(gv_team_info_player_bunker_regen_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_slots[lp_player], IntToText(gv_team_info_player_bunker_slots_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_nukes[lp_player], IntToText(gf_GetPlayerNumNukes(lp_player)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_workers[lp_player], IntToText(gv_player_num_workers[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_tanks[lp_player], IntToText(gv_player_tank_counts[lp_player]), PlayerGroupAll());
    }

}

void gf_RegisterTagForCleanup (int lp_tag) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_tags[gv_current_tag] != c_textTagNone)) {
        TextTagDestroy(gv_tags[gv_current_tag]);
    }

    gv_tags[gv_current_tag] = lp_tag;
    gv_current_tag = ModI((gv_current_tag + 1), 40);
}

void gf_SetupZoneControlReward () {
    // Variable Declarations
    int lv_bunk_index;

    // Automatic Variable Declarations
    const int autoA5DEE792_ae = 63;
    const int autoA5DEE792_ai = 1;

    // Variable Initialization

    // Implementation
    lv_bunk_index = 1;
    for ( ; ( (autoA5DEE792_ai >= 0 && lv_bunk_index <= autoA5DEE792_ae) || (autoA5DEE792_ai < 0 && lv_bunk_index >= autoA5DEE792_ae) ) ; lv_bunk_index += autoA5DEE792_ai ) {
        if ((gv_bunker_slot_is_real[lv_bunk_index] == true)) {
            libNtve_gf_CreateModelAtPoint("MarSaraGroundProps", gv_bunker_slot_centers[lv_bunk_index]);
            gv_zone_controller_beacon[lv_bunk_index] = libNtve_gf_ActorLastCreated();
        }

    }
}

void gf_SetupRewards () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("25") == "0001")) {
        gf_SetPeriodicTimerForTrigger(20.0, gt_ShardSpawn);
    }

    if ((GameAttributeGameValue("25") == "0003")) {
        gf_SetPeriodicTimerForTrigger(3.0, gt_tower);
        gf_GameMessage(StringExternal("Param/Value/9F0342D9"), gv_all_players_and_observers);
    }

    if ((GameAttributeGameValue("25") == "0004")) {
        gf_SetPeriodicTimerForTrigger(5.0, gt_ShardSpawn);
        gf_GameMessage(StringExternal("Param/Value/EEA092B6"), gv_all_players_and_observers);
    }

    if ((GameAttributeGameValue("25") == "0002")) {
        gf_GameMessage(StringExternal("Param/Value/BC1FC531"), gv_all_players_and_observers);
        gf_SetupZoneControlReward();
        gf_SetPeriodicTimerForTrigger(3.0, gt_ZoneControlDetection);
        gf_SetPeriodicTimerForTrigger(2.0, gt_ZoneControlReward);
    }

    if ((GameAttributeGameValue("25") == "0002")) {
        gf_GameMessage(StringExternal("Param/Value/6B24B648"), gv_all_players_and_observers);
    }

}

void gf_RewardMessage (point lp_position, int lp_killing_player, int lp_value, int lp_killed_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_killing_player >= 0) && (lp_killing_player <= 15)) && ((lp_killed_player == 0) || (gv_player_team[lp_killed_player] != gv_player_team[lp_killing_player])))) {
        TextTagCreate(TextWithColor((StringExternal("Param/Value/5B24D363") + IntToText(lp_value)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_killing_player, false))), 40, lp_position, 1.0, true, false, gv_teams_and_observers[gv_player_team[lp_killing_player]]);
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        gf_RegisterTagForCleanup(TextTagLastCreated());
    }

}

void gf_RedrawDeathNotifications () {
    // Variable Declarations
    int lv_index;
    int lv_player;
    text lv_string;

    // Automatic Variable Declarations
    int auto7DBB0B2B_ae;
    const int auto7DBB0B2B_ai = 1;

    // Variable Initialization

    // Implementation
    while ((gv_num_messages >= 1)) {
        lv_string = gv_messages[0];
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_string);
        Wait(8.0, c_timeGame);
        while (gv_message_lock) {
            Wait(1.0, c_timeGame);
        }
        gv_message_lock = true;
        auto7DBB0B2B_ae = gv_num_messages;
        lv_index = 0;
        for ( ; ( (auto7DBB0B2B_ai >= 0 && lv_index <= auto7DBB0B2B_ae) || (auto7DBB0B2B_ai < 0 && lv_index >= auto7DBB0B2B_ae) ) ; lv_index += auto7DBB0B2B_ai ) {
            gv_messages[lv_index] = gv_messages[(lv_index + 1)];
        }
        gv_num_messages = (gv_num_messages - 1);
        gv_message_lock = false;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
}

void gf_NotifyPlayerDied (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((gv_player_names_colored[lp_palyer] + StringExternal("Param/Value/90E4AD59")));
}

void gf_NotifyPlayerLeave (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((gv_player_names_colored[lp_palyer] + StringExternal("Param/Value/8D5E846C")));
}

void gf_AddMessage (text lp_message) {
    // Variable Declarations
    bool lv_process_needed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (gv_message_lock) {
        Wait(1.0, c_timeGame);
    }
    gv_message_lock = true;
    lv_process_needed = (gv_num_messages == 0);
    gv_messages[gv_num_messages] = lp_message;
    gv_num_messages = (gv_num_messages + 1);
    gv_message_lock = false;
    if ((lv_process_needed == true)) {
        gf_RedrawDeathNotifications();
    }

}

int gf_GetBunkerIndex (unit lp_bunker) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_bunker);
    lv_x = RoundI(((PointGetX(lv_point) - 20.5) / 10.0));
    lv_y = RoundI(((90.0 - PointGetY(lv_point)) / 10.0));
    return (lv_x + RoundI((lv_y * 8.0)));
}

void gf_OnBunkerCreated (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_locations[lv_bunker_index] = UnitGetPosition(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = lp_player;
    gv_bunker_retire_status[lv_bunker_index] = false;
    gv_bunker_merc_status[lv_bunker_index] = false;
    gv_bunkers[lv_bunker_index] = lp_bunker;
    UnitGroupAdd(gv_structuresGroup[lp_player], lp_bunker);
    UnitControlGroupAddUnit(UnitGetOwner(lp_bunker), 2, lp_bunker);
}

void gf_OnBunkerCreated3 (int lp_player, unit lp_bunker, bool lp_starting_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_locations[lv_bunker_index] = UnitGetPosition(lp_bunker);
    gv_bunker_rally_type[lv_bunker_index] = -1;
    gv_bunker_spawn_points[lv_bunker_index] = PointWithOffset(gv_bunker_locations[lv_bunker_index], gv_player_spawn_offsets[lp_player][0], gv_player_spawn_offsets[lp_player][1]);
    gv_bunker_merc_status[lv_bunker_index] = false;
    UnitGroupAdd(gv_structuresGroup[lp_player], lp_bunker);
    UnitControlGroupAddUnit(lp_player, 2, lp_bunker);
    if ((lp_starting_bunker == false)) {
        gf_WriteEventForAllPlayers("bunker_started", ("`index`: " + IntToString(lv_bunker_index) + ", `player`: `" + gv_player_handles[lp_player] + "` "));
    }

     TriggerAddEventUnitOrder(gt_OnRallyChange, UnitRefFromUnit(lp_bunker), AbilityCommand("Rally", 0));
    TriggerAddEventUnitDied(gt_BunkerDestoryed, UnitRefFromUnit(lp_bunker));
}

void gf_OnScvCreated (unit lp_worker) {
    // Variable Declarations
    int lv_player;
    int lv_untitledVariable001;
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_worker);
    if ((UnitGroupHasUnit(gv_structuresGroup2[lv_player], lp_worker) == false)) {
        if ((gv_boosted_production == true)) {
            UnitBehaviorAdd(lp_worker, "ChronoBoostEnergyCost", lp_worker, 1);
        }

        UnitGroupAdd(gv_structuresGroup2[lv_player], lp_worker);
        gf_UpdateSingleWorker(lp_worker, gf_PlayerHasNuke(lv_player));
        UnitControlGroupAddUnit(lv_player, 3, lp_worker);
        TriggerAddEventUnitDied(gt_ScvDied, UnitRefFromUnit(lp_worker));
        TriggerAddEventUnitCreated(gt_TurretCreated, UnitRefFromUnit(lp_worker), "BuildAutoTurret", null);
    }

}

fixed gf_TestHugeNukeAchievement (unit lp_unit) {
    // Variable Declarations
    fixed lv_total_kills;
    fixed lv_num_kills;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_unit, 4) == 0.0)) {
        return 0.0;
    }

    lv_total_kills = UnitGetPropertyFixed(lp_unit, c_unitPropKills, c_unitPropCurrent);
    lv_num_kills = (lv_total_kills - UnitGetCustomValue(lp_unit, 3));
    if ((lv_num_kills <= 0.0)) {
        return 0.0;
    }

    gf_GameMessage(TextWithColor((IntToText(RoundI(lv_num_kills)) + StringExternal("Param/Value/7CEBE995")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))), gv_teams_and_observers[gv_player_team[EventPlayer()]]);
    UnitSetCustomValue(lp_unit, 3, lv_total_kills);
    if ((TimerGetElapsed(gv_game_timer) <= 400.0) && (lv_num_kills >= 103.0)) {
        gf_MarkAchievementCompleted("mn", UnitGetOwner(lp_unit), RoundI(gf_GetAverageOpponentElo(UnitGetOwner(lp_unit))));
    }

    return 0.0;
}

void gf_UpdateAllWorkers (int lp_player) {
    // Variable Declarations
    bool lv_player_has_nuke;
    actor lv_stored_actor;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDF5EA8CF_g;
    int autoDF5EA8CF_u;

    // Variable Initialization

    // Implementation
    lv_player_has_nuke = gf_PlayerHasNuke(lp_player);
    autoDF5EA8CF_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF5EA8CF_u = UnitGroupCount(autoDF5EA8CF_g, c_unitCountAll);
    for (;; autoDF5EA8CF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDF5EA8CF_g, autoDF5EA8CF_u);
        if (lv_unit == null) { break; }
        if (((UnitGetType(lv_unit) == "SCV") || (UnitGetType(lv_unit) == "Probe") || (UnitGetType(lv_unit) == "Drone"))) {
            gf_UpdateSingleWorker(lv_unit, lv_player_has_nuke);
        }

    }
}

void gf_UpdateSingleWorker (unit lp_worker, bool lp_player_has_nuke) {
    // Variable Declarations
    actor lv_stored_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_stored_actor = libHots_gf_ActorForUnit(lp_worker, 1);
    if ((lp_player_has_nuke == true)) {
        if ((lv_stored_actor == null)) {
            libNtve_gf_AttachModelToUnit(lp_worker, "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
            libHots_gf_StoreActorForUnit(lp_worker, 1, libNtve_gf_ActorLastCreated());
        }

    }
    else {
        if ((lv_stored_actor == null)) {
        }
        else {
            libNtve_gf_KillModel(lv_stored_actor);
            libHots_gf_StoreActorForUnit(lp_worker, 1, null);
        }
    }
}

bool gf_PlayerHasNuke (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitMagazineCount(gv_ghost_academies[lp_player], "ArmSiloWithNuke") >= 1);
}

int gf_GetPlayerNumNukes (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitMagazineCount(gv_ghost_academies[lp_player], "ArmSiloWithNuke");
}

void gf_SetDeadPlayerColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player_left_game[lp_player] == true)) {
        gv_player_state_colors[lp_player] = Color(0.00, 0.00, 0.00);
    }
    else {
        gv_player_state_colors[lp_player] = Color(25.49, 25.49, 25.49);
    }
}

void gf_TestVictory () {
    // Variable Declarations
    bool lv_game_might_be_over;
    int lv_player;
    int lv_alive_team;

    // Automatic Variable Declarations
    playergroup auto6884B796_g;
    playergroup autoFF8AFB91_g;
    playergroup autoCF996047_g;
    playergroup auto298AE089_g;

    // Variable Initialization
    lv_game_might_be_over = true;
    lv_alive_team = -1;

    // Implementation
    while (gv_game_over_test) {
        Wait(1.0, c_timeGame);
    }
    gv_game_over_test = true;
    if ((gv_game_over == true)) {
        return ;
    }

    auto6884B796_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6884B796_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_is_observer[lv_player] == false) && (gv_player_alive[lv_player] == true))) {
            if (((lv_alive_team == gv_player_team[lv_player]) || (lv_alive_team == -1))) {
                lv_alive_team = gv_player_team[lv_player];
            }
            else {
                lv_game_might_be_over = false;
            }
        }

    }
    if ((lv_game_might_be_over == true)) {
        gv_winning_team = lv_alive_team;
        gf_WriteMatchEndEvent(gv_event_players);
        gv_game_over = true;
    }

    gv_game_over_test = false;
    if ((gv_game_over == false)) {
        return ;
    }

    gf_ComputeFinalScores(gv_winning_team);
    gf_TestVictoryBasedAcievements(gv_winning_team);
    autoFF8AFB91_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoFF8AFB91_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_team[lv_player] == lv_alive_team)) {
            gf_RecordUpdateGameVictory(lv_player);
        }

    }
    gf_RecordLastGameResults(lv_alive_team);
    autoCF996047_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCF996047_g, lv_player);
        if (lv_player < 0) { break; }
        gf_SaveBankIfFullGame(lv_player);
    }
    gf_CreateResultsButtons();
    gf_CreateResultsDialog(lv_alive_team, gv_all_players_and_observers);
    Wait(60.0, c_timeGame);
    auto298AE089_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto298AE089_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_team[lv_player] == gv_winning_team)) {
            GameOver(lv_player, c_gameOverVictory, false, false);
        }
        else {
            if ((gv_player_is_observer[lv_player] == true)) {
                GameOver(lv_player, c_gameOverTie, false, false);
            }
            else {
                GameOver(lv_player, c_gameOverDefeat, false, false);
            }
        }
    }
}

void gf_OnPlayerDead (int lp_player) {
    // Variable Declarations
    fixed lv_num_alive_teammates;
    int lv_teammate;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto4A0D2F01_g;
    playergroup auto20CF516A_g;
    unitgroup autoF739310F_g;
    int autoF739310F_u;
    unitgroup auto5C8128CE_g;
    int auto5C8128CE_u;

    // Variable Initialization

    // Implementation
    gf_UpdatePlayerColor(lp_player);
    gf_UpdateTeamInfoColor(lp_player);
    if ((gv_player_alive[lp_player] == false)) {
        return ;
    }

    gv_player_alive[lp_player] = false;
    gf_SetDeadPlayerColor(lp_player);
    gf_UpdatePlayerColor(lp_player);
    gf_UpdateTeamInfoColor(lp_player);
    auto4A0D2F01_g = gv_teams[gv_player_team[lp_player]];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto4A0D2F01_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((gv_player_alive[lv_teammate] == true)) {
            lv_num_alive_teammates += 1.0;
        }

    }
    auto20CF516A_g = gv_teams[gv_player_team[lp_player]];
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto20CF516A_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        if ((gv_player_alive[lv_teammate] == true)) {
            PlayerModifyPropertyInt(lv_teammate, c_playerPropMinerals, c_playerPropOperAdd, RoundI((PlayerGetPropertyInt(lp_player, c_playerPropMinerals) / lv_num_alive_teammates)));
        }

    }
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    gf_UpdateLeaderboard(true);
    autoF739310F_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF739310F_u = UnitGroupCount(autoF739310F_g, c_unitCountAll);
    for (;; autoF739310F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF739310F_g, autoF739310F_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    auto5C8128CE_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C8128CE_u = UnitGroupCount(auto5C8128CE_g, c_unitCountAll);
    for (;; auto5C8128CE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5C8128CE_g, auto5C8128CE_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    gf_TestTeamDead(gv_player_team[lp_player]);
    gf_TestVictory();
}

void gf_TestTeamDead (int lp_team) {
    // Variable Declarations
    int lv_team;
    int lv_num_teams_alive;
    int lv_player;
    bool lv_found_alive_player;

    // Automatic Variable Declarations
    playergroup auto76173DBA_g;
    const int auto7ADDBF30_ae = 3;
    const int auto7ADDBF30_ai = 1;
    playergroup auto01E39EF6_g;

    // Variable Initialization

    // Implementation
    if ((gv_team_alive[lp_team] == false)) {
        return ;
    }

    auto76173DBA_g = gv_teams[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto76173DBA_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            lv_found_alive_player = true;
            return ;
        }

    }
    gv_team_alive[lp_team] = false;
    lv_team = 0;
    for ( ; ( (auto7ADDBF30_ai >= 0 && lv_team <= auto7ADDBF30_ae) || (auto7ADDBF30_ai < 0 && lv_team >= auto7ADDBF30_ae) ) ; lv_team += auto7ADDBF30_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_num_teams_alive += 1;
        }

    }
    if ((lv_num_teams_alive <= 2)) {
        gv_reveal_because_two_team_left = true;
    }

    gf_UpdatePlayerNames(gv_all_players_and_observers);
    auto01E39EF6_g = gv_teams[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto01E39EF6_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerGroupAdd(gv_dead_team_players, lv_player);
        VisRevealerCreate(lv_player, RegionEntireMap());
    }
}

void gf_ForceTeammateLeave (int lp_player) {
    // Variable Declarations
    int lv_palyer;

    // Automatic Variable Declarations
    playergroup auto232826CE_g;

    // Variable Initialization

    // Implementation
    gf_GameMessage(IntToText(lp_player), PlayerGroupActive());
    auto232826CE_g = gv_teams[gv_player_team[lp_player]];
    lv_palyer = -1;
    while (true) {
        lv_palyer = PlayerGroupNextPlayer(auto232826CE_g, lv_palyer);
        if (lv_palyer < 0) { break; }
        if ((lp_player != lv_palyer)) {
        }

    }
}

void gf_OnPlayerLeave (int lp_player) {
    // Variable Declarations
    int lv_player;
    int lv_player_race;
    int lv_bunker_slot;
    int lv_teammate;
    int lv_possible_teammate;
    unit lv_unit;
    unit lv_unit2;

    // Automatic Variable Declarations
    const int auto0C76BC50_ae = 16;
    const int auto0C76BC50_ai = 1;
    unitgroup auto78359B8E_g;
    int auto78359B8E_u;
    const int auto356FEFDF_ae = 63;
    const int auto356FEFDF_ai = 1;
    unitgroup auto3DD62C4A_g;
    int auto3DD62C4A_u;
    unitgroup auto1DE84C8F_g;
    int auto1DE84C8F_u;

    // Variable Initialization
    lv_teammate = -1;
    lv_possible_teammate = -1;

    // Implementation
    lv_player = lp_player;
    gf_WriteEventForAllPlayers("player_leave", ("`player`: `" + gv_player_handles[lv_player] + "`,  `position`: " + IntToString(gv_player_positions[lv_player])));
    if ((PlayerGroupHasPlayer(gv_all_players, lv_player) == false)) {
        return ;
    }

    lv_player_race = gv_player_race_index[lv_player];
    gv_player_left_game[lv_player] = true;
    if ((gv_player_revealers[lv_player] != null)) {
        VisRevealerDestroy(gv_player_revealers[lv_player]);
    }

    gf_SetDeadPlayerColor(lv_player);
    gf_UpdatePlayerColor(lv_player);
    if ((gv_player_alive[lv_player] == true)) {
    }
    else {
        return ;
    }
    lv_possible_teammate = 0;
    for ( ; ( (auto0C76BC50_ai >= 0 && lv_possible_teammate <= auto0C76BC50_ae) || (auto0C76BC50_ai < 0 && lv_possible_teammate >= auto0C76BC50_ae) ) ; lv_possible_teammate += auto0C76BC50_ai ) {
        if (((gv_player_team[lv_possible_teammate] == gv_player_team[lv_player]) && (gv_player_alive[lv_possible_teammate] == true) && (lv_possible_teammate != lv_player))) {
            lv_teammate = lv_possible_teammate;
        }

    }
    if ((lv_teammate >= 1)) {
        gv_player_inherited_bunks[lv_teammate] = true;
        UnitGroupAddUnitGroup(gv_structuresGroup[lv_teammate], gv_structuresGroup[lv_player]);
        lv_bunker_slot = 1;
        for ( ; ( (auto356FEFDF_ai >= 0 && lv_bunker_slot <= auto356FEFDF_ae) || (auto356FEFDF_ai < 0 && lv_bunker_slot >= auto356FEFDF_ae) ) ; lv_bunker_slot += auto356FEFDF_ai ) {
            if ((gv_bunker_owners[lv_bunker_slot] == lv_player)) {
                gv_bunker_owners[lv_bunker_slot] = lv_teammate;
            }

        }
        auto3DD62C4A_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3DD62C4A_u = UnitGroupCount(auto3DD62C4A_g, c_unitCountAll);
        for (;; auto3DD62C4A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto3DD62C4A_g, auto3DD62C4A_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == gv_race_worker_types[lv_player_race]) || (UnitGetType(lv_unit) == gv_race_research_facility_types[lv_player_race]) || (UnitGetType(lv_unit) == "GhostAcademy"))) {
                UnitRemove(lv_unit);
            }
            else {
                if (((UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][0]) || (UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][1]))) {
                    auto1DE84C8F_g = UnitCargoGroup(lv_unit);
                    auto1DE84C8F_u = UnitGroupCount(auto1DE84C8F_g, c_unitCountAll);
                    for (;; auto1DE84C8F_u -= 1) {
                        lv_unit2 = UnitGroupUnitFromEnd(auto1DE84C8F_g, auto1DE84C8F_u);
                        if (lv_unit2 == null) { break; }
                        if ((UnitGetType(lv_unit2) == gv_race_worker_types[lv_player_race])) {
                            UnitKill(lv_unit2);
                        }

                    }
                    if ((UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][0])) {
                        gv_player_bunker_counts[UnitGetOwner(lv_unit)] += 1;
                    }
                    else {
                        gv_player_merc_bunker_counts[UnitGetOwner(lv_unit)] += 1;
                    }
                    UnitSetOwner(lv_unit, lv_teammate, true);
                    gv_bunker_merc_status[gf_GetBunkerIndex(lv_unit)] = false;
                    UnitControlGroupAddUnit(lv_teammate, 2, lv_unit);
                    PlayerModifyPropertyInt(UnitGetOwner(lv_unit), c_playerPropMinerals, c_playerPropOperAdd, 550);
                    UnitIssueOrder(lv_unit, Order(AbilityCommand("InstantRetireStructure", 0)), c_orderQueueReplace);
                    gf_GrantStructure(lv_teammate, lv_unit);
                }
                else {
                    if (((UnitGetType(lv_unit) == "SiegeBreakerSieged") || (UnitGetType(lv_unit) == "SiegeBreaker"))) {
                        gv_player_tank_counts[lv_teammate] += 1;
                        gv_player_tank_counts[lv_player] -= 1;
                        UnitControlGroupAddUnit(lv_teammate, 5, lv_unit);
                    }

                    if (((UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][0][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][0][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][1][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][1][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][2][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][2][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][3][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][3][1]))) {
                        UnitControlGroupAddUnit(lv_teammate, 1, lv_unit);
                    }

                    UnitSetOwner(lv_unit, lv_teammate, true);
                }
            }
        }
    }
    else {
        auto78359B8E_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto78359B8E_u = UnitGroupCount(auto78359B8E_g, c_unitCountAll);
        for (;; auto78359B8E_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto78359B8E_g, auto78359B8E_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][0]) || (UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][1]))) {
                if ((UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent) < RoundI((0.25 * UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent))))) {
                    UnitCreate(1, "NaturalMineralsRed", 0, 0, UnitGetPosition(lv_unit), 270.0);
                    TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
                }

                UnitCreate(1, "NaturalMineralsRed", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

            if (((UnitGetType(lv_unit) == "SupplyDepot") || (UnitGetType(lv_unit) == "SupplyDepotLowered"))) {
                UnitCreate(1, "PalletMinerals", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

            if (((UnitGetType(UnitLastCreated()) == "SensorTower") || (UnitGetType(lv_unit) == "HiveMindEmulator"))) {
                UnitCreate(1, "MineralCrystal", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

        }
        UnitRemove(lv_unit);
    }
    gf_OnPlayerDead(lv_player);
    gf_NotifyPlayerLeave(lv_player);
}

void gf_TestPlayerDead (int lp_player) {
    // Variable Declarations
    unit lv_possible_bunker;
    int lv_teammate;
    int lv_slot;

    // Automatic Variable Declarations
    const int autoA6BAEF31_ae = 63;
    const int autoA6BAEF31_ai = 1;
    unitgroup auto6E6881B1_g;
    int auto6E6881B1_u;

    // Variable Initialization

    // Implementation
    lv_slot = 1;
    for ( ; ( (autoA6BAEF31_ai >= 0 && lv_slot <= autoA6BAEF31_ae) || (autoA6BAEF31_ai < 0 && lv_slot >= autoA6BAEF31_ae) ) ; lv_slot += autoA6BAEF31_ai ) {
        if ((gv_bunker_owners[lv_slot] == lp_player)) {
            return ;
        }

    }
    auto6E6881B1_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E6881B1_u = UnitGroupCount(auto6E6881B1_g, c_unitCountAll);
    for (;; auto6E6881B1_u -= 1) {
        lv_possible_bunker = UnitGroupUnitFromEnd(auto6E6881B1_g, auto6E6881B1_u);
        if (lv_possible_bunker == null) { break; }
        if ((UnitGetType(lv_possible_bunker) == "Bunker")) {
            return ;
        }

    }
    gf_OnPlayerDead(lp_player);
    gf_WriteEventForAllPlayers("player_died", ("`player`: `" + gv_player_handles[lp_player] + "`"));
    gf_NotifyPlayerDied(lp_player);
}

string gf_GetSectionName (bank lp_bank) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankSectionCount(lp_bank) == 0)) {
        return "";
    }
    else {
        return BankSectionName(lp_bank, 0);
    }
}

void gf_MutePlayerCommand (int lp_muting_player, string lp_muted_player_string, bool lp_mute) {
    // Variable Declarations
    playergroup lv_group;
    int lv_team;
    string lv_muted_string;
    int lv_player;
    int lv_mute_player;

    // Automatic Variable Declarations
    int auto2CFA43DB_ae;
    const int auto2CFA43DB_ai = 1;
    playergroup autoC8712720_g;

    // Variable Initialization
    lv_group = PlayerGroupEmpty();
    lv_muted_string = "";
    lv_mute_player = -1;

    // Implementation
    lv_mute_player = StringToInt(lp_muted_player_string);
    if ((lv_mute_player == 0)) {
        auto2CFA43DB_ae = gv_num_teams;
        lv_team = 0;
        for ( ; ( (auto2CFA43DB_ai >= 0 && lv_team <= auto2CFA43DB_ae) || (auto2CFA43DB_ai < 0 && lv_team >= auto2CFA43DB_ae) ) ; lv_team += auto2CFA43DB_ai ) {
            if ((lv_team == gv_num_teams)) {
                lv_group = gv_all_observers;
            }
            else {
                lv_group = gv_teams[lv_team];
            }
            autoC8712720_g = lv_group;
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoC8712720_g, lv_player);
                if (lv_player < 0) { break; }
                if ((lv_player != 0)) {
                    lv_muted_string = "";
                    if ((gv_player_muted[lp_muting_player][lv_player] == true)) {
                        lv_muted_string = " (muted)";
                    }

                    gf_GameMessage((StringToText(IntToString(lv_player)) + StringExternal("Param/Value/E27D0006") + gv_player_names_colored[lv_player] + StringToText(lv_muted_string)), PlayerGroupSingle(lp_muting_player));
                }

            }
        }
    }
    else {
        if ((lp_mute != gv_player_muted[lp_muting_player][lv_mute_player])) {
            gf_GameMessage((gv_player_names_colored[lp_muting_player] + StringExternal("Param/Value/30280883") + gv_player_names_colored[lv_mute_player]), PlayerGroupSingle(lp_muting_player));
        }

        gv_player_muted[lp_muting_player][lv_mute_player] = lp_mute;
    }
}

void gf_InitChat () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ErrorDisplay");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 50, 400);
    if ((gv_custom_chat_enabled == true)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        return ;
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ZoneChat");
    gv_customChatRecord.lv_skunkChat01 = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ZoneChat/ContainerFrame");
    gv_customChatRecord.lv_messages_Container = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "UIContainer/FullscreenUpperContainer/Recipient");
    gv_customChatRecord.lv_recipient = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "$parent/$parent/MessageLogDialog");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 5000, 5000);
}

void gf_DialogItemRegister (int lp_dialogItem, int lp_dialogItemEvent, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventDialogControl(lp_trigger, c_playerAny, lp_dialogItem, lp_dialogItemEvent);
}

void gf_SendChatMessage (string lp_message, playergroup lp_recipientPlayerGroup, int lp_sendingPlayer, text lp_nameofRecipient) {
    // Automatic Variable Declarations
    // Implementation
    gf_DisplayChatMessage((StringToText("") + lp_nameofRecipient + StringExternal("Param/Value/E0072A15") + gv_player_names_colored[lp_sendingPlayer] + StringExternal("Param/Value/30165E8A") + gf_EmojifyStringAsText(lp_message)), lp_recipientPlayerGroup, lp_sendingPlayer);
}

void gf_DisplayChatMessage (text lp_message, playergroup lp_recipientPlayerGroup, int lp_sendingPlayer) {
    // Variable Declarations
    playergroup lv_filtered_group;
    int lv_chat_message;
    bool lv_found_real_player;
    int lv_player;
    int lv_length;

    // Automatic Variable Declarations
    playergroup autoE884188A_g;
    playergroup auto4ADD4924_g;
    playergroup autoBFFB14A8_g;

    // Variable Initialization
    lv_filtered_group = PlayerGroupEmpty();
    lv_chat_message = c_invalidDialogControlId;

    // Implementation
    autoE884188A_g = lp_recipientPlayerGroup;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE884188A_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_muted[lv_player][lp_sendingPlayer] == false)) {
            libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(lv_player), lv_filtered_group);
        }

    }
    auto4ADD4924_g = lv_filtered_group;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4ADD4924_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) || (lv_player == 0))) {
            lv_found_real_player = true;
        }

    }
    if ((lv_found_real_player == false)) {
        return ;
    }

    while (gv_chat_lock) {
        Wait(1.0, c_timeGame);
    }
    gv_chat_lock = true;
    DialogControlCreateInPanelFromTemplate(gv_customChatRecord.lv_messages_Container, c_triggerControlTypeLabel, "ZoneChat/MessageTemplate");
    lv_chat_message = DialogControlLastCreated();
    DialogControlSetVisible(lv_chat_message, lv_filtered_group, true);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_message, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(lv_chat_message, "ChatDisplay", PlayerGroupAll());
    DialogControlSetPosition(lv_chat_message, PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
    autoBFFB14A8_g = lv_filtered_group;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoBFFB14A8_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_customChatRecord.lv_messages_Bottom[lv_player] != c_invalidDialogControlId)) {
            DialogControlSetPositionRelative(gv_customChatRecord.lv_messages_Bottom[lv_player], PlayerGroupSingle(lv_player), c_anchorBottomLeft, DialogControlLastCreated(), c_anchorTopLeft, 0, 0);
        }

        gv_customChatRecord.lv_messages_Bottom[lv_player] = DialogControlLastCreated();
    }
    gv_chat_lock = false;
    DialogControlFadeTransparency(lv_chat_message, PlayerGroupAll(), 25.0, 100.0);
}

void gf_GameMessage (text lp_message, playergroup lp_recipientPlayerGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_custom_chat_enabled == true)) {
        gf_DisplayChatMessage(lp_message, lp_recipientPlayerGroup, 0);
    }
    else {
        UIDisplayMessage(lp_recipientPlayerGroup, c_messageAreaChat, lp_message);
    }
}

text gf_EmojifyStringAsText (string lp_inputText) {
    // Variable Declarations
    int lv_a;
    text lv_text;

    // Automatic Variable Declarations
    int auto011CFF46_ae;
    const int auto011CFF46_ai = 1;

    // Variable Initialization
    lv_text = StringToText(lp_inputText);

    // Implementation
    auto011CFF46_ae = UserDataInstanceCount("Emoticons");
    lv_a = 1;
    for ( ; ( (auto011CFF46_ai >= 0 && lv_a <= auto011CFF46_ae) || (auto011CFF46_ai < 0 && lv_a >= auto011CFF46_ae) ) ; lv_a += auto011CFF46_ai ) {
        lv_text = TextReplaceWord(lv_text, UserDataGetText("Emoticons", UserDataInstance("Emoticons", lv_a), "Name", 1), UserDataGetText("Emoticons", UserDataInstance("Emoticons", lv_a), "Image", 1), c_stringReplaceAll, c_stringCase);
    }
    return lv_text;
}

void gf_WriteMatchEndEvent (playergroup lp_event_players) {
    // Variable Declarations
    bool lv_is_first;
    int lv_team;
    string lv_winning_team_string;

    // Automatic Variable Declarations
    const int auto4E5831AC_ae = 3;
    const int auto4E5831AC_ai = 1;

    // Variable Initialization
    lv_is_first = true;
    lv_winning_team_string = "";

    // Implementation
    lv_team = 0;
    for ( ; ( (auto4E5831AC_ai >= 0 && lv_team <= auto4E5831AC_ae) || (auto4E5831AC_ai < 0 && lv_team >= auto4E5831AC_ae) ) ; lv_team += auto4E5831AC_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            if ((lv_is_first == false)) {
                lv_winning_team_string = (lv_winning_team_string + ",");
            }

            lv_winning_team_string = (lv_winning_team_string + IntToString(lv_team));
            lv_is_first = false;
        }

    }
    gf_WriteEventForPlayers(lp_event_players, "match_end", ("`winning_team`: `" + lv_winning_team_string + "`"));
}

void gf_MatchEndCommand (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(gv_event_players, lp_player) == true)) {
        gf_WriteMatchEndEvent(PlayerGroupSingle(lp_player));
    }

}

void gf_WriteDebug (string lp_key, text lp_text) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto575773CA_g;

    // Variable Initialization

    // Implementation
    auto575773CA_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto575773CA_g, lv_player);
        if (lv_player < 0) { break; }
        BankValueSetFromText(gv_debug_banks[lv_player], "a", lp_key, lp_text);
        BankSave(gv_debug_banks[lv_player]);
    }
}

void gf_WriteEventForAllPlayers (string lp_type, string lp_text) {
    // Automatic Variable Declarations
    // Implementation
    gf_WriteEventForPlayers(gv_event_players, lp_type, lp_text);
}

void gf_WriteEventForPlayers (playergroup lp_observers, string lp_type, string lp_text) {
    // Variable Declarations
    text lv_combined;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto99560D1F_g;

    // Variable Initialization

    // Implementation
    if ((gv_game_over == true)) {
        return ;
    }

    lv_combined = (StringExternal("Param/Value/68CF60A9") + StringExternal("Param/Value/07B79955") + StringToText(lp_type) + StringExternal("Param/Value/4FF34724") + FixedToText(TimerGetElapsed(gv_game_timer), c_fixedPrecisionAny) + StringExternal("Param/Value/B12C78CF") + StringToText(lp_text) + StringExternal("Param/Value/73964D02"));
    auto99560D1F_g = lp_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto99560D1F_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_event_banks[lv_player] != null)) {
            BankValueSetFromText(gv_event_banks[lv_player], IntToString(gv_game_id), IntToString(gv_event_number), lv_combined);
            BankSave(gv_event_banks[lv_player]);
        }

    }
    gv_event_number += 1;
}

void gf_InitDebugBanks () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF0F41680_g;

    // Variable Initialization

    // Implementation
    autoF0F41680_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF0F41680_g, lv_player);
        if (lv_player < 0) { break; }
        BankLoad("Debug", lv_player);
        gv_debug_banks[lv_player] = BankLastCreated();
        BankSectionRemove(BankLastCreated(), "a");
    }
}

void gf_InitEventBanks () {
    // Variable Declarations
    bool lv_is_first;
    string lv_startstr;
    int lv_sec_count;
    int lv_sec_num;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto6F11DA47_g;
    playergroup auto78B9B4F3_g;
    int auto3FE4E636_ae;
    const int auto3FE4E636_ai = 1;
    playergroup auto0D807D23_g;
    playergroup autoE948E0BE_g;

    // Variable Initialization
    lv_is_first = true;
    lv_startstr = "";

    // Implementation
    auto6F11DA47_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6F11DA47_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) && ((GameAttributeGameValue("8") == "0001") || (PlayerGroupHasPlayer(gv_all_observers, lv_player) == true)))) {
            PlayerGroupAdd(gv_event_players, lv_player);
        }

    }
    auto78B9B4F3_g = gv_event_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto78B9B4F3_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerGroupAdd(gv_event_players, lv_player);
        BankLoad("Events", lv_player);
        gv_event_banks[lv_player] = BankLastCreated();
        lv_sec_count = BankSectionCount(gv_event_banks[lv_player]);
        auto3FE4E636_ae = (BankSectionCount(gv_event_banks[lv_player]) - 1);
        lv_sec_num = 0;
        for ( ; ( (auto3FE4E636_ai >= 0 && lv_sec_num <= auto3FE4E636_ae) || (auto3FE4E636_ai < 0 && lv_sec_num >= auto3FE4E636_ae) ) ; lv_sec_num += auto3FE4E636_ai ) {
            BankSectionRemove(gv_event_banks[lv_player], BankSectionName(gv_event_banks[lv_player], lv_sec_num));
        }
    }
    lv_startstr = (lv_startstr + "`players`: [");
    auto0D807D23_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0D807D23_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lv_is_first == false)) {
            lv_startstr = (lv_startstr + ", ");
        }

        lv_is_first = false;
        lv_startstr = (lv_startstr + "{ `handle`: `");
        lv_startstr = (lv_startstr + gv_player_handles[lv_player]);
        lv_startstr = (lv_startstr + "`, ");
        lv_startstr = (lv_startstr + "`slot`: ");
        lv_startstr = (lv_startstr + IntToString(gv_player_positions[lv_player]));
        lv_startstr = (lv_startstr + ", `team`: ");
        lv_startstr = (lv_startstr + IntToString(gv_player_team[lv_player]));
        lv_startstr = (lv_startstr + ", `color`: `");
        lv_startstr = (lv_startstr + libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
        lv_startstr = (lv_startstr + "`} ");
    }
    lv_startstr = (lv_startstr + "], ");
    lv_startstr = (lv_startstr + "`observers`: [");
    lv_is_first = true;
    autoE948E0BE_g = gv_all_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE948E0BE_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lv_is_first == false)) {
            lv_startstr = (lv_startstr + ", ");
        }

        lv_is_first = false;
        lv_startstr = (lv_startstr + "{ `handle`: `");
        lv_startstr = (lv_startstr + gv_player_handles[lv_player]);
        lv_startstr = (lv_startstr + "`} ");
    }
    lv_startstr = (lv_startstr + "]");
    gf_WriteEventForAllPlayers("match_start", lv_startstr);
}

timer gf_OneshotGameTime (fixed lp_time, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    return gf_InternalOneshot(lp_time, lp_trigger, c_timeGame);
}

timer gf_OneshotRealTime (fixed lp_time, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    return gf_InternalOneshot(lp_time, lp_trigger, c_timeReal);
}

timer gf_InternalOneshot (fixed lp_time, trigger lp_trigger, int lp_type) {
    // Variable Declarations
    int lv_i;
    timer lv_timer;

    // Automatic Variable Declarations
    int autoBEDFA423_ae;
    const int autoBEDFA423_ai = 1;

    // Variable Initialization

    // Implementation
    lv_timer = TimerCreate();
    TriggerAddEventTimer(lp_trigger, lv_timer);
    TimerStart(lv_timer, lp_time, false, lp_type);
    autoBEDFA423_ae = (gv_timer_length - 1);
    lv_i = 0;
    for ( ; ( (autoBEDFA423_ai >= 0 && lv_i <= autoBEDFA423_ae) || (autoBEDFA423_ai < 0 && lv_i >= autoBEDFA423_ae) ) ; lv_i += autoBEDFA423_ai ) {
        if (((gv_registeredTimer[lv_i] == null) || (TimerGetRemaining(gv_registeredTimer[lv_i]) <= 0.0))) {
            gv_registeredTimer[lv_i] = lv_timer;
            return lv_timer;
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/D4B62BA8"), true);
    return lv_timer;
}

void gf_Elapsed (trigger t, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    gf_OneshotGameTime(lp_time, t);
}

void gf_Periodic (trigger t, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    gf_SetPeriodicTimerForTrigger(lp_time, t );
}

void gf_SetPeriodicTimerForTrigger (fixed lp_time, trigger lp_t) {
    // Automatic Variable Declarations
    // Implementation
    gv_allPeriodic[gv_allPeriodicCount] = lp_time;
    gv_allPeriodicTriggers[gv_allPeriodicCount] = lp_t;
    gv_allPeriodicCount += 1;
    if ((TriggerIsEnabled(lp_t) == true)) {
        gv_activePeriodic[gv_activePeriodicCount] = lp_time;
        gv_activePeriodicTriggers[gv_activePeriodicCount] = lp_t;
        gv_activePeriodicCount += 1;
    }

}

void gf_TogglePeriodicTrigger (bool lp_onOff, trigger lp_trigger) {
    // Variable Declarations
    int lv_index;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (lp_onOff == true) {
        if (TriggerIsEnabled(lp_trigger) == true) {
            TriggerDebugOutput(10, StringToText("Tried to ENABLE periodic trigger: " + TriggerGetFunction(lp_trigger) + ", but it is already enabled."), false);
            return;
        }
        TriggerEnable(lp_trigger, true);
        for (; lv_i < gv_allPeriodicCount; lv_i += 1) {
            if (gv_allPeriodicTriggers[lv_i] == lp_trigger) {
                gv_activePeriodic[gv_activePeriodicCount] = gv_allPeriodic[lv_i];
                gv_activePeriodicTriggers[gv_activePeriodicCount] = lp_trigger;
                gv_activePeriodicCount += 1;
                break;
            }
        }
    } else {
        if (TriggerIsEnabled(lp_trigger) == false) {
            TriggerDebugOutput(10, StringToText("Tried to DISABLE periodic trigger: " + TriggerGetFunction(lp_trigger) + ", but it is already disable."), false);
            return;
        }
        TriggerEnable(lp_trigger, false);
        for (; lv_i < gv_activePeriodicCount; lv_i += 1) {
            if (gv_activePeriodicTriggers[lv_i] == lp_trigger) {
                lv_index = lv_i;
                break;
            }
        }
        lv_i = lv_index;
        for (; lv_i < gv_activePeriodicCount; lv_i += 1) {
            gv_activePeriodic[lv_i] = gv_activePeriodic[lv_i+1];
            gv_activePeriodicTriggers[lv_i] = gv_activePeriodicTriggers[lv_i+1];
        }
        gv_activePeriodicCount -= 1;
    }
}

void gf_SetPeriodicTime (trigger lp_trigger, fixed lp_time) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    for (; lv_i < gv_activePeriodicCount; lv_i += 1) {
        if (gv_activePeriodicTriggers[lv_i] == lp_trigger) {
            gv_activePeriodic[lv_i] = lp_time;
            break;
        }
    }
    lv_i = 0;
    for (; lv_i < gv_allPeriodicCount; lv_i += 1) {
        if (gv_allPeriodicTriggers[lv_i] == lp_trigger) {
            gv_allPeriodic[lv_i] = lp_time;
            break;
        }
    }
}

void gf_PauseRegisteredTimers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto6DEC8C89_ae;
    const int auto6DEC8C89_ai = 1;

    // Variable Initialization

    // Implementation
    TimerPause(gv_game_timer, true);
    TimerPause(gv_real_timer, true);
    auto6DEC8C89_ae = (gv_timer_length - 1);
    lv_i = 0;
    for ( ; ( (auto6DEC8C89_ai >= 0 && lv_i <= auto6DEC8C89_ae) || (auto6DEC8C89_ai < 0 && lv_i >= auto6DEC8C89_ae) ) ; lv_i += auto6DEC8C89_ai ) {
        if (((gv_registeredTimer[lv_i] != null) && (TimerGetRemaining(gv_registeredTimer[lv_i]) > 0.0))) {
            TimerPause(gv_registeredTimer[lv_i], true);
        }

    }
}

void gf_UnpauseRegisteredTimers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF53FF4C7_ae;
    const int autoF53FF4C7_ai = 1;

    // Variable Initialization

    // Implementation
    TimerPause(gv_game_timer, false);
    TimerPause(gv_real_timer, false);
    autoF53FF4C7_ae = (gv_timer_length - 1);
    lv_i = 0;
    for ( ; ( (autoF53FF4C7_ai >= 0 && lv_i <= autoF53FF4C7_ae) || (autoF53FF4C7_ai < 0 && lv_i >= autoF53FF4C7_ae) ) ; lv_i += autoF53FF4C7_ai ) {
        if (((gv_registeredTimer[lv_i] != null) && (TimerGetRemaining(gv_registeredTimer[lv_i]) > 0.0))) {
            TimerPause(gv_registeredTimer[lv_i], false);
        }

    }
}

void gf_PauseGame () {
    // Automatic Variable Declarations
    playergroup autoD178F368_g;
    int autoD178F368_var;

    // Implementation
    gv_game_paused = true;
    autoD178F368_g = PlayerGroupAll();
    autoD178F368_var = -1;
    while (true) {
        autoD178F368_var = PlayerGroupNextPlayer(autoD178F368_g, autoD178F368_var);
        if (autoD178F368_var < 0) { break; }
        CameraLockInput(autoD178F368_var, true);
    }
    GameSetGlobalTimeScale(0.0);
    GameSetMissionTimePaused(true);
    AITimePause(true);
    gf_PauseRegisteredTimers();
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    UnitPauseAll(true);
    GamePauseAllCooldowns(true);
    GamePauseAllCharges(true);
    TriggerQueuePause(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    TriggerDebugOutput(10, (StringExternal("Param/Value/DC3049E0") + FixedToText(GameGetMissionTime(), c_fixedPrecisionAny)), false);
}

void gf_ResumeGame () {
    // Automatic Variable Declarations
    playergroup auto2915FEA0_g;
    int auto2915FEA0_var;

    // Implementation
    GameSetGlobalTimeScale(1.0);
    auto2915FEA0_g = PlayerGroupAll();
    auto2915FEA0_var = -1;
    while (true) {
        auto2915FEA0_var = PlayerGroupNextPlayer(auto2915FEA0_g, auto2915FEA0_var);
        if (auto2915FEA0_var < 0) { break; }
        CameraLockInput(auto2915FEA0_var, false);
    }
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
    GamePauseAllCooldowns(false);
    GamePauseAllCharges(false);
    TriggerQueuePause(false);
    gv_game_paused = false;
    gf_UnpauseRegisteredTimers();
    TriggerDebugOutput(10, (StringExternal("Param/Value/9A6C89BD") + FixedToText(GameGetMissionTime(), c_fixedPrecisionAny)), false);
}

void gf_EvaluatePlayerStatuses () {
    // Variable Declarations
    bool lv_force_resume;
    fixed lv_total_votes;
    int[4] lv_status_sums;
    text[4] lv_status_tooltips;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoBF6E0FBD_g;
    const int auto6A4FD501_ae = 15;
    const int auto6A4FD501_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_game_resuming == true)) {
        return ;
    }

    autoBF6E0FBD_g = gv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoBF6E0FBD_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_alive[lv_player] == true) || (gv_player_is_observer[lv_player] == true))) {
            lv_total_votes += 1.0;
            if ((gv_player_vote_statuses[lv_player] == 0)) {
                lv_status_sums[0] += 1;
                if (((lv_status_tooltips[0] != null) == true)) {
                    lv_status_tooltips[0] = (lv_status_tooltips[0] + StringExternal("Param/Value/48B00177"));
                }

                lv_status_tooltips[0] = (lv_status_tooltips[0] + gv_player_names_colored[lv_player]);
            }

            if (((gv_player_vote_statuses[lv_player] == 1) || (gv_player_vote_statuses[lv_player] == 2))) {
                lv_status_sums[1] += 1;
                if (((lv_status_tooltips[1] != null) == true)) {
                    lv_status_tooltips[1] = (lv_status_tooltips[1] + StringExternal("Param/Value/F5A8F6FD"));
                }

                lv_status_tooltips[1] = (lv_status_tooltips[1] + gv_player_names_colored[lv_player]);
            }

            if ((gv_player_vote_statuses[lv_player] == 2)) {
                lv_status_sums[2] += 1;
                if (((lv_status_tooltips[2] != null) == true)) {
                    lv_status_tooltips[2] = (lv_status_tooltips[2] + StringExternal("Param/Value/3CF1D5FE"));
                }

                lv_status_tooltips[2] = (lv_status_tooltips[2] + gv_player_names_colored[lv_player]);
            }

        }

    }
    libNtve_gf_SetDialogItemText(gv_pause_buttons[0], (StringExternal("Param/Value/CCD3A3B1") + FormatNumber(lv_status_sums[0])), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_pause_buttons[0], lv_status_tooltips[0], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_pause_buttons[1], (StringExternal("Param/Value/5C628953") + FormatNumber(lv_status_sums[1])), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_pause_buttons[1], lv_status_tooltips[1], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_pause_buttons[2], (StringExternal("Param/Value/6A1D09FE") + FormatNumber(lv_status_sums[2])), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_pause_buttons[2], lv_status_tooltips[2], PlayerGroupAll());
    lv_force_resume = (IntToFixed(lv_status_sums[2]) > ((lv_total_votes - 1.0) / 2.0));
    if (((lv_status_sums[0] == 0) || (lv_force_resume == true))) {
        gv_game_resuming = true;
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/F2302596"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        SoundPlayForPlayer(SoundLink("UI_BNet_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/755628CD"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/02BA715E"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/4693CD48"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/AB7CDAA1"), PlayerGroupAll());
        Wait(1.0, c_timeReal);
        libNtve_gf_SetDialogItemText(gv_countdown_label, StringToText(""), PlayerGroupAll());
        gv_game_resuming = false;
        lv_player = 0;
        for ( ; ( (auto6A4FD501_ai >= 0 && lv_player <= auto6A4FD501_ae) || (auto6A4FD501_ai < 0 && lv_player >= auto6A4FD501_ae) ) ; lv_player += auto6A4FD501_ai ) {
            if ((gv_player_vote_statuses[lv_player] == 0)) {
                gv_pause_allowed_for_player[lv_player] = false;
            }

            gv_player_vote_statuses[lv_player] = 1;
        }
        gf_ResumeGame();
        DialogSetVisible(gv_pause_overlay, PlayerGroupAll(), false);
        TriggerEnable(gt_ButtonClicked, false);
    }

}

void gf_Overlay () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_pause_overlay == c_invalidDialogId)) {
        DialogCreate(600, 500, c_anchorCenter, 0, 0, true);
        DialogSetRenderPriority(DialogLastCreated(), 10);
        DialogSetFullscreen(DialogLastCreated(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_screens_trophyroom_background_diff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogSetTransparency(DialogLastCreated(), 30.0);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_pause_overlay = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_pause_overlay, 200, 150, c_anchorBottom, -200, 100, StringToText(""), StringExternal("Param/Value/F171D7F5"), "");
        gv_pause_buttons[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_pause_overlay, 200, 150, c_anchorBottom, 0, 100, StringToText(""), StringExternal("Param/Value/48521148"), "");
        gv_pause_buttons[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_pause_overlay, 200, 150, c_anchorBottom, 200, 100, StringToText(""), StringExternal("Param/Value/3B2904D3"), "");
        gv_pause_buttons[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 200, c_anchorCenter, 0, -100, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Countdown", PlayerGroupAll());
        gv_countdown_label = DialogControlLastCreated();
    }

    DialogSetVisible(gv_pause_overlay, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_countdown_label, StringExternal("Param/Value/1E3571F8"), PlayerGroupAll());
    TriggerEnable(gt_ButtonClicked, true);
}

void gf_junk () {
    // Variable Declarations
    int lv_player;
    bank[17] lv_player_banks;

    // Automatic Variable Declarations
    playergroup auto8AE7C98E_g;

    // Variable Initialization

    // Implementation
    auto8AE7C98E_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8AE7C98E_g, lv_player);
        if (lv_player < 0) { break; }
        BankReload(gv_banks[lv_player]);
    }
}

void gf_PlayerPause (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_game_resuming == true))) {
        return ;
    }

    if ((gv_pause_allowed_for_player[lp_player] == false)) {
        gf_GameMessage(StringExternal("Param/Value/B16EF650"), PlayerGroupSingle(lp_player));
        return ;
    }

    gv_player_vote_statuses[lp_player] = 0;
    if (((gv_game_paused == true))) {
        gf_EvaluatePlayerStatuses();
        return ;
    }

    gf_PauseGame();
    gf_Overlay();
    gf_EvaluatePlayerStatuses();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zoom
//--------------------------------------------------------------------------------------------------
bool gt_Zoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD5DB85B4_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD5DB85B4_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD5DB85B4_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SwooshCamera(lv_player, CameraGetDistance(lv_player), gv_max_player_zoom_level, CameraGetTarget(lv_player), 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zoom_Init () {
    gt_Zoom = TriggerCreate("gt_Zoom_Func");
    gf_Elapsed(gt_Zoom, 0.2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ButtonPress
//--------------------------------------------------------------------------------------------------
bool gt_ButtonPress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hgyoggojprjefpov;
    bool lv_has_control_shared;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    const int autoDC2BB981_ae = 8;
    const int autoDC2BB981_ai = 1;
    const int autoA9265719_ae = 7;
    const int autoA9265719_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_pause_button)) {
        gf_PlayerPause(EventPlayer());
    }

    if ((EventDialogControl() == gv_toggle_control_button)) {
        gf_ControlCommand(EventPlayer());
    }

    if ((EventDialogControl() == gv_scan_ups_button)) {
        gf_ScanOpponentUpsFn(EventPlayer());
    }

    if ((EventDialogControl() == gv_help_dismiss)) {
        DialogSetVisible(gv_help_dialog, gv_all_players, false);
    }

    if ((EventDialogControl() == gv_achievements_button)) {
        gf_HideDialogsForPlayer(EventPlayer());
        gf_CreateAchievementsDialog(PlayerGroupSingle(EventPlayer()));
    }

    if ((EventDialogControl() == gv_leaderboard_button)) {
        gf_ToggleLeaderboardMode(EventPlayer());
    }

    if ((EventDialogControl() == gv_results_button)) {
        gf_HideDialogsForPlayer(EventPlayer());
        gf_ComputeFinalScores(gv_winning_team);
        gf_CreateResultsDialog(gv_winning_team, PlayerGroupSingle(EventPlayer()));
    }

    if ((EventDialogControl() == gv_victory_button[EventPlayer()])) {
        if ((gv_game_over == true)) {
            if ((gv_player_team[EventPlayer()] == gv_winning_team)) {
                GameOver(EventPlayer(), c_gameOverVictory, false, false);
            }
            else {
                GameOver(EventPlayer(), c_gameOverDefeat, false, false);
            }
        }
        else {
            gf_HideDialogsForPlayer(EventPlayer());
        }
    }

    lv_player = 1;
    for ( ; ( (autoDC2BB981_ai >= 0 && lv_player <= autoDC2BB981_ae) || (autoDC2BB981_ai < 0 && lv_player >= autoDC2BB981_ae) ) ; lv_player += autoDC2BB981_ai ) {
        lv_hgyoggojprjefpov = 0;
        for ( ; ( (autoA9265719_ai >= 0 && lv_hgyoggojprjefpov <= autoA9265719_ae) || (autoA9265719_ai < 0 && lv_hgyoggojprjefpov >= autoA9265719_ae) ) ; lv_hgyoggojprjefpov += autoA9265719_ai ) {
            if ((EventDialogControl() == gv_team_info_player_upgrade_buttons[lv_player][lv_hgyoggojprjefpov])) {
                if (((gv_player_is_afk[lv_player] == true) && (PlayerGetAlliance(lv_player, c_allianceIdControl, EventPlayer()) == true))) {
                    UnitIssueOrder(gv_research_facilities[lv_player], Order(gv_race_teaminfo_upgrade_abilities[gv_player_race_index[lv_player]][lv_hgyoggojprjefpov]), c_orderQueueReplace);
                }

            }

        }
    }
    if (((PlayerGroupHasPlayer(gv_all_observers, EventPlayer()) == true) || (GameAttributeGameValue("22") == "0001"))) {
        if ((EventDialogControl() == gv_zoom_buttons[0])) {
            gf_SpectatorZoom(EventPlayer(), 0, false);
        }

        if ((EventDialogControl() == gv_zoom_buttons[1])) {
            gf_SpectatorZoom(EventPlayer(), 1, false);
        }

        if ((EventDialogControl() == gv_zoom_buttons[2])) {
            gf_SpectatorZoom(EventPlayer(), 2, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonPress_Init () {
    gt_ButtonPress = TriggerCreate("gt_ButtonPress_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckForInvalidGame
//--------------------------------------------------------------------------------------------------
bool gt_CheckForInvalidGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4309E3C8_g;
    playergroup autoCEE91A08_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_game_contains_ai == true)) {
        gf_GameMessage(StringExternal("Param/Value/D471A456"), PlayerGroupAll());
        auto4309E3C8_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4309E3C8_g, lv_player);
            if (lv_player < 0) { break; }
            GameOver(lv_player, c_gameOverTie, true, true);
        }
    }

    if (((GameAttributeGameValue("8") == "0002") && (gv_game_inbalanced == true))) {
        gf_GameMessage(StringExternal("Param/Value/8258300E"), PlayerGroupAll());
        autoCEE91A08_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoCEE91A08_g, lv_player);
            if (lv_player < 0) { break; }
            GameOver(lv_player, c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckForInvalidGame_Init () {
    gt_CheckForInvalidGame = TriggerCreate("gt_CheckForInvalidGame_Func");
    gf_Elapsed(gt_CheckForInvalidGame, 1.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScanOpponentUps
//--------------------------------------------------------------------------------------------------
bool gt_ScanOpponentUps_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScanOpponentUpsFn(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanOpponentUps_Init () {
    gt_ScanOpponentUps = TriggerCreate("gt_ScanOpponentUps_Func");
    TriggerAddEventUnitAbility(gt_ScanOpponentUps, null, AbilityCommand("ScanUpgrades", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Build1v1Wall();
    gf_InitDebugBanks();
    gf_LoadGameSettings();
    gf_ConfigureConstants();
    gf_InitChat();
    gf_InitGameTime();
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    gf_AssignTeamLocations();
    gf_SpawnPlayers();
    gf_SpectatorInit();
    gf_SpawnPlayers2();
    gf_RecordUpdateGameStart();
    gf_AssignPlayerColors();
    gf_LeaderboardInit();
    gf_TeamInfoInit();
    gf_ApplyPlayerSettings();
    gf_AddControlButton();
    gf_ApplyTrainingMode();
    gf_SetupRewards();
    gf_InitEventBanks();
    gv_init_completed = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckInitCompleted
//--------------------------------------------------------------------------------------------------
bool gt_CheckInitCompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_init_completed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/B7AEC6F5"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckInitCompleted_Init () {
    gt_CheckInitCompleted = TriggerCreate("gt_CheckInitCompleted_Func");
    TriggerAddEventTimeElapsed(gt_CheckInitCompleted, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameTimeRemaining
//--------------------------------------------------------------------------------------------------
bool gt_GameTimeRemaining_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]3015") != "0001"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_GameMessage((IntToText((gv_game_duration - FixedToInt((TimerGetElapsed(gv_real_timer) / 60.0)))) + StringExternal("Param/Value/50D5E327")), PlayerGroupActive());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameTimeRemaining_Init () {
    gt_GameTimeRemaining = TriggerCreate("gt_GameTimeRemaining_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CeaseFireOver
//--------------------------------------------------------------------------------------------------
bool gt_CeaseFireOver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_EndCeaseFire();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CeaseFireOver_Init () {
    gt_CeaseFireOver = TriggerCreate("gt_CeaseFireOver_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoEnableBadBuilds
//--------------------------------------------------------------------------------------------------
bool gt_AutoEnableBadBuilds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bunk_count;
    int lv_required_bunk_count;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    const int auto8E9D94A0_ae = 3;
    const int auto8E9D94A0_ai = 1;
    playergroup auto8FBC8205_g;
    playergroup autoF29D7BF9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetElapsed(gv_game_timer) <= 800.0)) {
        return true;
    }

    lv_team = 0;
    for ( ; ( (auto8E9D94A0_ai >= 0 && lv_team <= auto8E9D94A0_ae) || (auto8E9D94A0_ai < 0 && lv_team >= auto8E9D94A0_ae) ) ; lv_team += auto8E9D94A0_ai ) {
        auto8FBC8205_g = gv_teams[lv_team];
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto8FBC8205_g, lv_player);
            if (lv_player < 0) { break; }
            lv_bunk_count += gv_player_bunker_counts[lv_player];
            lv_bunk_count += gv_player_merc_bunker_counts[lv_player];
            lv_required_bunk_count += 2;
        }
        if ((lv_bunk_count < lv_required_bunk_count)) {
            autoF29D7BF9_g = gv_teams[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoF29D7BF9_g, lv_player);
                if (lv_player < 0) { break; }
                UnitIssueOrder(gv_nuke_silos[lv_player], Order(AbilityCommand("EngineeringBayResearch", 15)), c_orderQueueAddToEnd);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoEnableBadBuilds_Init () {
    gt_AutoEnableBadBuilds = TriggerCreate("gt_AutoEnableBadBuilds_Func");
    gf_Periodic(gt_AutoEnableBadBuilds, 300.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicReveal
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicReveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mean_wait;
    fixed lv_half_mean_wait;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mean_wait = 60.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_half_mean_wait = (lv_mean_wait / 2.0);
    while (true) {
        Wait((lv_half_mean_wait + RandomFixed(0.0, lv_mean_wait)), c_timeReal);
        gv_periodic_observer_reveal = true;
        gf_SyncObserverRevealIdentity(gv_all_observers);
        Wait(5.0, c_timeReal);
        gv_periodic_observer_reveal = false;
        gf_SyncObserverRevealIdentity(gv_all_observers);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicReveal_Init () {
    gt_PeriodicReveal = TriggerCreate("gt_PeriodicReveal_Func");
    gf_Elapsed(gt_PeriodicReveal, 5.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox
//--------------------------------------------------------------------------------------------------
bool gt_Checkbox_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_alliance_checkbox)) {
        gf_SyncSharedControl(EventPlayer());
    }

    if ((EventDialogControl() == gv_observer_reveal_checkbox)) {
        gf_SyncObserverRevealIdentity(PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checkbox_Init () {
    gt_Checkbox = TriggerCreate("gt_Checkbox_Func");
    TriggerAddEventDialogControl(gt_Checkbox, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectMovement
//--------------------------------------------------------------------------------------------------
bool gt_DetectMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_movement_detected[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectMovement_Init () {
    gt_DetectMovement = TriggerCreate("gt_DetectMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectPlayerChat
//--------------------------------------------------------------------------------------------------
bool gt_DetectPlayerChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PlayerAfkEnded(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectPlayerChat_Init () {
    gt_DetectPlayerChat = TriggerCreate("gt_DetectPlayerChat_Func");
    TriggerAddEventChatMessage(gt_DetectPlayerChat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrackUnitMovement
//--------------------------------------------------------------------------------------------------
bool gt_TrackUnitMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto40E7B021_g;
    unitgroup autoE7451016_g;
    int autoE7451016_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto40E7B021_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto40E7B021_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_movement_detected[lv_player] == false)) {
            autoE7451016_g = UnitControlGroup(lv_player, 1);
            autoE7451016_u = UnitGroupCount(autoE7451016_g, c_unitCountAll);
            for (;; autoE7451016_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoE7451016_g, autoE7451016_u);
                if (lv_unit == null) { break; }
                TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_unit), AbilityCommand("move", 0));
                TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_unit), AbilityCommand("attack", 0));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackUnitMovement_Init () {
    gt_TrackUnitMovement = TriggerCreate("gt_TrackUnitMovement_Func");
    gf_Elapsed(gt_TrackUnitMovement, 1.0);
    gf_Elapsed(gt_TrackUnitMovement, 5.0);
    gf_Elapsed(gt_TrackUnitMovement, 15.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrackRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_TrackRallyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup autoE911CA37_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE911CA37_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE911CA37_g, lv_player);
        if (lv_player < 0) { break; }
        lv_bunker = gv_initial_bunkers[lv_player];
         TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_bunker), AbilityCommand("Rally", 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackRallyChange_Init () {
    gt_TrackRallyChange = TriggerCreate("gt_TrackRallyChange_Func");
    gf_Elapsed(gt_TrackRallyChange, 1.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShareControlForAfkPlayer
//--------------------------------------------------------------------------------------------------
bool gt_ShareControlForAfkPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_yiqmithplhusqdqr;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    playergroup auto4958B184_g;
    const int autoFC6C6804_ae = 7;
    const int autoFC6C6804_ai = 1;
    playergroup auto035062F2_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4958B184_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4958B184_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_alive[lv_player] == true) && (gv_movement_detected[lv_player] == false))) {
            gf_GameMessage((gv_player_names_colored[lv_player] + StringExternal("Param/Value/AF820515")), gv_teams[gv_player_team[lv_player]]);
            lv_yiqmithplhusqdqr = 0;
            for ( ; ( (autoFC6C6804_ai >= 0 && lv_yiqmithplhusqdqr <= autoFC6C6804_ae) || (autoFC6C6804_ai < 0 && lv_yiqmithplhusqdqr >= autoFC6C6804_ae) ) ; lv_yiqmithplhusqdqr += autoFC6C6804_ai ) {
                DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lv_player][lv_yiqmithplhusqdqr], PlayerGroupAlliance(c_playerGroupAlly, lv_player), true);
                DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lv_player][lv_yiqmithplhusqdqr], PlayerGroupSingle(lv_player), true);
            }
            auto035062F2_g = gv_teams[gv_player_team[lv_player]];
            lv_ally = -1;
            while (true) {
                lv_ally = PlayerGroupNextPlayer(auto035062F2_g, lv_ally);
                if (lv_ally < 0) { break; }
                if ((lv_player != lv_ally)) {
                    PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, true);
                }

            }
            gv_player_is_afk[lv_player] = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareControlForAfkPlayer_Init () {
    gt_ShareControlForAfkPlayer = TriggerCreate("gt_ShareControlForAfkPlayer_Func");
    gf_Elapsed(gt_ShareControlForAfkPlayer, 60.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisplayEloAtStart
//--------------------------------------------------------------------------------------------------
bool gt_DisplayEloAtStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayElo(gv_all_players);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayEloAtStart_Init () {
    gt_DisplayEloAtStart = TriggerCreate("gt_DisplayEloAtStart_Func");
    gf_Elapsed(gt_DisplayEloAtStart, 1.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ComputeStandings
//--------------------------------------------------------------------------------------------------
bool gt_ComputeStandings_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    fixed lv_denominator;
    fixed lv_alive_opponents;
    int lv_opponent_total_score;
    fixed[5] lv_num_players_on_team;
    fixed lv_num_players;
    fixed[5] lv_team_scores_with_nuke_bonus;
    fixed lv_total_score;
    fixed[5] lv_total_score_for_winning_team;
    int lv_team;
    int lv_winning_team;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto8F014B60_g;
    const int auto9335F831_ae = 3;
    const int auto9335F831_ai = 1;
    const int auto494C091A_ae = 3;
    const int auto494C091A_ai = 1;
    const int auto64136BF7_ae = 3;
    const int auto64136BF7_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_team_scores_with_nuke_bonus[init_i] = 1000.0;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F014B60_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8F014B60_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            lv_team = gv_player_team[lv_player];
            lv_num_players_on_team[lv_team] += 1.0;
            lv_num_players += 1.0;
            if ((gf_PlayerHasNuke(lv_player) == true)) {
                lv_team_scores_with_nuke_bonus[lv_team] += 500.0;
            }

        }

    }
    lv_team = 0;
    for ( ; ( (auto9335F831_ai >= 0 && lv_team <= auto9335F831_ae) || (auto9335F831_ai < 0 && lv_team >= auto9335F831_ae) ) ; lv_team += auto9335F831_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_team_scores_with_nuke_bonus[lv_team] += gv_team_scores[lv_team];
            lv_total_score += lv_team_scores_with_nuke_bonus[lv_team];
        }

    }
    lv_team = 0;
    for ( ; ( (auto494C091A_ai >= 0 && lv_team <= auto494C091A_ae) || (auto494C091A_ai < 0 && lv_team >= auto494C091A_ae) ) ; lv_team += auto494C091A_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_denominator = (lv_total_score - lv_team_scores_with_nuke_bonus[lv_team]);
            lv_denominator = (IntToFixed(gv_players_per_team) * lv_denominator);
            if ((lv_denominator != 0.0)) {
                gv_team_current_performance[lv_team] = (lv_team_scores_with_nuke_bonus[lv_team] / lv_denominator);
                gv_team_current_performance[lv_team] *= (lv_num_players - lv_num_players_on_team[lv_team]);
                if ((gv_team_current_performance[lv_team] >= gv_team_peak_performance[lv_team])) {
                    gv_team_peak_performance[lv_team] = gv_team_current_performance[lv_team];
                    gv_team_peak_performance_time[lv_team] = CurrentDateTimeGet();
                }

            }

            lv_winning_team = 0;
            for ( ; ( (auto64136BF7_ai >= 0 && lv_winning_team <= auto64136BF7_ae) || (auto64136BF7_ai < 0 && lv_winning_team >= auto64136BF7_ae) ) ; lv_winning_team += auto64136BF7_ai ) {
                if ((lv_team != lv_winning_team)) {
                    lv_denominator = lv_total_score;
                    lv_denominator -= lv_team_scores_with_nuke_bonus[gv_winning_team];
                    lv_denominator -= lv_team_scores_with_nuke_bonus[lv_team];
                    lv_denominator = (IntToFixed(gv_players_per_team) * lv_denominator);
                    lv_alive_opponents = lv_num_players;
                    lv_alive_opponents -= lv_num_players_on_team[lv_winning_team];
                    lv_alive_opponents -= lv_num_players_on_team[lv_team];
                    if (((lv_denominator != 0.0) && (lv_alive_opponents > 0.1))) {
                        gv_team_current_performance_for_winning_team[lv_winning_team][lv_team] = (lv_team_scores_with_nuke_bonus[lv_team] / lv_denominator);
                        gv_team_current_performance_for_winning_team[lv_winning_team][lv_team] *= lv_alive_opponents;
                        if ((gv_team_current_performance_for_winning_team[lv_winning_team][lv_team] >= gv_team_peak_performance_for_winning_team[lv_winning_team][lv_team])) {
                            gv_team_peak_performance_for_winning_team[lv_winning_team][lv_team] = gv_team_current_performance_for_winning_team[lv_winning_team][lv_team];
                            gv_team_peak_performance_for_winning_team_time[lv_winning_team][lv_team] = CurrentDateTimeGet();
                        }

                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComputeStandings_Init () {
    gt_ComputeStandings = TriggerCreate("gt_ComputeStandings_Func");
    gf_Periodic(gt_ComputeStandings, 5.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeaderboardPeriodicRefresh
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardPeriodicRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateLeaderboard(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardPeriodicRefresh_Init () {
    gt_LeaderboardPeriodicRefresh = TriggerCreate("gt_LeaderboardPeriodicRefresh_Func");
    TriggerAddEventTimePeriodic(gt_LeaderboardPeriodicRefresh, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitWinGameAchievement
//--------------------------------------------------------------------------------------------------
bool gt_InitWinGameAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("wg", "Win Game", "Assets\\Textures\\ui_ingame_gameresult_win_icon.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWinGameAchievement_Init () {
    gt_InitWinGameAchievement = TriggerCreate("gt_InitWinGameAchievement_Func");
    TriggerAddEventMapInit(gt_InitWinGameAchievement);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitOneBunk
//--------------------------------------------------------------------------------------------------
bool gt_InitOneBunk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("1b", "One Bunker", "Assets\\Textures\\btn-building-terran-bunker.dds");
    gf_AddAchievement("1bx2", "Double One Bunker", "Assets\\Textures\\btn-building-terran-bunkerfortified.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitOneBunk_Init () {
    gt_InitOneBunk = TriggerCreate("gt_InitOneBunk_Func");
    TriggerAddEventMapInit(gt_InitOneBunk);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitCombatShields
//--------------------------------------------------------------------------------------------------
bool gt_InitCombatShields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("cs", "Early Combat Shields", "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCombatShields_Init () {
    gt_InitCombatShields = TriggerCreate("gt_InitCombatShields_Func");
    TriggerAddEventMapInit(gt_InitCombatShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitSafeWorker
//--------------------------------------------------------------------------------------------------
bool gt_InitSafeWorker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("sscv", "Safe Worker", "Assets\\Textures\\btn-unit-terran-scv.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitSafeWorker_Init () {
    gt_InitSafeWorker = TriggerCreate("gt_InitSafeWorker_Func");
    TriggerAddEventMapInit(gt_InitSafeWorker);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitCarryTeammate
//--------------------------------------------------------------------------------------------------
bool gt_InitCarryTeammate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("ct", "Major Carry", "Assets\\Textures\\ui-kerriganupgrades-kineticblast.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCarryTeammate_Init () {
    gt_InitCarryTeammate = TriggerCreate("gt_InitCarryTeammate_Func");
    TriggerAddEventMapInit(gt_InitCarryTeammate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitHugeNuke
//--------------------------------------------------------------------------------------------------
bool gt_InitHugeNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("mn", "MassiveNuke", "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHugeNuke_Init () {
    gt_InitHugeNuke = TriggerCreate("gt_InitHugeNuke_Func");
    TriggerAddEventMapInit(gt_InitHugeNuke);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitShardPickup
//--------------------------------------------------------------------------------------------------
bool gt_InitShardPickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("sp", "Pickup Pro", "Assets\\Textures\\ui_emoticons_gminerals.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitShardPickup_Init () {
    gt_InitShardPickup = TriggerCreate("gt_InitShardPickup_Func");
    TriggerAddEventMapInit(gt_InitShardPickup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TestPickupAchievement
//--------------------------------------------------------------------------------------------------
bool gt_TestPickupAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_total_pickups;
    int[6] lv_pickups_by_team;

    // Automatic Variable Declarations
    playergroup autoA3317550_g;
    playergroup auto80DD2A82_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3317550_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoA3317550_g, lv_player);
        if (lv_player < 0) { break; }
        lv_total_pickups += gv_player_shards_collected[lv_player];
        lv_pickups_by_team[gv_player_team[lv_player]] += gv_player_shards_collected[lv_player];
    }
    auto80DD2A82_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto80DD2A82_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_shards_collected[lv_player] >= (lv_total_pickups - lv_pickups_by_team[gv_player_team[lv_player]]))) {
            gf_MarkAchievementCompleted("pp", lv_player, RoundI(gf_GetAverageOpponentElo(lv_player)));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TestPickupAchievement_Init () {
    gt_TestPickupAchievement = TriggerCreate("gt_TestPickupAchievement_Func");
    gf_Elapsed(gt_TestPickupAchievement, 400.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: InitTankRush
//--------------------------------------------------------------------------------------------------
bool gt_InitTankRush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AddAchievement("tr", "Tank Rush", "Assets\\Textures\\btn-unit-terran-merc-siegetanksieged.dds");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitTankRush_Init () {
    gt_InitTankRush = TriggerCreate("gt_InitTankRush_Func");
    TriggerAddEventMapInit(gt_InitTankRush);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HelpInit
//--------------------------------------------------------------------------------------------------
bool gt_HelpInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1200, 630, c_anchorTop, 0, 60, false);
    gv_help_dialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ZoneCommands/CommandsFrame");
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 100, c_anchorBottom, 0, 70, StringToText(""), StringExternal("Param/Value/AE178147"), "");
    gv_help_dismiss = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpInit_Init () {
    gt_HelpInit = TriggerCreate("gt_HelpInit_Func");
    TriggerAddEventMapInit(gt_HelpInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicUpdateNetResources
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicUpdateNetResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto20019133_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto20019133_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto20019133_g, lv_player);
        if (lv_player < 0) { break; }
        gf_UpdateNetResourcesForPlayer(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicUpdateNetResources_Init () {
    gt_PeriodicUpdateNetResources = TriggerCreate("gt_PeriodicUpdateNetResources_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicUpdateNetResources, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourceTradingTracker
//--------------------------------------------------------------------------------------------------
bool gt_ResourceTradingTracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateNetResourcesForPlayer(EventResourceTradeRecipient());
    gf_UpdateNetResourcesForPlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceTradingTracker_Init () {
    gt_ResourceTradingTracker = TriggerCreate("gt_ResourceTradingTracker_Func");
    TriggerAddEventResourceTrade(gt_ResourceTradingTracker, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateLosses
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLosses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_running_total;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto8C2A0172_g;
    int auto8C2A0172_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_player <= 1000)) {
        lv_player += 1;
        if ((lv_player > 15)) {
            Wait(1.0, c_timeGame);
            lv_player = 0;
        }

        if ((gv_player_alive[lv_player] == true)) {
            lv_running_total = gf_GetPlayerScore(lv_player);
            lv_running_total += gv_total_resource_granted;
            lv_running_total += gv_total_structure_granted_value[lv_player];
            lv_running_total += gv_player_net_resource_traded[lv_player];
            auto8C2A0172_g = gv_structuresGroup[lv_player];
            auto8C2A0172_u = UnitGroupCount(auto8C2A0172_g, c_unitCountAll);
            for (;; auto8C2A0172_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto8C2A0172_g, auto8C2A0172_u);
                if (lv_unit == null) { break; }
                if ((UnitIsAlive(lv_unit) == true)) {
                    lv_running_total -= UnitTypeGetCost(UnitGetType(lv_unit), c_unitCostMinerals);
                }

            }
            lv_running_total -= gv_player_upgrade_total_cost[lv_player];
            lv_running_total -= PlayerGetPropertyInt(lv_player, c_playerPropMinerals);
            lv_running_total -= (gv_player_num_workers[lv_player] * 3000.0);
            lv_running_total -= (gv_player_merc_bunker_counts[lv_player] * 1500.0);
            lv_running_total -= (gf_GetPlayerNumNukes(lv_player) * 4500.0);
            libNtve_gf_SetDialogItemText(gv_team_info_player_losses[lv_player], IntToText(RoundI(lv_running_total)), PlayerGroupAll());
            Wait(1.0, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLosses_Init () {
    gt_UpdateLosses = TriggerCreate("gt_UpdateLosses_Func");
    gf_Elapsed(gt_UpdateLosses, 5.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeamInfoTrackUpgrades
//--------------------------------------------------------------------------------------------------
bool gt_TeamInfoTrackUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_player_race;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((EventUpgradeName() == "ShieldWall")) {
        gf_TestEarlyCombatPurchased(lv_player);
    }

    if ((EventUpgradeName() == "AllowBadBuilds")) {
        gf_EnableTankSlotConstruction(lv_player);
    }

    lv_player_race = gv_player_race_index[lv_player];
    gv_team_info_player_armor_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][0], c_techCountQueuedOrBetter);
    gv_team_info_player_attack_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][1], c_techCountQueuedOrBetter);
    gv_team_info_player_range_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][2], c_techCountQueuedOrBetter);
    gv_team_info_player_regen_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][3], c_techCountQueuedOrBetter);
    gv_team_info_player_speed_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][4], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_armor_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][5], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_regen_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][6], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_slots_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][7], c_techCountQueuedOrBetter);
    gv_player_upgrade_total_cost[lv_player] = PlayerScoreValueGetAsFixed(lv_player, "MineralsUsedTotalUpgrade");
    gf_UpdateTeamInfoForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamInfoTrackUpgrades_Init () {
    gt_TeamInfoTrackUpgrades = TriggerCreate("gt_TeamInfoTrackUpgrades_Func");
    TriggerAddEventUpgradeLevelChanged(gt_TeamInfoTrackUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RefreshTeamInfoMins
//--------------------------------------------------------------------------------------------------
bool gt_RefreshTeamInfoMins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mins;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto75D196B2_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto75D196B2_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto75D196B2_g, lv_player);
        if (lv_player < 0) { break; }
        lv_mins = PlayerGetPropertyInt(lv_player, c_playerPropMinerals);
        if ((lv_mins >= 10000)) {
            libNtve_gf_SetDialogItemText(gv_team_info_player_mineral[lv_player], (IntToText((lv_mins / 1000)) + StringExternal("Param/Value/56645396")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_team_info_player_mineral[lv_player], IntToText(PlayerGetPropertyInt(lv_player, c_playerPropMinerals)), PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefreshTeamInfoMins_Init () {
    gt_RefreshTeamInfoMins = TriggerCreate("gt_RefreshTeamInfoMins_Func");
    TriggerAddEventTimePeriodic(gt_RefreshTeamInfoMins, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateTeamInfo
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTeamInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_team_info_current_player > 15)) {
        gv_team_info_current_player = 1;
    }
    else {
        gv_team_info_current_player = (gv_team_info_current_player + 1);
    }
    gf_UpdateTeamInfoForPlayer(gv_team_info_current_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTeamInfo_Init () {
    gt_UpdateTeamInfo = TriggerCreate("gt_UpdateTeamInfo_Func");
    TriggerAddEventDialogControl(gt_UpdateTeamInfo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZoneControlDetection
//--------------------------------------------------------------------------------------------------
bool gt_ZoneControlDetection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_controller;
    int lv_total_owned;
    unit lv_unit;
    int lv_bunk;

    // Automatic Variable Declarations
    const int auto4C414067_ae = 63;
    const int auto4C414067_ai = 1;
    unitgroup autoB92FB158_g;
    int autoB92FB158_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunk = 1;
    for ( ; ( (auto4C414067_ai >= 0 && lv_bunk <= auto4C414067_ae) || (auto4C414067_ai < 0 && lv_bunk >= auto4C414067_ae) ) ; lv_bunk += auto4C414067_ai ) {
        if ((gv_bunker_slot_is_real[lv_bunk] == true)) {
            if (((gv_zone_controller[lv_bunk] >= 1) && (UnitCountAlliance(gv_zone_controller[lv_bunk], c_unitAllianceAlly, gv_bunker_slot_regions[lv_bunk], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1) && (gv_player_alive[gv_zone_controller[lv_bunk]] == true))) {
            }
            else {
                autoB92FB158_g = UnitGroup(null, c_playerAny, gv_bunker_slot_regions[lv_bunk], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
                autoB92FB158_u = UnitGroupCount(autoB92FB158_g, c_unitCountAll);
                for (;; autoB92FB158_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(autoB92FB158_g, autoB92FB158_u);
                    if (lv_unit == null) { break; }
                    lv_controller = UnitGetOwner(lv_unit);
                    ActorSend(gv_zone_controller_beacon[lv_bunk], libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_controller, false)), 1.0, 0.0));
                    gv_num_zones_controlled[gv_zone_controller[lv_bunk]] -= 1;
                    gv_zone_controller[lv_bunk] = UnitGetOwner(lv_unit);
                    gv_num_zones_controlled[lv_controller] += 1;
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZoneControlDetection_Init () {
    gt_ZoneControlDetection = TriggerCreate("gt_ZoneControlDetection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZoneControlLimitReduction
//--------------------------------------------------------------------------------------------------
bool gt_ZoneControlLimitReduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_zone_control_rate_limit -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZoneControlLimitReduction_Init () {
    gt_ZoneControlLimitReduction = TriggerCreate("gt_ZoneControlLimitReduction_Func");
    gf_Elapsed(gt_ZoneControlLimitReduction, 240.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 360.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 480.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 600.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 720.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 840.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 960.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 1080.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 1200.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 1320.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 1440.0);
    gf_Elapsed(gt_ZoneControlLimitReduction, 1560.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZoneControlReward
//--------------------------------------------------------------------------------------------------
bool gt_ZoneControlReward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_starting_index;
    int lv_slot;
    int lv_palyer;

    // Automatic Variable Declarations
    int auto89586605_ae;
    const int auto89586605_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((RandomInt(0, gv_zone_control_rate_limit) <= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_starting_index = (RandomInt(0, 7) * 8);
    auto89586605_ae = (lv_starting_index + 7);
    lv_index = lv_starting_index;
    for ( ; ( (auto89586605_ai >= 0 && lv_index <= auto89586605_ae) || (auto89586605_ai < 0 && lv_index >= auto89586605_ae) ) ; lv_index += auto89586605_ai ) {
        lv_slot = gv_spawn_scan_order[lv_index];
        lv_palyer = gv_zone_controller[lv_slot];
        TextTagCreate(TextWithColor(StringExternal("Param/Value/C572A9EC"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_palyer, false))), 20, gv_bunker_slot_centers[lv_slot], 1.0, true, false, gv_teams[gv_player_team[lv_palyer]]);
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        gf_RegisterTagForCleanup(TextTagLastCreated());
        gv_player_shards_collected[lv_palyer] += 1;
        PlayerModifyPropertyInt(lv_palyer, c_playerPropMinerals, c_playerPropOperAdd, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZoneControlReward_Init () {
    gt_ZoneControlReward = TriggerCreate("gt_ZoneControlReward_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TowerReward
//--------------------------------------------------------------------------------------------------
bool gt_tower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reward;
    int lv_owner;
    bool[17] lv_players;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto59D5C8E2_g;
    int auto59D5C8E2_u;

    // Variable Initialization
    lv_reward = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto59D5C8E2_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(UnitFromId(2058176399)), 4.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59D5C8E2_u = UnitGroupCount(auto59D5C8E2_g, c_unitCountAll);
    for (;; auto59D5C8E2_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto59D5C8E2_g, auto59D5C8E2_u);
        if (lv_unit == null) { break; }
        lv_owner = UnitGetOwner(lv_unit);
        if ((lv_players[lv_owner] == false)) {
            lv_players[lv_owner] = true;
            gv_player_shards_collected[lv_owner] = (gv_player_shards_collected[lv_owner] + lv_reward);
            PlayerModifyPropertyInt(lv_owner, c_playerPropMinerals, c_playerPropOperAdd, lv_reward);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_tower_Init () {
    gt_tower = TriggerCreate("gt_tower_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardSpawn
//--------------------------------------------------------------------------------------------------
bool gt_ShardSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_spawn_type;
    int lv_p;
    unit lv_shard;
    fixed lv_elapsed_seconds;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_elapsed_seconds = TimerGetElapsed(gv_game_timer);
    if ((lv_elapsed_seconds < 90.0)) {
        return true;
    }

    if ((RandomInt(0, 100) < 50)) {
        lv_p = RandomInt(0, 100);
        if ((lv_p <= gv_untitledVariable002)) {
            lv_spawn_type = "MineralCrystal";
        }
        else if ((lv_p <= (gv_untitledVariable002 + gv_untitledVariable003))) {
            lv_spawn_type = "PalletMinerals";
        }
        else if ((lv_p < 1000)) {
            lv_spawn_type = "NaturalMineralsRed";
        }
        UnitCreate(1, lv_spawn_type, 0, 0, RegionRandomPoint(RegionFromId(4)), 270.0);
        lv_shard = UnitLastCreated();
        TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(lv_shard));
    }

    if ((lv_elapsed_seconds > 180.0)) {
        if ((gv_untitledVariable002 > 0)) {
            gv_untitledVariable002 = (gv_untitledVariable002 - 2);
            gv_untitledVariable003 = (gv_untitledVariable003 + 2);
        }
        else {
            gv_untitledVariable003 = (gv_untitledVariable003 - 2);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardSpawn_Init () {
    gt_ShardSpawn = TriggerCreate("gt_ShardSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardCollected
//--------------------------------------------------------------------------------------------------
bool gt_ShardCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    point lv_shard_position;
    int lv_player;
    fixed lv_min_distance;
    fixed lv_distance;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto06A249F6_g;
    int auto06A249F6_u;

    // Variable Initialization
    lv_min_distance = 1000.0;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MineralCrystal") || (UnitGetType(EventUnit()) == "PalletMinerals") || (UnitGetType(EventUnit()) == "NaturalMineralsRed") || (UnitGetType(EventUnit()) == "NaturalMinerals")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals);
    lv_shard_position = UnitGetPosition(EventUnit());
    auto06A249F6_g = UnitGroupSearch(null, c_playerAny, lv_shard_position, 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06A249F6_u = UnitGroupCount(auto06A249F6_g, c_unitCountAll);
    for (;; auto06A249F6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto06A249F6_g, auto06A249F6_u);
        if (lv_unit == null) { break; }
        lv_distance = DistanceBetweenPoints(lv_shard_position, UnitGetPosition(lv_unit));
        if ((lv_distance < lv_min_distance) && (UnitGetOwner(lv_unit) != 0)) {
            lv_player = UnitGetOwner(lv_unit);
            lv_min_distance = lv_distance;
        }

    }
    gv_player_shards_collected[lv_player] = (gv_player_shards_collected[lv_player] + lv_value);
    PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_value);
    SoundPlayAtPointForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupSingle(lv_player), lv_shard_position, 0.0, 100.0, 0.0);
    gf_RewardMessage(lv_shard_position, lv_player, lv_value, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardCollected_Init () {
    gt_ShardCollected = TriggerCreate("gt_ShardCollected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnUnit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_spawn_supply_count;
    int[7] lv_cycle_mods;
    unit lv_unit;
    int lv_scan_index;
    string lv_unit_type;
    int lv_bunker_owner;
    int lv_bunker_index;

    // Automatic Variable Declarations
    const int auto0D528480_ae = 60;
    const int auto0D528480_ai = 1;
    int autoC95F5B4B_ae;
    const int autoC95F5B4B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawn_cycle += 1;
    lv_cycle_mods[2] = ModI(gv_spawn_cycle, 2);
    lv_cycle_mods[3] = ModI(gv_spawn_cycle, 3);
    lv_cycle_mods[4] = ModI(gv_spawn_cycle, 4);
    lv_cycle_mods[5] = ModI(gv_spawn_cycle, 5);
    lv_cycle_mods[6] = ModI(gv_spawn_cycle, 6);
    lv_scan_index = 0;
    for ( ; ( (auto0D528480_ai >= 0 && lv_scan_index <= auto0D528480_ae) || (auto0D528480_ai < 0 && lv_scan_index >= auto0D528480_ae) ) ; lv_scan_index += auto0D528480_ai ) {
        lv_bunker_index = gv_spawn_scan_order[lv_scan_index];
        lv_bunker_owner = gv_bunker_owners[lv_bunker_index];
        if ((lv_bunker_owner != 0) && (gv_bunker_retire_status[lv_bunker_index] == false)) {
            lv_spawn_supply_count = gv_race_spawn_unit_type_supply_cost[gv_player_race_index[lv_bunker_owner]][gv_spawner_tier[lv_bunker_index]][gv_spawner_upgrade_status[lv_bunker_index]];
            if ((lv_cycle_mods[lv_spawn_supply_count] == 0) && ((PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesUsed) + lv_spawn_supply_count) <= PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesMade))) {
                lv_unit_type = gv_race_spawn_unit_types[gv_player_race_index[lv_bunker_owner]][gv_spawner_tier[lv_bunker_index]][gv_spawner_upgrade_status[lv_bunker_index]];
                UnitCreate(1, lv_unit_type, 0, lv_bunker_owner, gv_bunker_spawn_points[lv_bunker_index], 270.0);
                lv_unit = UnitLastCreated();
                UnitControlGroupAddUnit(lv_bunker_owner, 1, lv_unit);
                if ((gv_bunker_rally_type[lv_bunker_index] == -3)) {
                    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_bunker_rally_points[lv_bunker_index]), c_orderQueueReplace);
                }
                else {
                    if ((gv_bunker_rally_type[lv_bunker_index] == -4)) {
                        if ((gv_bunker_rally_units[lv_bunker_index] != null)) {
                            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("move", 0), gv_bunker_rally_units[lv_bunker_index]), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_bunker_rally_points[lv_bunker_index]), c_orderQueueReplace);
                        }
                    }
                    else {
                        if ((gv_bunker_rally_type[lv_bunker_index] > 0)) {
                            autoC95F5B4B_ae = gv_bunker_rally_type[lv_bunker_index];
                            lv_index = 1;
                            for ( ; ( (autoC95F5B4B_ai >= 0 && lv_index <= autoC95F5B4B_ae) || (autoC95F5B4B_ai < 0 && lv_index >= autoC95F5B4B_ae) ) ; lv_index += autoC95F5B4B_ai ) {
                                if ((gv_bunker_rally_units_repeated[lv_bunker_index][lv_index] != null)) {
                                    UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("move", 0), gv_bunker_rally_units_repeated[lv_bunker_index][lv_index]), c_orderQueueAddToEnd);
                                }
                                else {
                                    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_bunker_rally_points_repeated[lv_bunker_index][lv_index]), c_orderQueueAddToEnd);
                                }
                            }
                        }

                    }
                }
            }
        }

    }
    gf_RefreshTeamInfoSup();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnUnit_Init () {
    gt_SpawnUnit = TriggerCreate("gt_SpawnUnit_Func");
    gf_Elapsed(gt_SpawnUnit, 0.1);
    gf_Elapsed(gt_SpawnUnit, 1.0);
    gf_Elapsed(gt_SpawnUnit, 3.0);
    gf_Elapsed(gt_SpawnUnit, 5.0);
    gf_Elapsed(gt_SpawnUnit, 7.0);
    gf_Elapsed(gt_SpawnUnit, 9.0);
    gf_Elapsed(gt_SpawnUnit, 11.0);
    gf_Elapsed(gt_SpawnUnit, 13.0);
    gf_Periodic(gt_SpawnUnit, 2.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_OnRallyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;
    int lv_targets;
    unit lv_unit;
    int lv_bunker_index;

    // Automatic Variable Declarations
    int autoAB24AC3D_ae;
    const int autoAB24AC3D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunker_index = gf_GetBunkerIndex(EventUnit());
    lv_targets = UnitRallyPointTargetCount(EventUnit(), 1);
    if ((lv_targets == 0)) {
        lv_player = EventPlayer();
        gv_bunker_rally_type[lv_bunker_index] = -2;
        gv_bunker_spawn_points[lv_bunker_index] = PointWithOffset(gv_bunker_locations[lv_bunker_index], gv_player_spawn_offsets[lv_player][0], gv_player_spawn_offsets[lv_player][1]);
    }

    if ((lv_targets == 1)) {
        lv_unit = UnitRallyPointTargetUnit(EventUnit(), 1, 1);
        if ((lv_unit == null)) {
            gv_bunker_rally_type[lv_bunker_index] = -3;
            gv_bunker_rally_points[lv_bunker_index] = UnitRallyPointTargetPoint(EventUnit(), 1, 1);
        }
        else {
            gv_bunker_rally_type[lv_bunker_index] = -4;
            gv_bunker_rally_units[lv_bunker_index] = UnitRallyPointTargetUnit(EventUnit(), 1, 1);
            gv_bunker_rally_points[lv_bunker_index] = UnitRallyPointTargetPoint(EventUnit(), 1, 1);
        }
        gv_bunker_spawn_points[lv_bunker_index] = libNtve_gf_PointOffsetTowardsPoint(gv_bunker_locations[lv_bunker_index], 1.414, gv_bunker_rally_points[lv_bunker_index]);
    }

    if ((lv_targets >= 2)) {
        autoAB24AC3D_ae = lv_targets;
        lv_index = 1;
        for ( ; ( (autoAB24AC3D_ai >= 0 && lv_index <= autoAB24AC3D_ae) || (autoAB24AC3D_ai < 0 && lv_index >= autoAB24AC3D_ae) ) ; lv_index += autoAB24AC3D_ai ) {
            gv_bunker_rally_type[lv_bunker_index] = lv_targets;
            gv_bunker_rally_units_repeated[lv_bunker_index][lv_index] = UnitRallyPointTargetUnit(EventUnit(), 1, lv_index);
            gv_bunker_rally_points_repeated[lv_bunker_index][lv_index] = UnitRallyPointTargetPoint(EventUnit(), 1, lv_index);
        }
        gv_bunker_spawn_points[lv_bunker_index] = libNtve_gf_PointOffsetTowardsPoint(gv_bunker_locations[lv_bunker_index], 1.414, gv_bunker_rally_points_repeated[lv_bunker_index][1]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRallyChange_Init () {
    gt_OnRallyChange = TriggerCreate("gt_OnRallyChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUpgrade
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_player_bunker_counts[UnitGetOwner(EventUnit())] -= 1;
    gv_player_merc_bunker_counts[UnitGetOwner(EventUnit())] += 1;
    gv_spawner_upgrade_status[gf_GetBunkerIndex(EventUnit())] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgrade_Init () {
    gt_OnUpgrade = TriggerCreate("gt_OnUpgrade_Func");
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionCompleted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_unit);
    if (((UnitGetType(lv_unit) == "SiegeBreakerSieged") || (UnitGetType(lv_unit) == "Reaver"))) {
        UnitGroupRemove(gv_structuresGroup[lv_player], lv_unit);
        if ((TimerGetElapsed(gv_game_timer) <= 660.0)) {
            gv_player_early_tanks_built[lv_player] += 1;
        }

        gv_player_tank_counts[lv_player] += 1;
        TriggerAddEventUnitDied(gt_TankDied, UnitRefFromUnit(lv_unit));
        gf_UpdateTeamInfoForPlayer(UnitGetOwner(lv_unit));
    }
    if ((UnitGetType(EventUnitProgressUnit()) == gv_race_spawner_types[gv_player_race_index[lv_player]][0])) {
        gv_player_built_bunker[lv_player] = true;
        gv_player_bunker_counts[lv_player] += 1;
        gf_OnBunkerCreated(lv_player, EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild_Init () {
    gt_BunkerBuild = TriggerCreate("gt_BunkerBuild_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionStarted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_structure = EventUnitProgressUnit();
    UnitGroupAdd(gv_structuresGroup[UnitGetOwner(lv_structure)], lv_structure);
    if ((gv_boosted_production == true)) {
        UnitBehaviorAddPlayer(lv_structure, "ChronoBoostEnergyCost", UnitGetOwner(lv_structure), 1);
    }

    if ((UnitGetType(EventUnitProgressUnit()) == gv_race_spawner_types[gv_player_race_index[UnitGetOwner(EventUnitProgressUnit())]][0])) {
        gf_OnBunkerCreated3(UnitGetOwner(lv_structure), EventUnitProgressUnit(), false);
    }
    else if (((UnitGetType(EventUnitProgressUnit()) == "SiegeBreakerSieged") || (UnitGetType(EventUnitProgressUnit()) == "Reaver"))) {
        UnitControlGroupAddUnit(UnitGetOwner(EventUnit()), 5, EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild2_Init () {
    gt_BunkerBuild2 = TriggerCreate("gt_BunkerBuild2_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild2, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionCancelled
//--------------------------------------------------------------------------------------------------
bool gt_ConstructionCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_bunker_index;
    int lv_refund_losses;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitProgressUnit();
    lv_player = UnitGetOwner(EventUnitProgressUnit());
    lv_refund_losses = RoundI((0.25 * UnitTypeGetCost(libNtve_gf_TriggeringProgressUnitType(), c_unitCostMinerals)));
    UnitSetCustomValue(lv_unit, 0, lv_refund_losses);
    if ((UnitGetType(lv_unit) == "Bunker")) {
        lv_bunker_index = gf_GetBunkerIndex(lv_unit);
        gf_WriteEventForAllPlayers("bunker_cancelled", ("`index`: " + IntToString(lv_bunker_index) + ", `player`: `" + gv_player_handles[lv_player] + "` "));
    }

    gf_UpdateTeamInfoForPlayer(UnitGetOwner(EventUnitProgressUnit()));
    gf_TestPlayerDead(UnitGetOwner(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConstructionCancelled_Init () {
    gt_ConstructionCancelled = TriggerCreate("gt_ConstructionCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_ConstructionCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BunkerDied
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDestoryed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owning_player;
    unit lv_bunker_unit;
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunker_unit = EventUnit();
    lv_owning_player = EventPlayer();
    lv_bunker_index = gf_GetBunkerIndex(lv_bunker_unit);
    if ((libNtve_gf_KillingPlayer() != 16)) {
        gf_RewardMessage(UnitGetPosition(EventUnit()), libNtve_gf_KillingPlayer(), FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent)), UnitGetOwner(EventUnit()));
        gf_WriteEventForAllPlayers("bunker_killed", ("`index`: " + IntToString(lv_bunker_index) + ", `owner`: `" + gv_player_handles[lv_owning_player] + "`, `killer`: `" + gv_player_handles[libNtve_gf_KillingPlayer()] + "` "));
    }

    if ((gv_bunker_owners[lv_bunker_index] != 0)) {
        gv_bunker_owners[lv_bunker_index] = 0;
        if (true) {
            gv_player_bunker_counts[lv_owning_player] -= 1;
        }
        else {
            gv_player_merc_bunker_counts[lv_owning_player] -= 1;
        }
        gv_spawner_upgrade_status[lv_bunker_index] = 0;
        gf_TestPlayerDead(lv_owning_player);
        gf_UpdateLeaderboard(false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDestoryed_Init () {
    gt_BunkerDestoryed = TriggerCreate("gt_BunkerDestoryed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TankDied
//--------------------------------------------------------------------------------------------------
bool gt_TankDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RewardMessage(UnitGetPosition(EventUnit()), libNtve_gf_KillingPlayer(), FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent)), UnitGetOwner(EventUnit()));
    gv_player_tank_counts[UnitGetOwner(EventUnit())] -= 1;
    gf_UpdateTeamInfoForPlayer(UnitGetOwner(EventUnit()));
    gf_UpdateLeaderboard(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TankDied_Init () {
    gt_TankDied = TriggerCreate("gt_TankDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnScvDied
//--------------------------------------------------------------------------------------------------
bool gt_ScvDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    unit lv_unit;
    unit lv_structure_to_spawn_at;
    point lv_spawnPosition;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == gv_race_worker_types[gv_player_race_index[lv_player]]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringToText(""), true);
    lv_player = UnitGetOwner(EventUnit());
    lv_spawnPosition = UnitGetPosition(EventUnit());
    gv_player_has_worker_death[lv_player] = true;
    gf_RewardMessage(UnitGetPosition(EventUnit()), libNtve_gf_KillingPlayer(), FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent)), UnitGetOwner(EventUnit()));
    gf_TestHugeNukeAchievement(EventUnit());
    Wait(5.0, c_timeGame);
    UnitGroupAdd(lv_group, UnitGroupClosestToPoint(gv_structuresGroup[lv_player], lv_spawnPosition));
    if ((UnitGroupCount(gv_structuresGroup3[lv_player], c_unitCountAll) > 0)) {
        UnitGroupAdd(lv_group, UnitGroupClosestToPoint(gv_structuresGroup3[lv_player], lv_spawnPosition));
    }

    lv_structure_to_spawn_at = UnitGroupClosestToPoint(lv_group, lv_spawnPosition);
    if ((gv_player_alive[lv_player] == true)) {
        TriggerDebugOutput(1, StringToText(""), true);
        UnitCreate(1, gv_race_worker_types[gv_player_race_index[lv_player]], 0, lv_player, PointWithOffset(UnitGetPosition(lv_structure_to_spawn_at), (0.0 - gv_player_spawn_offsets[lv_player][0]), (0.0 - gv_player_spawn_offsets[lv_player][1])), 270.0);
        gf_OnScvCreated(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvDied_Init () {
    gt_ScvDied = TriggerCreate("gt_ScvDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRetire
//--------------------------------------------------------------------------------------------------
bool gt_OnRetire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = true;
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(55.29, 55.29, 55.29), 1.0, 0.0));
    UnitBehaviorAdd(EventUnit(), "RetireStructure", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRetire_Init () {
    gt_OnRetire = TriggerCreate("gt_OnRetire_Func");
    TriggerAddEventUnitAbility(gt_OnRetire, null, AbilityCommand("RetireStructure", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_OnRetire, null, AbilityCommand("InstantRetireStructure", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUnretire
//--------------------------------------------------------------------------------------------------
bool gt_OnUnretire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = false;
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnretire_Init () {
    gt_OnUnretire = TriggerCreate("gt_OnUnretire_Func");
    TriggerAddEventUnitAbility(gt_OnUnretire, null, AbilityCommand("UnretireStructure", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScvCalldown
//--------------------------------------------------------------------------------------------------
bool gt_ScvCalldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC83EDAA1_g;
    int autoC83EDAA1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    gv_player_num_workers[lv_player] += 1;
    gf_UpdateTeamInfoForPlayer(lv_player);
    autoC83EDAA1_g = UnitGroup("SCV", lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC83EDAA1_u = UnitGroupCount(autoC83EDAA1_g, c_unitCountAll);
    for (;; autoC83EDAA1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC83EDAA1_g, autoC83EDAA1_u);
        if (lv_unit == null) { break; }
        gf_OnScvCreated(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvCalldown_Init () {
    gt_ScvCalldown = TriggerCreate("gt_ScvCalldown_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScvCalldown, c_playerAny, "CalldownMULEFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurretCreated
//--------------------------------------------------------------------------------------------------
bool gt_TurretCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnitCreatedUnit();
    if ((UnitGetType(EventUnitCreatedUnit()) == "AutoTurretReleaseWeapon")) {
        if ((UnitGetFacing(EventUnitCreatedUnit()) == -90.0)) {
            lv_position = UnitGetPosition(gv_last_turret[UnitGetOwner(lv_unit)]);
            UnitKill(gv_last_turret[UnitGetOwner(lv_unit)]);
            libNtve_gf_CreateUnitsAtPoint2(1, "AutoTurret", c_unitCreateIgnorePlacement, UnitGetOwner(lv_unit), lv_position);
            UnitCreateEffectUnit(UnitLastCreated(), "AutoturretTimedLife", UnitLastCreated());
            lv_unit = UnitLastCreated();
            UnitGroupAdd(gv_structuresGroup3[UnitGetOwner(lv_unit)], lv_unit);
            TriggerAddEventUnitDied(gt_TurretDied, UnitRefFromUnit(lv_unit));
        }

    }
    else {
        if ((UnitGetType(EventUnitCreatedUnit()) == "AutoTurret")) {
            gv_last_turret[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
            UnitGroupAdd(gv_structuresGroup3[UnitGetOwner(lv_unit)], lv_unit);
            TriggerAddEventUnitDied(gt_TurretDied, UnitRefFromUnit(lv_unit));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretCreated_Init () {
    gt_TurretCreated = TriggerCreate("gt_TurretCreated_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurretDied
//--------------------------------------------------------------------------------------------------
bool gt_TurretDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_structuresGroup3[UnitGetOwner(EventUnit())], EventUnit());
    gf_RewardMessage(UnitGetPosition(EventUnit()), libNtve_gf_KillingPlayer(), FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent)), UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretDied_Init () {
    gt_TurretDied = TriggerCreate("gt_TurretDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectNukeAction
//--------------------------------------------------------------------------------------------------
bool gt_DetectNukeAction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_score_before;
    int lv_score_delta;
    fixed lv_num_kills;
    int lv_num_used;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    UnitSetCustomValue(EventUnit(), 3, UnitGetPropertyFixed(EventUnit(), c_unitPropKills, c_unitPropCurrent));
    UnitSetCustomValue(EventUnit(), 4, 1.0);
    gv_num_nuke_used[lv_player] += 1;
    lv_num_used = gv_num_nuke_used[lv_player];
    gf_UpdateLeaderboard(false);
    lv_score_before = gv_player_scores[lv_player];
    Wait(2.0, c_timeGame);
    lv_num_kills = gf_TestHugeNukeAchievement(EventUnit());
    gf_UpdateLeaderboard(false);
    lv_score_delta = (gv_player_scores[lv_player] - lv_score_before);
    UnitSetCustomValue(EventUnit(), 4, 0.0);
    Wait(1.0, c_timeGame);
    if (((gv_num_nuke_used[lv_player] == lv_num_used) && (gv_num_nukes_detected[lv_player] < gv_num_nuke_used[lv_player]))) {
        gv_num_nuke_used[lv_player] -= 1;
        UnitMagazineArm(gv_nuke_silos[lv_player], AbilityCommand("ArmSiloWithNuke", 0), 1);
        gf_UpdateTeamInfoForPlayer(lv_player);
        TriggerDebugOutput(1, StringExternal("Param/Value/2CB32ECF"), true);
    }
    else {
        gf_WriteEventForAllPlayers("player_nuke", ("`player`: `" + gv_player_handles[lv_player] + "`,  `value`: " + IntToString(lv_score_delta)));
        gf_GameMessage(TextWithColor((IntToText(RoundI(lv_score_delta)) + StringExternal("Param/Value/973DB80B")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))), gv_teams_and_observers[gv_player_team[lv_player]]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectNukeAction_Init () {
    gt_DetectNukeAction = TriggerCreate("gt_DetectNukeAction_Func");
    TriggerAddEventUnitAbility(gt_DetectNukeAction, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectNukeEffect
//--------------------------------------------------------------------------------------------------
bool gt_DetectNukeEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_num_nukes_detected[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectNukeEffect_Init () {
    gt_DetectNukeEffect = TriggerCreate("gt_DetectNukeEffect_Func");
    TriggerAddEventPlayerEffectUsed(gt_DetectNukeEffect, c_playerAny, "NukeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmNuke
//--------------------------------------------------------------------------------------------------
bool gt_ArmNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateTeamInfoForPlayer(UnitGetOwner(EventUnit()));
    gf_UpdateAllWorkers(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmNuke_Init () {
    gt_ArmNuke = TriggerCreate("gt_ArmNuke_Func");
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("ArmSiloWithNuke", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicCheckPlayerDeath
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicCheckDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_loop;

    // Automatic Variable Declarations
    const int auto684E1F6A_ae = 8;
    const int auto684E1F6A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto684E1F6A_ai >= 0 && lv_player <= auto684E1F6A_ae) || (auto684E1F6A_ai < 0 && lv_player >= auto684E1F6A_ae) ) ; lv_player += auto684E1F6A_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            gf_TestPlayerDead(lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicCheckDeath_Init () {
    gt_PeriodicCheckDeath = TriggerCreate("gt_PeriodicCheckDeath_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicCheckDeath, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeaveGame
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaveGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_OnPlayerLeave(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaveGame_Init () {
    gt_PlayerLeaveGame = TriggerCreate("gt_PlayerLeaveGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaveGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralTrickle
//--------------------------------------------------------------------------------------------------
bool gt_MineralTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto52F9A234_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_total_resource_granted += 5;
    auto52F9A234_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto52F9A234_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_left_game[lv_player] == false)) {
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralTrickle_Init () {
    gt_MineralTrickle = TriggerCreate("gt_MineralTrickle_Func");
    gf_Periodic(gt_MineralTrickle, 3.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TwitchChat
//--------------------------------------------------------------------------------------------------
bool gt_TwitchChat_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_cycle_number;
    string lv_next_key;
    int lv_message_number;
    int lv_player;
    bank[17] lv_twitch_banks;
    string[17] lv_last_section_id;
    string lv_current_section_id;

    // Automatic Variable Declarations
    playergroup autoA17F09F5_g;
    playergroup auto88A960C8_g;

    // Variable Initialization
    lv_next_key = "";
    lv_message_number = 1;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_last_section_id[init_i] = "";
    }
    lv_current_section_id = "";

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_cycle_number += 1;
        autoA17F09F5_g = gv_all_observers;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoA17F09F5_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_twitch_banks[lv_player] != null)) {
                BankReload(lv_twitch_banks[lv_player]);
            }

        }
        Wait(1.0, c_timeGame);
        auto88A960C8_g = gv_all_observers;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto88A960C8_g, lv_player);
            if (lv_player < 0) { break; }
            if ((lv_twitch_banks[lv_player] != null)) {
                BankWait(lv_twitch_banks[lv_player]);
                lv_current_section_id = gf_GetSectionName(lv_twitch_banks[lv_player]);
                if ((StringEqual(lv_current_section_id, lv_last_section_id[lv_player], c_stringCase) == true)) {
                    continue;
                }

                lv_last_section_id[lv_player] = lv_current_section_id;
                while (true) {
                    lv_next_key = (IntToString(lv_message_number) + "n");
                    if ((BankKeyExists(lv_twitch_banks[lv_player], lv_current_section_id, lv_next_key) == true)) {
                        gf_GameMessage((BankValueGetAsText(lv_twitch_banks[lv_player], lv_current_section_id, lv_next_key) + StringExternal("Param/Value/E745ABC0") + BankValueGetAsText(lv_twitch_banks[lv_player], lv_current_section_id, (IntToString(lv_message_number) + "v"))), gv_all_observers);
                        lv_message_number += 1;
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                if (((ModI(lv_cycle_number, 60) == lv_player) || (lv_cycle_number == 1))) {
                    if ((BankExists("twitch", lv_player) == true)) {
                        BankLoad("twitch", lv_player);
                        lv_twitch_banks[lv_player] = BankLastCreated();
                        lv_last_section_id[lv_player] = gf_GetSectionName(lv_twitch_banks[lv_player]);
                    }

                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TwitchChat_Init () {
    gt_TwitchChat = TriggerCreate("gt_TwitchChat_Func");
    gf_Elapsed(gt_TwitchChat, 3.0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckCheat
//--------------------------------------------------------------------------------------------------
bool gt_CheckCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4BA2B643_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("[bnet:Core (Mod)/0.0/999,file:Mods/Core.SC2Mod]4000") == "Norm"))) {
            return false;
        }

        if (!((gv_anonymous_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4BA2B643_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4BA2B643_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) && (StringCompare(libNtve_gf_DialogItemEditValue(gv_customChatRecord.lv_recipient, lv_player), "C", c_stringCase) == 0) && (PlayerGroupHasPlayer(gv_cheated_players, lv_player) == false))) {
            PlayerGroupAdd(gv_cheated_players, lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckCheat_Init () {
    gt_CheckCheat = TriggerCreate("gt_CheckCheat_Func");
    TriggerAddEventTimePeriodic(gt_CheckCheat, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PunishCheat
//--------------------------------------------------------------------------------------------------
bool gt_PunishCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cheater;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup autoD05D4C0E_g;
    const int autoE0E0167E_ae = 63;
    const int autoE0E0167E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_anonymous_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD05D4C0E_g = gv_cheated_players;
    lv_cheater = -1;
    while (true) {
        lv_cheater = PlayerGroupNextPlayer(autoD05D4C0E_g, lv_cheater);
        if (lv_cheater < 0) { break; }
        if ((gv_player_alive[lv_cheater] == true)) {
            lv_slot = 1;
            for ( ; ( (autoE0E0167E_ai >= 0 && lv_slot <= autoE0E0167E_ae) || (autoE0E0167E_ai < 0 && lv_slot >= autoE0E0167E_ae) ) ; lv_slot += autoE0E0167E_ai ) {
                if ((gv_bunker_owners[lv_slot] == lv_cheater)) {
                    UnitIssueOrder(gv_bunkers[lv_slot], Order(AbilityCommand("RetireStructure", 0)), c_orderQueueReplace);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PunishCheat_Init () {
    gt_PunishCheat = TriggerCreate("gt_PunishCheat_Func");
    TriggerAddEventTimePeriodic(gt_PunishCheat, 73.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Chat System
//--------------------------------------------------------------------------------------------------
bool gt_UseChatSystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chat_string;
    int lv_player;

    // Automatic Variable Declarations
    string autoA2E75917_val;

    // Variable Initialization
    lv_chat_string = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chat_string = EventChatMessage(false);
    if (((RandomInt(0, 20) == 1) && (PlayerGroupCount(gv_all_observers) <= 1))) {
        if ((StringCompare(gv_player_handles[EventPlayer()], "1-S2-1-1600897", c_stringCase) == 0)) {
            lv_chat_string = (lv_chat_string + ". Also, #*$% kirto.");
        }

        if ((StringCompare(gv_player_handles[EventPlayer()], "1-S2-1-9978698", c_stringCase) == 0)) {
            lv_chat_string = (lv_chat_string + ". Also, I'm probably lying");
        }

        if ((StringCompare(gv_player_handles[EventPlayer()], "1-S2-1-10869159", c_stringCase) == 0)) {
            lv_chat_string = (lv_chat_string + ". Also, I like cats");
        }

        if ((StringCompare(gv_player_handles[EventPlayer()], "1-S2-1-1122511", c_stringCase) == 0)) {
            lv_chat_string = (lv_chat_string + ". Also, I like tanks");
        }

        if ((StringCompare(gv_player_handles[EventPlayer()], "1-S2-1-3490758", c_stringCase) == 0)) {
            lv_chat_string = (lv_chat_string + ". Also, quack");
        }

    }

    if ((gv_custom_chat_enabled == true)) {
        autoA2E75917_val = libNtve_gf_DialogItemEditValue(gv_customChatRecord.lv_recipient, EventPlayer());
        if (autoA2E75917_val == "A") {
            if ((gv_player_is_observer[EventPlayer()] == true)) {
                gf_SendChatMessage(lv_chat_string, gv_all_players_and_observers, EventPlayer(), StringExternal("Param/Value/DD33938D"));
            }
            else {
                if ((gv_all_chat_enabled == true)) {
                    if ((gv_team_alive[gv_player_team[EventPlayer()]] == false)) {
                        gf_SendChatMessage(lv_chat_string, gv_dead_team_players, EventPlayer(), StringExternal("Param/Value/0F8B8BDB"));
                    }
                    else {
                        if ((gv_player_alive[EventPlayer()] == true)) {
                            gf_SendChatMessage(lv_chat_string, gv_all_players_and_observers, EventPlayer(), StringExternal("Param/Value/2D742252"));
                        }

                    }
                }

            }
        }
        else if (autoA2E75917_val == "T") {
            if ((gv_player_is_observer[EventPlayer()] == true)) {
                gf_SendChatMessage(EventChatMessage(false), gv_all_observers, EventPlayer(), StringExternal("Param/Value/0A5765B9"));
            }
            else {
                gf_SendChatMessage(EventChatMessage(false), gv_teams[gv_player_team[EventPlayer()]], EventPlayer(), StringExternal("Param/Value/295089B1"));
            }
        }
        else {
        }
    }

    if ((StringEqual(StringSub(EventChatMessage(false), 1, 1), "-", c_stringCase) == true)) {
        if (((StringEqual(EventChatMessage(false), "-allowbadbuilds", c_stringCase) == true))) {
            gf_AchievementsCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-allowbadbuilds", c_stringCase) == true))) {
            gf_AllowBadBuildsCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-bunkcount", c_stringCase) == true))) {
            gf_BunkCountCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-c", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-control", c_stringCase) == true))) {
            gf_ControlCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-e", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-elo", c_stringCase) == true))) {
            gf_DisplayElo(PlayerGroupSingle(EventPlayer()));
        }

        if (((StringEqual(EventChatMessage(false), "-f", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-fog", c_stringCase) == true))) {
            gf_TMFogCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-handles", c_stringCase) == true))) {
            gf_HandlesCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-h", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-help", c_stringCase) == true))) {
            gf_HelpCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-l", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-leaderboard", c_stringCase) == true))) {
            gf_ToggleLeaderboardMode(EventPlayer());
        }

        if (((StringContains(EventChatMessage(false), "-m ", c_stringBegin, c_stringCase) == true))) {
            gf_MutePlayerCommand(EventPlayer(), StringSub(EventChatMessage(false), 4, (StringLength(EventChatMessage(false)) - 0)), true);
        }

        if (((StringContains(EventChatMessage(false), "-mute ", c_stringBegin, c_stringCase) == true))) {
            gf_MutePlayerCommand(EventPlayer(), StringSub(EventChatMessage(false), 7, (StringLength(EventChatMessage(false)) - 0)), true);
        }

        if (((StringEqual(EventChatMessage(false), "-m", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-mute", c_stringCase) == true))) {
            gf_MutePlayerCommand(EventPlayer(), "", true);
        }

        if (((StringEqual(EventChatMessage(false), "-p", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-performance", c_stringCase) == true))) {
            gf_PerfCommand(PlayerGroupSingle(EventPlayer()));
        }

        if (((StringEqual(EventChatMessage(false), "-pause", c_stringCase) == true))) {
            gf_PlayerPause(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-r", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-records", c_stringCase) == true))) {
            gf_RecordCommand();
        }

        if (((StringEqual(EventChatMessage(false), "-reset", c_stringCase) == true))) {
            gf_TMResetCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-resetupgrades", c_stringCase) == true))) {
            gf_TMResetUpgradesCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-reveal", c_stringCase) == true))) {
            gf_RevealCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-results", c_stringCase) == true))) {
            gf_ResultsCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-stubborn", c_stringCase) == true))) {
            gf_StubbornCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-t", c_stringCase) == true) || (StringEqual(EventChatMessage(false), "-trades", c_stringCase) == true))) {
            gf_TradesCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-match_end", c_stringCase) == true))) {
            gf_MatchEndCommand(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-forceleave", c_stringCase) == true))) {
            gf_ForceTeammateLeave(EventPlayer());
        }

        if (((StringEqual(EventChatMessage(false), "-test", c_stringCase) == true))) {
            gf_DebugCommand(EventPlayer());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseChatSystem_Init () {
    gt_UseChatSystem = TriggerCreate("gt_UseChatSystem_Func");
    TriggerAddEventChatMessage(gt_UseChatSystem, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Edit Value
//--------------------------------------------------------------------------------------------------
bool gt_EditValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_customChatRecord.lv_playerNames_String[EventPlayer()] = DialogControlGetPropertyAsString(EventDialogControl(), c_triggerControlPropertyEditText, EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(DialogControlGetPropertyAsString(EventDialogControl(), c_triggerControlPropertyEditText, EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EditValue_Init () {
    gt_EditValue = TriggerCreate("gt_EditValue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Main Loop
//--------------------------------------------------------------------------------------------------
bool gt_MainLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_time;
    fixed lv_noexecute;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait((GameGetMissionTime() % 1) + 1, c_timeReal);
    while ( true ) {
        if ( GameIsMissionTimePaused() ) {
            Wait(0.062, c_timeReal);
        } else {
            lv_time = GameGetMissionTime();
            if (lv_time > 1) {
                lv_noexecute = 0.1;
                for (lv_i = 0; lv_i < gv_activePeriodicCount; lv_i += 1) {
                    if ((lv_time % gv_activePeriodic[lv_i]) <= 0.9) {
                        TriggerExecute(gv_activePeriodicTriggers[lv_i], true, false);
                        lv_noexecute = 0;
                    }
                }
            }
            Wait(0.97 - lv_noexecute, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MainLoop_Init () {
    gt_MainLoop = TriggerCreate("gt_MainLoop_Func");
    TriggerAddEventMapInit(gt_MainLoop);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Clicked
//--------------------------------------------------------------------------------------------------
bool gt_ButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_game_paused == true))) {
            return false;
        }

        if (!((gv_game_resuming == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_pause_buttons[0])) {
        gv_player_vote_statuses[EventPlayer()] = 0;
    }

    if ((EventDialogControl() == gv_pause_buttons[1])) {
        gv_player_vote_statuses[EventPlayer()] = 1;
    }

    if ((EventDialogControl() == gv_pause_buttons[2])) {
        gv_player_vote_statuses[EventPlayer()] = 2;
    }

    gf_EvaluatePlayerStatuses();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonClicked_Init () {
    gt_ButtonClicked = TriggerCreate("gt_ButtonClicked_Func");
    TriggerEnable(gt_ButtonClicked, false);
    TriggerAddEventDialogControl(gt_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Zoom_Init();
    gt_ButtonPress_Init();
    gt_CheckForInvalidGame_Init();
    gt_ScanOpponentUps_Init();
    gt_MeleeInitialization_Init();
    gt_CheckInitCompleted_Init();
    gt_GameTimeRemaining_Init();
    gt_CeaseFireOver_Init();
    gt_AutoEnableBadBuilds_Init();
    gt_PeriodicReveal_Init();
    gt_Checkbox_Init();
    gt_DetectMovement_Init();
    gt_DetectPlayerChat_Init();
    gt_TrackUnitMovement_Init();
    gt_TrackRallyChange_Init();
    gt_ShareControlForAfkPlayer_Init();
    gt_DisplayEloAtStart_Init();
    gt_ComputeStandings_Init();
    gt_LeaderboardPeriodicRefresh_Init();
    gt_InitWinGameAchievement_Init();
    gt_InitOneBunk_Init();
    gt_InitCombatShields_Init();
    gt_InitSafeWorker_Init();
    gt_InitCarryTeammate_Init();
    gt_InitHugeNuke_Init();
    gt_InitShardPickup_Init();
    gt_TestPickupAchievement_Init();
    gt_InitTankRush_Init();
    gt_HelpInit_Init();
    gt_PeriodicUpdateNetResources_Init();
    gt_ResourceTradingTracker_Init();
    gt_UpdateLosses_Init();
    gt_TeamInfoTrackUpgrades_Init();
    gt_RefreshTeamInfoMins_Init();
    gt_UpdateTeamInfo_Init();
    gt_ZoneControlDetection_Init();
    gt_ZoneControlLimitReduction_Init();
    gt_ZoneControlReward_Init();
    gt_tower_Init();
    gt_ShardSpawn_Init();
    gt_ShardCollected_Init();
    gt_SpawnUnit_Init();
    gt_OnRallyChange_Init();
    gt_OnUpgrade_Init();
    gt_BunkerBuild_Init();
    gt_BunkerBuild2_Init();
    gt_ConstructionCancelled_Init();
    gt_BunkerDestoryed_Init();
    gt_TankDied_Init();
    gt_ScvDied_Init();
    gt_OnRetire_Init();
    gt_OnUnretire_Init();
    gt_ScvCalldown_Init();
    gt_TurretCreated_Init();
    gt_TurretDied_Init();
    gt_DetectNukeAction_Init();
    gt_DetectNukeEffect_Init();
    gt_ArmNuke_Init();
    gt_PeriodicCheckDeath_Init();
    gt_PlayerLeaveGame_Init();
    gt_MineralTrickle_Init();
    gt_TwitchChat_Init();
    gt_CheckCheat_Init();
    gt_PunishCheat_Init();
    gt_UseChatSystem_Init();
    gt_EditValue_Init();
    gt_MainLoop_Init();
    gt_ButtonClicked_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
