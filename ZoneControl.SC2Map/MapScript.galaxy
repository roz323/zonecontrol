//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Zone Control CE Dev
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_InitializeHashInput ();
void lib1_gf_AddBooleanToHashInput (bool lp_boolean);
void lib1_gf_AddByteToHashInput (byte lp_byte);
void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount);
void lib1_gf_AddIntegerToHashInput (int lp_integer);
void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount);
void lib1_gf_AddRealToHashInput (fixed lp_real);
void lib1_gf_AddStringToHashInput (string lp_string);
void lib1_gf_AddUnitToHashInput (unit lp_unit);
string lib1_gf_GenerateMD5HashCode ();
string lib1_gf_GenerateSHA256HashCode ();

//--------------------------------------------------------------------------------------------------
// Library: MD5_Hash
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Global Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Hash Input
byte[1024] HashInputData;
int HashInputSize = 0;
int GetHashInputLittleEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    result = HashInputData[position];
    temp = HashInputData[position + 1];
    result |= temp << 8;
    temp = HashInputData[position + 2];
    result |= temp << 16;
    temp = HashInputData[position + 3];
    result |= temp << 24;
    return result;
}
int GetHashInputBigEndianInt( int position )
{
    int temp;
    int result;
    position *= 4;
    temp = HashInputData[position];
    result = temp << 24;
    temp = HashInputData[position + 1];
    result |= temp << 16;
    temp = HashInputData[position + 2];
    result |= temp << 8;
    temp = HashInputData[position + 3];
    result |= temp;
    return result;
}
// ASCII conversion
string asciiTable = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";
byte CharToAsciiCode(string charContainingString, int charPosition)
{
    return StringFind( asciiTable, StringSub( charContainingString, charPosition + 1, charPosition + 1), c_stringCase );
}
//  Hex Conversion
string[16] HexTable;
string GetHexChar( int number )
{
    return HexTable[number];
}
string GetUnsignedLittleEndianHexRepresentation( int unsignedInt )
{
    string representation = "";
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    return representation;
}
string GetUnsignedHexRepresentation( int unsignedInt )
{   
    string representation = "";
    
    if ( unsignedInt >= 0 )
    {
        representation += GetHexChar( unsignedInt >> 28 );
    }
    else
    {
        unsignedInt += 0x7FFFFFFF + 1;
        representation += GetHexChar( 0x8 + ( unsignedInt >> 28 ) );
    }
    representation += GetHexChar( ( unsignedInt & 0x0F000000) >> 24 );
    representation += GetHexChar( ( unsignedInt & 0x00F00000 ) >> 20 );
    representation += GetHexChar( ( unsignedInt & 0x000F0000) >> 16 );
    representation += GetHexChar( ( unsignedInt & 0x0000F000 ) >> 12 );
    representation += GetHexChar( ( unsignedInt & 0x00000F00) >> 8 );
    representation += GetHexChar( ( unsignedInt & 0x000000F0 ) >> 4 );
    representation += GetHexChar( ( unsignedInt & 0x0000000F ) );
    return representation;
}
// Resolve data function
int GetFixedDataAsInt(fixed fixedVar)
{
    int data;
    data= ( FixedToInt(fixedVar) << 12 );
    fixedVar -= data;
    data|= FixedToInt( fixedVar* Pow2(12) );
    return data;
}
//  Operations
int UnsignedRightShift( int input, int shift )  // Right shift pads bit 1's when the value is under zero for signed integers. So this is the work-around.
{
    return input >> shift & ~( -1 << ( 32 - shift  ) );
}
int UnsignedLeftRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate( int input, int rotation )
{
    rotation = ModI( rotation, 32 );
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}
int UnsignedLeftRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return ( input << rotation ) | UnsignedRightShift (input,  32 - rotation );
}
int UnsignedRightRotate32( int input, int rotation ) // Optimized version for rotation within range 0 =< x =< 32
{
    return UnsignedRightShift( input, rotation ) | ( input << ( 32 - rotation ) ); 
}

//--------------------------------------------------------------------------------------------------
// Custom Script: MD5 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Md5F( int b, int c, int d )
{
    return d ^ ( b & ( c ^ d ) );
}
int Md5G( int b, int c, int d )
{
    return c ^ ( d & ( b ^ c ) );
}
int Md5H( int b, int c, int d )
{
    return b ^ c ^ d;
}
int Md5I( int b, int c, int d )
{
    return c ^ (b | (~d));
}
int Md5FF( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5F( b, c, d ) + k + w ), r ) + b;
}
int Md5GG( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5G( b, c, d ) + k + w ), r ) + b;
}
int Md5HH( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5H( b, c, d ) + k + w ), r ) + b;
}
int Md5II( int a, int b, int c, int d, int w, int r, int k )
{
    return UnsignedLeftRotate32( ( a + Md5I( b, c, d ) + k + w ), r ) + b;
}
string GenerateMd5HashCode()
{    
    //  Variables
    int h0 = 0x67452301;
    int h1 = 0x0E000000 << 4 | 0x0FCDAB89;
    int h2 = 0x09000000 << 4 | 0x08BADCFE;
    int h3 = 0x10325476;
    int a; int b; int c; int d;
    int i = 0; int j = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j ), 7, 0x0d000000 << 4 | 0x076aa478 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 1 ), 12, 0x0e000000 << 4 | 0x08c7b756 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 17, 0x242070db );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 3 ), 22, 0x0c000000 << 4 | 0x01bdceee );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 7, 0x0f000000 << 4 | 0x057c0faf );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 5 ), 12, 0x4787c62a );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 17, 0x0a000000 << 4 | 0x08304613 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 7 ), 22, 0x0f000000 << 4 | 0x0d469501 );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 7, 0x698098d8 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 9 ), 12, 0x08000000 << 4 | 0x0b44f7af );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 17, 0x0f000000 << 4 | 0x0fff5bb1 );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 11 ), 22, 0x08000000 << 4 | 0x095cd7be );
        a = Md5FF( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 7, 0x6b901122 );
        d = Md5FF( d, a, b, c, GetHashInputLittleEndianInt( j + 13 ), 12, 0x0f000000 << 4 | 0x0d987193 );
        c = Md5FF( c, d, a, b, GetHashInputLittleEndianInt( j+ 14 ), 17, 0x0a000000 << 4 | 0x0679438e );
        b = Md5FF( b, c, d, a, GetHashInputLittleEndianInt( j + 15 ), 22, 0x49b40821 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 5, 0x0f000000 << 4 | 0x061e2562 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 6 ), 9, 0x0c000000 << 4 | 0x0040b340 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 14, 0x265e5a51 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j ), 20, 0x0e000000 << 4 | 0x09b6c7aa );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 5, 0x0d000000 << 4 | 0x062f105d );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 10 ), 9, 0x02441453 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 14, 0x0d000000 << 4 | 0x08a1e681 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 4 ), 20, 0x0e000000 << 4 | 0x07d3fbc8 );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 5, 0x21e1cde6 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 14 ), 9, 0x0c000000 << 4 | 0x033707d6 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 14, 0x0f000000 << 4 | 0x04d50d87 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 8 ), 20, 0x455a14ed );
        a = Md5GG( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 5, 0x0a000000 << 4 | 0x09e3e905 );
        d = Md5GG( d, a, b, c, GetHashInputLittleEndianInt( j + 2 ), 9, 0x0f000000 << 4 | 0x0cefa3f8 );
        c = Md5GG( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 14,  0x676f02d9 );
        b = Md5GG( b, c, d, a, GetHashInputLittleEndianInt( j + 12 ), 20, 0x08000000 << 4 | 0x0d2a4c8a );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 5 ), 4, 0x0f000000 << 4 | 0x0ffa3942 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 8 ), 11, 0x08000000 << 4 | 0x0771f681 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 11 ), 16, 0x6d9d6122 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 14 ), 23, 0x0f000000 << 4 | 0x0de5380c );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 1 ), 4, 0x0a000000 << 4 | 0x04beea44 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 4 ), 11, 0x4bdecfa9 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 7 ), 16, 0x0f000000 << 4 | 0x06bb4b60 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 10 ), 23, 0x0b000000 << 4 | 0x0ebfbc70 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 13 ), 4, 0x289b7ec6 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 0 ), 11, 0x0e000000 << 4 | 0x0aa127fa );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 3 ), 16, 0x0d000000 << 4 | 0x04ef3085 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 6 ), 23, 0x04881d05 );
        a = Md5HH( a, b, c, d, GetHashInputLittleEndianInt( j + 9 ), 4, 0x0d000000 << 4 | 0x09d4d039 );
        d = Md5HH( d, a, b, c, GetHashInputLittleEndianInt( j + 12 ), 11, 0x0e000000 << 4 | 0x06db99e5 );
        c = Md5HH( c, d, a, b, GetHashInputLittleEndianInt( j + 15 ), 16, 0x1fa27cf8 );
        b = Md5HH( b, c, d, a, GetHashInputLittleEndianInt( j + 2 ), 23, 0x0c000000 << 4 | 0x04ac5665 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j ), 6, 0x0f000000 << 4 | 0x04292244 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 7 ), 10, 0x432aff97 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 14 ), 15, 0x0a000000 << 4 | 0x0b9423a7 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 5 ), 21, 0x0f000000 << 4 | 0x0c93a039 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 12 ), 6, 0x655b59c3 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 3 ), 10, 0x08000000 << 4 | 0x0f0ccc92 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 10 ), 15, 0x0f000000 << 4 | 0x0feff47d );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 1 ), 21, 0x08000000 << 4 | 0x05845dd1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 8 ), 6, 0x6fa87e4f );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 15 ), 10, 0x0f000000 << 4 | 0x0e2ce6e0 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 6 ), 15, 0x0a000000 << 4 | 0x03014314 );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 13 ), 21, 0x4e0811a1 );
        a = Md5II( a, b, c, d, GetHashInputLittleEndianInt( j + 4 ), 6, 0x0f000000 << 4 | 0x07537e82 );
        d = Md5II( d, a, b, c, GetHashInputLittleEndianInt( j + 11 ), 10, 0x0b000000 << 4 | 0x0d3af235 );
        c = Md5II( c, d, a, b, GetHashInputLittleEndianInt( j + 2 ), 15, 0x2ad7d2bb );
        b = Md5II( b, c, d, a, GetHashInputLittleEndianInt( j + 9 ), 21, 0x0e000000 << 4 | 0x0b86d391 );
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        i += 64;
        j += 16;
    }
    
    return GetUnsignedLittleEndianHexRepresentation( h0 ) + GetUnsignedLittleEndianHexRepresentation( h1 ) + GetUnsignedLittleEndianHexRepresentation( h2 ) + GetUnsignedLittleEndianHexRepresentation( h3 );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SHA256 Script
//--------------------------------------------------------------------------------------------------
// Copyright (C) 2011 by Danny de Jong
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
int Sha256Ch( int x, int y, int z )
{
    return ( x & y ) ^ ( ~x & z );
}
int Sha256Maj( int x, int y, int z )
{
    return ( x & y ) ^ ( x & z ) ^ ( y & z );
}
int Sha256CapitalSigma0( int x )
{
    return UnsignedRightRotate32( x, 2 ) ^ UnsignedRightRotate32( x, 13 ) ^ UnsignedRightRotate32( x, 22 );
}
int Sha256CapitalSigma1( int x )
{
    return UnsignedRightRotate32( x, 6 ) ^ UnsignedRightRotate32( x, 11 ) ^ UnsignedRightRotate32( x, 25 );
}
int Sha256Sigma0( int x )
{
    return UnsignedRightRotate32( x, 7 ) ^ UnsignedRightRotate32( x, 18 ) ^ UnsignedRightShift( x, 3 );
}
int Sha256Sigma1( int x )
{
    return UnsignedRightRotate32( x, 17 ) ^ UnsignedRightRotate32( x, 19 ) ^ UnsignedRightShift( x, 10 );
}
int Sha256T0( int e, int f, int g, int h, int k, int w )
{
    return h + Sha256CapitalSigma1( e ) + Sha256Ch( e, f, g ) + k + w;
}
int Sha256T1( int a, int b, int c )
{
    return Sha256CapitalSigma0( a ) + Sha256Maj( a, b, c );
}
string GenerateSha256HashCode()
{
    //  Variables
    int h0 = 0x6a09e667;
    int h1 = 0x0b000000 << 4 | 0x0b67ae85;
    int h2 = 0x3c6ef372;
    int h3 = 0x0a000000 << 4 | 0x054ff53a;
    int h4 = 0x510e527f;
    int h5 = 0x09000000 << 4 | 0x0b05688c;
    int h6 = 0x1f83d9ab;
    int h7 = 0x5be0cd19;
    int a; int b; int c; int d; int e; int f; int g; int h; int t0; int t1;
    int[64] w;
    int i = 0; int j = 0; int k = 0;
    int messageNBits;
    int paddingLength;
    //  Prepare message
    messageNBits = HashInputSize * 8;
    HashInputData[HashInputSize] = 0x80;
    HashInputSize += 1;
    paddingLength =  56 - ModI( HashInputSize, 64 );
    if ( paddingLength < 0 )
    {
        paddingLength += 64;
    }
    while ( i < paddingLength )
    {
        HashInputData[HashInputSize] = 0;
        HashInputSize += 1;
        i += 1;
    }
    //Note: You might want to change this when the hash input increases in size.
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = 0;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits >> 8;
    HashInputSize += 1;
    HashInputData[HashInputSize] = messageNBits;
    HashInputSize += 1;
    //  Loop
    i = 0;
    while ( i < ( HashInputSize - 1 ) )
    {   
        //  Working Variables
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        e = h4;
        f = h5;
        g = h6;
        h = h7;
        //  Preparing Extra Message Schedule
        j = 0;
        while ( j < 16 )
        {
            w[j] = GetHashInputBigEndianInt( k );
            j += 1;
            k += 1;
        }
        while ( j < 64 )
        {
            w[j] =  Sha256Sigma1( w[j - 2] ) +
            w[j - 7] +
            Sha256Sigma0( w[j - 15] ) +
            w[j - 16];
            
            j += 1;
        }
        // 0 to 15
        t0 = Sha256T0( e, f, g, h, 0x428a2f98, w[0] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x71374491, w[1] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x05c0fbcf, w[2] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x0e000000 << 4 | 0x09b5dba5, w[3] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x3956c25b, w[4] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x59f111f1, w[5] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x023f82a4, w[6] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0a000000 << 4 | 0x0b1c5ed5, w[7] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0; i += 1;
        t0 = Sha256T0( e, f, g, h, 0x0d000000 << 4 | 0x0807aa98, w[8] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0; i += 1;
        t0 = Sha256T0( d, e, f, g, 0x12835b01, w[9] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0; i += 1;
        t0 = Sha256T0( c, d, e, f, 0x243185be, w[10] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0; i += 1;
        t0 = Sha256T0( b, c, d, e, 0x550c7dc3, w[11] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0; i += 1;
        t0 = Sha256T0( a, b, c, d, 0x72be5d74, w[12] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0; i += 1;
        t0 = Sha256T0( h, a, b, c, 0x08000000 << 4 | 0x00deb1fe, w[13] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0; i += 1;
        t0 = Sha256T0( g, h, a, b, 0x09000000 << 4 | 0x0bdc06a7, w[14] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0; i += 1;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x019bf174, w[15] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 16 to 31
        t0 = Sha256T0( e, f, g, h, 0x0e000000 << 4 | 0x049b69c1, w[16] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0e000000 << 4 | 0x0fbe4786, w[17] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0fc19dc6, w[18] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x240ca1cc, w[19] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x2de92c6f, w[20] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4a7484aa, w[21] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5cb0a9dc, w[22] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x76f988da, w[23] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x09000000 << 4 | 0x083e5152, w[24] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x0831c66d, w[25] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0b000000 << 4 | 0x000327c8, w[26] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0b000000 << 4 | 0x0f597fc7, w[27] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0c000000 << 4 | 0x06e00bf3, w[28] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x05a79147, w[29] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x06ca6351, w[30] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x14292967, w[31] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 32 to 47
        t0 = Sha256T0( e, f, g, h, 0x27b70a85, w[32] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x2e1b2138, w[33] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x4d2c6dfc, w[34] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x53380d13, w[35] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x650a7354, w[36] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x766a0abb, w[37] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x08000000 << 4 | 0x01c2c92e, w[38] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x09000000 << 4 | 0x02722c85, w[39] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x0a000000 << 4 | 0x02bfe8a1, w[40] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x0a000000 << 4 | 0x081a664b, w[41] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x0c000000 << 4 | 0x024b8b70, w[42] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x0c000000 << 4 | 0x076c51a3, w[43] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x0d000000 << 4 | 0x0192e819, w[44] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0d000000 << 4 | 0x06990624, w[45] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0f000000 << 4 | 0x040e3585, w[46] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x106aa070, w[47] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        // 48 to 63
        t0 = Sha256T0( e, f, g, h, 0x19a4c116, w[48] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x1e376c08, w[49] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x2748774c, w[50] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x34b0bcb5, w[51] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x391c0cb3, w[52] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x4ed8aa4a, w[53] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x5b9cca4f, w[54] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x682e6ff3, w[55] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        t0 = Sha256T0( e, f, g, h, 0x748f82ee, w[56] ); t1 = Sha256T1( a, b, c );
        h = t0 + t1; d += t0;
        t0 = Sha256T0( d, e, f, g, 0x78a5636f, w[57] ); t1 = Sha256T1( h, a, b );
        g = t0 + t1; c += t0;
        t0 = Sha256T0( c, d, e, f, 0x08000000 << 4 | 0x04c87814, w[58] ); t1 = Sha256T1( g, h, a );
        f = t0 + t1; b += t0;
        t0 = Sha256T0( b, c, d, e, 0x08000000 << 4 | 0x0cc70208, w[59] ); t1 = Sha256T1( f, g, h );
        e = t0 + t1; a += t0;
        t0 = Sha256T0( a, b, c, d, 0x09000000 << 4 | 0x00befffa, w[60] ); t1 = Sha256T1( e, f, g );
        d = t0 + t1; h += t0;
        t0 = Sha256T0( h, a, b, c, 0x0a000000 << 4 | 0x04506ceb, w[61] ); t1 = Sha256T1( d, e, f );
        c = t0 + t1; g += t0;
        t0 = Sha256T0( g, h, a, b, 0x0b000000 << 4 | 0x0ef9a3f7, w[62] ); t1 = Sha256T1( c, d, e );
        b = t0 + t1; f += t0;
        t0 = Sha256T0( f, g, h, a, 0x0c000000 << 4 | 0x067178f2, w[63] ); t1 = Sha256T1( b, c, d );
        a = t0 + t1; e += t0;
        h0 += a;
        h1 += b;
        h2 += c;
        h3 += d;
        h4 += e;
        h5 += f;
        h6 += g;
        h7 += h;
        i += 49;
    }
    return  GetUnsignedHexRepresentation(h0) + 
            GetUnsignedHexRepresentation(h1) + 
            GetUnsignedHexRepresentation(h2) + 
            GetUnsignedHexRepresentation(h3) + 
            GetUnsignedHexRepresentation(h4) + 
            GetUnsignedHexRepresentation(h5) + 
            GetUnsignedHexRepresentation(h6) + 
            GetUnsignedHexRepresentation(h7);
}

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_InitializeHashInput () {
    // Variable Declarations
    string lv_emptyString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_emptyString = "";

    // Implementation
    HashInputSize = 0;
    if ( HexTable[0] == "" )
    {
        HexTable[0] = "0"; HexTable[1] = "1"; HexTable[2] = "2"; HexTable[3] = "3";
        HexTable[4] = "4"; HexTable[5] = "5"; HexTable[6] = "6"; HexTable[7] = "7";
        HexTable[8] = "8"; HexTable[9] = "9"; HexTable[10] = "a"; HexTable[11] = "b";
        HexTable[12] = "c"; HexTable[13] = "d"; HexTable[14] = "e"; HexTable[15] = "f";
    }
}

void lib1_gf_AddBooleanToHashInput (bool lp_boolean) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(BoolToInt( lp_boolean ));
}

void lib1_gf_AddByteToHashInput (byte lp_byte) {
    // Automatic Variable Declarations
    // Implementation
    HashInputData[HashInputSize] = lp_byte;
    HashInputSize += 1;
}

void lib1_gf_AddBytesToHashInput (byte lp_byte, int lp_amount) {
    // Automatic Variable Declarations
    int auto16027E3F_ae;
    int auto16027E3F_var;

    // Implementation
    auto16027E3F_ae = lp_amount;
    auto16027E3F_var = 1;
    for ( ; auto16027E3F_var <= auto16027E3F_ae; auto16027E3F_var += 1 ) {
        lib1_gf_AddByteToHashInput(lp_byte);
    }
}

void lib1_gf_AddIntegerToHashInput (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddByteToHashInput(lp_integer);
    lib1_gf_AddByteToHashInput(lp_integer >> 8);
    lib1_gf_AddByteToHashInput(lp_integer >> 16);
    lib1_gf_AddByteToHashInput(lp_integer >> 24);
}

void lib1_gf_AddIntegersToHashInput (int lp_integer, int lp_amount) {
    // Automatic Variable Declarations
    int autoB1E99E46_ae;
    int autoB1E99E46_var;

    // Implementation
    autoB1E99E46_ae = lp_amount;
    autoB1E99E46_var = 1;
    for ( ; autoB1E99E46_var <= autoB1E99E46_ae; autoB1E99E46_var += 1 ) {
        lib1_gf_AddIntegerToHashInput(lp_integer);
    }
}

void lib1_gf_AddRealToHashInput (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddIntegerToHashInput(GetFixedDataAsInt( lp_real ));
}

void lib1_gf_AddStringToHashInput (string lp_string) {
    // Variable Declarations
    int lv_integer;

    // Automatic Variable Declarations
    int auto55AD67C6_ae;
    const int auto55AD67C6_ai = 1;

    // Variable Initialization

    // Implementation
    auto55AD67C6_ae = (StringLength(lp_string) - 1);
    lv_integer = 0;
    for ( ; ( (auto55AD67C6_ai >= 0 && lv_integer <= auto55AD67C6_ae) || (auto55AD67C6_ai < 0 && lv_integer >= auto55AD67C6_ae) ) ; lv_integer += auto55AD67C6_ai ) {
        lib1_gf_AddByteToHashInput(CharToAsciiCode( lp_string, lv_integer ));
    }
}

void lib1_gf_AddUnitToHashInput (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_AddStringToHashInput((UnitGetType(lp_unit)));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
    lib1_gf_AddRealToHashInput(UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent));
}

string lib1_gf_GenerateMD5HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateMd5HashCode();
}

string lib1_gf_GenerateSHA256HashCode () {
    // Automatic Variable Declarations
    // Implementation
    return GenerateSha256HashCode();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_game_inbalanced;
bool gv_game_contains_ai;
int[9] gv_extra_bunk_position;
int gv_spawn_cycle;
fixed[9][3] gv_position_spawn_offsets;
int[17] gv_player_race_index;
string[4][5][3] gv_race_spawn_unit_types;
int[4][5][3] gv_race_spawn_unit_type_supply_cost;
string[4][3] gv_race_spawner_types;
string[4] gv_race_worker_types;
string[4] gv_race_research_facility_types;
string[4] gv_race_nuke_facility_types;
string[4][9] gv_race_teaminfo_icons;
string[4][9] gv_race_teaminfo_upgrades;
abilcmd[4][9] gv_race_teaminfo_upgrade_abilities;
bool[17] gv_movement_detected;
bool[17] gv_player_is_afk;
bool gv_mode_downgraded;
playergroup[5] gv_teams;
playergroup gv_all_players;
int gv_num_teams;
int gv_players_per_team;
int gv_untitledVariable001;
point[9] gv_engineering_bay_positions;
unit[17] gv_ghost_academies;
point[9] gv_initial_bunker_positions;
point[9] gv_nuke_silo_positions;
unit[17] gv_nuke_silos;
unit[17] gv_research_facilities;
unit[17] gv_initial_bunkers;
bool gv_player_draw;
string gv_magic;
fixed gv_total_wagers;
fixed[17] gv_player_elos;
fixed[17] gv_player_current_elo;
int[17] gv_player_wins;
int[17] gv_player_games;
int[17] gv_player_mode_games;
int[17] gv_player_mode_wins;
fixed[17] gv_player_elos_wagers;
fixed[6] gv_team_elo_sums;
fixed[6] gv_team_elo_averages;
string gv_game_mode_string;
bool gv_full_game;
bank[17] gv_banks;
revealer[17] gv_player_revealers;
point[65] gv_bunker_spawn_points;
bool[17] gv_player_left_game;
fixed[17][3] gv_player_spawn_offsets;
int[17] gv_player_shards_collected;
timer gv_game_timer;
bool[17] gv_player_alive;
bool[17] gv_team_alive;
int[61] gv_spawn_scan_order;
unit[65] gv_bunkers;
point[65] gv_bunker_rally_points;
unit[65] gv_bunker_rally_units;
bool[65] gv_bunker_merc_status;
int[65] gv_spawner_upgrade_status;
bool[65] gv_bunker_retire_status;
int[65] gv_spawner_tier;
int[17] gv_player_team;
int[9] gv_position_players;
int[17] gv_player_positions;
int[65] gv_bunker_owners;
point[65] gv_bunker_locations;
fixed[5] gv_team_current_performance;
fixed[5][5] gv_team_current_performance_for_winning_team;
fixed[5] gv_team_peak_performance;
fixed[5][5] gv_team_peak_performance_for_winning_team;
int[5] gv_team_scores;
color[17] gv_player_colors;
int[5][5] gv_player_team_rank;
int[5] gv_team_rank;
int[9] gv_player_rank;
int[9] gv_player_scores;
int gv_teamLeaderboard;
int gv_playerLeaderboard;
int[17] gv_team_leaderboard_player_frames;
int[17] gv_team_leaderboard_player_scores;
int[17] gv_team_leaderboard_player_names;
int[5] gv_team_leaderboard_team_score_dialog_item;
int[5] gv_team_leaderboard_team_frames;
int[5] gv_team_leaderboard_team_name_dialog_item;
int[5] gv_team_leaderboard_team_dialog_item;
int[5] gv_team_leaderboard_team_scores;
int[17] gv_player_leaderboard_player_frames;
int[17] gv_player_leaderboard_player_scores;
int[17] gv_player_leaderboard_player_names;
int[17] gv_team_info_player_armor_level;
int[17] gv_team_info_player_attack_level;
int[17] gv_team_info_player_range_level;
int[17] gv_team_info_player_regen_level;
int[17] gv_team_info_player_speed_level;
int[17] gv_team_info_player_bunker_armor_level;
int[17] gv_team_info_player_bunker_regen_level;
int[17] gv_team_info_player_bunker_slots_level;
int gv_team_info_current_player;
int[17][5] gv_team_info_palyer_slot_map;
int[17] gv_team_info_player_dialogs;
int[17] gv_team_info_player_mineral;
int[17] gv_team_info_player_armor;
int[17] gv_team_info_player_attack;
int[17] gv_team_info_player_range;
int[17] gv_team_info_player_regen;
int[17] gv_team_info_player_speed;
int[17] gv_team_info_player_bunker_armor;
int[17] gv_team_info_player_bunker_regen;
int[17] gv_team_info_player_bunker_slots;
int[17][8] gv_team_info_player_upgrade_buttons;
int gv_untitledVariable002;
int gv_untitledVariable003;
bool gv_message_lock;
int gv_num_messages;
text[51] gv_messages;
int[17] gv_num_nukes_detected;
int[17] gv_num_nuke_used;
unitgroup[17] gv_structuresGroup;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_teams[init_i] = PlayerGroupEmpty();
    }
    gv_all_players = PlayerGroupEmpty();
    gv_magic = "";
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_elos[init_i] = 1000.0;
    }
    gv_game_mode_string = "";
    gv_game_timer = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_colors[init_i] = Color(0,0,0);
    }
    gv_teamLeaderboard = c_invalidDialogId;
    gv_playerLeaderboard = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_scores[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_leaderboard_player_names[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_score_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_name_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_team_leaderboard_team_dialog_item[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_frames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_scores[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_player_leaderboard_player_names[init_i] = c_invalidDialogControlId;
    }
    gv_team_info_current_player = 1;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_dialogs[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_mineral[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_armor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_attack[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_range[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_regen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_speed[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_armor[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_regen[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_team_info_player_bunker_slots[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 7; init_j += 1) {
            gv_team_info_player_upgrade_buttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_untitledVariable002 = 100;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_structuresGroup[init_i] = UnitGroupEmpty();
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ConfigureConstants ();
void gf_AssignTeamLocations ();
void gf_SpawnPlayers ();
void gf_SpectatorInit ();
void gf_SpawnInitialBunk (int lp_player, int lp_position, int lp_player_race);
void gf_PlayerAfkEnded (int lp_player);
void gf_RecordLastGameResults (int lp_winning_team);
void gf_SignBank (bank lp_bank);
bool gf_VerifyBank (bank lp_bank);
string gf_ComputeChecksum (bank lp_bank);
void gf_DisplayElo (playergroup lp_players);
void gf_SaveBankIfFullGame (int lp_player);
void gf_RecordUpdateGameStart ();
void gf_RecordUpdateGameVictory (int lp_player);
text gf_GetTeamPlayerList (int lp_team);
void gf_ShowFinalStandings (int lp_winning_team);
void gf_ShowCorrectLeaderboard (int lp_player);
void gf_UpdatePlayerColor (int lp_player);
void gf_LeaderboardInit ();
void gf_UpdateLeaderboardSortOrder ();
void gf_UpdateLeaderboard (bool lp_force_update_sort);
void gf_UpdateTeamInfoColor (int lp_player);
void gf_TeamInfoInit ();
void gf_UpdateTeamInfoForPlayer (int lp_player);
void gf_RedrawDeathNotifications ();
void gf_NotifyPlayerDied (int lp_palyer);
void gf_NotifyPlayerLeave (int lp_palyer);
void gf_AddMessage (text lp_message);
int gf_GetBunkerIndex (unit lp_bunker);
void gf_OnBunkerCreated (int lp_player, unit lp_bunker);
void gf_OnBunkerCreated3 (unit lp_bunker);
void gf_OnBunkerCreated2 (unit lp_worker);
void gf_OnBunkerRemoved (int lp_player, unit lp_bunker);
void gf_UpdateAllWorkers (int lp_player);
void gf_UpdateSingleWorker (unit lp_worker, bool lp_player_has_nuke);
bool gf_PlayerHasNuke (int lp_player);
void gf_SetDeadPlayerColor (int lp_player);
void gf_TestVictory ();
void gf_OnPlayerDead (int lp_player);
void gf_TestPlayerDead (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Help;
trigger gt_Control;
trigger gt_ButtonPress;
trigger gt_CheckForInvalidGame;
trigger gt_MeleeInitialization;
trigger gt_DetectMovement;
trigger gt_DetectPlayerChat;
trigger gt_TrackUnitMovement;
trigger gt_TrackRallyChange;
trigger gt_ShareControlForAfkPlayer;
trigger gt_Records;
trigger gt_Draw;
trigger gt_Elo;
trigger gt_ComputeStandings;
trigger gt_ShowStandings;
trigger gt_ToggleLeaderboard;
trigger gt_LeaderboardPeriodicRefresh;
trigger gt_TeamInfoTrackUpgrades;
trigger gt_UpdateTeamInfo;
trigger gt_ShardCollected;
trigger gt_ShardSpawn;
trigger gt_SpawnUnit;
trigger gt_OnRallyChange;
trigger gt_OnUpgrade;
trigger gt_BunkerBuild;
trigger gt_BunkerBuild2;
trigger gt_ConstructionCancelled;
trigger gt_BunkerDestoryed;
trigger gt_ScvDied;
trigger gt_OnRetire;
trigger gt_OnUnretire;
trigger gt_ScvCalldown;
trigger gt_DetectNukeAction;
trigger gt_DetectNukeEffect;
trigger gt_ArmNuke;
trigger gt_PeriodicCheckDeath;
trigger gt_PlayerLeaveGame;
trigger gt_MineralTrickle;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ConfigureConstants () {
    // Variable Declarations
    int lv_race;
    int lv_tier;
    int lv_merc;
    int lv_index;

    // Automatic Variable Declarations
    const int autoFACDB944_ae = 8;
    const int autoFACDB944_ai = 1;
    const int auto09C3E088_ae = 2;
    const int auto09C3E088_ai = 1;
    const int auto9745A44B_ae = 3;
    const int auto9745A44B_ai = 1;
    const int auto6C356C54_ae = 1;
    const int auto6C356C54_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 0;
    for ( ; ( (autoFACDB944_ai >= 0 && lv_index <= autoFACDB944_ae) || (autoFACDB944_ai < 0 && lv_index >= autoFACDB944_ae) ) ; lv_index += autoFACDB944_ai ) {
        if ((GameAttributeGameValue("9") == "0001")) {
            gv_player_race_index[lv_index] = 0;
        }

        if ((GameAttributeGameValue("9") == "0002")) {
            gv_player_race_index[lv_index] = 1;
        }

    }
    gv_race_spawn_unit_types[0][0][0] = "Marine";
    gv_race_spawn_unit_types[0][1][0] = "Reaper";
    gv_race_spawn_unit_types[0][2][0] = "Marauder";
    gv_race_spawn_unit_types[0][3][0] = "Ghost";
    gv_race_spawn_unit_types[0][0][1] = "WarPig";
    gv_race_spawn_unit_types[0][1][1] = "MercReaper";
    gv_race_spawn_unit_types[0][2][1] = "HammerSecurity";
    gv_race_spawn_unit_types[0][3][1] = "Spectre";
    gv_race_spawn_unit_types[1][0][0] = "Zealot";
    gv_race_spawn_unit_types[1][1][0] = "Adept";
    gv_race_spawn_unit_types[1][2][0] = "Stalker";
    gv_race_spawn_unit_types[1][3][0] = "Immortal";
    gv_race_spawn_unit_types[1][0][1] = "ZealotAiur";
    gv_race_spawn_unit_types[1][1][1] = "Talis";
    gv_race_spawn_unit_types[1][2][1] = "Dragoon";
    gv_race_spawn_unit_types[1][3][1] = "ImmortalAiur";
    gv_race_spawn_unit_types[2][0][0] = "Zergling";
    gv_race_spawn_unit_types[2][1][0] = "Zergling";
    gv_race_spawn_unit_types[2][2][0] = "Zergling";
    gv_race_spawn_unit_types[2][3][0] = "Zergling";
    gv_race_spawn_unit_types[2][0][1] = "Zergling";
    gv_race_spawn_unit_types[2][1][1] = "Zergling";
    gv_race_spawn_unit_types[2][2][1] = "Zergling";
    gv_race_spawn_unit_types[2][3][1] = "Zergling";
    gv_race_spawner_types[0][0] = "Bunker";
    lv_race = 0;
    for ( ; ( (auto09C3E088_ai >= 0 && lv_race <= auto09C3E088_ae) || (auto09C3E088_ai < 0 && lv_race >= auto09C3E088_ae) ) ; lv_race += auto09C3E088_ai ) {
        lv_tier = 0;
        for ( ; ( (auto9745A44B_ai >= 0 && lv_tier <= auto9745A44B_ae) || (auto9745A44B_ai < 0 && lv_tier >= auto9745A44B_ae) ) ; lv_tier += auto9745A44B_ai ) {
            lv_merc = 0;
            for ( ; ( (auto6C356C54_ai >= 0 && lv_merc <= auto6C356C54_ae) || (auto6C356C54_ai < 0 && lv_merc >= auto6C356C54_ae) ) ; lv_merc += auto6C356C54_ai ) {
                gv_race_spawn_unit_type_supply_cost[lv_race][lv_tier][lv_merc] = RoundI(UnitTypeGetProperty(gv_race_spawn_unit_types[lv_race][lv_tier][lv_merc], c_unitPropSuppliesUsed));
            }
        }
    }
    gv_race_spawner_types[0][1] = "InfestedBunker";
    gv_race_spawner_types[1][0] = "Gateway";
    gv_race_spawner_types[1][1] = "Gateway";
    gv_race_worker_types[0] = "SCV";
    gv_race_worker_types[1] = "Probe";
    gv_race_research_facility_types[0] = "EngineeringBay";
    gv_race_research_facility_types[1] = "Forge";
    gv_race_nuke_facility_types[0] = "GhostAcademy";
    gv_race_nuke_facility_types[1] = "SoACaster";
    gv_race_teaminfo_icons[0][0] = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel0.dds";
    gv_race_teaminfo_icons[0][1] = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel0.dds";
    gv_race_teaminfo_icons[0][2] = "Assets\\Textures\\btn-tips-terran-penetrator.dds";
    gv_race_teaminfo_icons[0][3] = "Assets\\Textures\\btn-ability-terran-heal-color.dds";
    gv_race_teaminfo_icons[0][4] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_race_teaminfo_icons[0][5] = "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds";
    gv_race_teaminfo_icons[0][6] = "Assets\\Textures\\btn-upgrade-swann-regenerativebiosteel.dds";
    gv_race_teaminfo_icons[0][7] = "Assets\\Textures\\btn-upgrade-terran-neosteelframe.dds";
    gv_race_teaminfo_icons[1][0] = "Assets\\Textures\\btn-ability-protoss-voidarmor.dds";
    gv_race_teaminfo_icons[1][1] = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds";
    gv_race_teaminfo_icons[1][2] = "Assets\\Textures\\btn-upgrade-protoss-structureovercharge.dds";
    gv_race_teaminfo_icons[1][3] = "Assets\\Textures\\btn-ability-protoss-shieldbattery-color.dds";
    gv_race_teaminfo_icons[1][4] = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    gv_race_teaminfo_icons[1][5] = "Assets\\Textures\\btn-ability-protoss-arcshield.dds";
    gv_race_teaminfo_icons[1][6] = "Assets\\Textures\\btn-ability-spearofadun-shieldovercharge.dds";
    gv_race_teaminfo_icons[1][7] = "Assets\\Textures\\btn-upgrade-protoss-researchbosoniccore.dds";
    gv_race_teaminfo_upgrades[0][0] = "MarineArmor";
    gv_race_teaminfo_upgrades[0][1] = "MarineWeapons";
    gv_race_teaminfo_upgrades[0][2] = "MarineAttackRange";
    gv_race_teaminfo_upgrades[0][3] = "MarineLifeRegeneration";
    gv_race_teaminfo_upgrades[0][4] = "MarineMovespeed";
    gv_race_teaminfo_upgrades[0][5] = "BunkerArmor";
    gv_race_teaminfo_upgrades[0][6] = "BunkerLifeRegeneration";
    gv_race_teaminfo_upgrades[0][7] = "BunkerCapacity";
    gv_race_teaminfo_upgrades[1][0] = "UpgradeShields";
    gv_race_teaminfo_upgrades[1][1] = "ProtossGroundWeaponsLevel1";
    gv_race_teaminfo_upgrades[1][2] = "AdeptPiercingAttack";
    gv_race_teaminfo_upgrades[1][3] = "UnknownUpgrade";
    gv_race_teaminfo_upgrades[1][4] = "MarineMovespeed";
    gv_race_teaminfo_upgrades[1][5] = "Structure";
    gv_race_teaminfo_upgrades[1][6] = "StuctureRegen";
    gv_race_teaminfo_upgrades[1][7] = "UpgradeBaseWeapon";
    gv_race_teaminfo_upgrade_abilities[0][0] = AbilityCommand("EngineeringBayResearch", 28);
    gv_race_teaminfo_upgrade_abilities[0][1] = AbilityCommand("EngineeringBayResearch", 29);
    gv_race_teaminfo_upgrade_abilities[0][2] = AbilityCommand("EngineeringBayResearch", 27);
    gv_race_teaminfo_upgrade_abilities[0][3] = AbilityCommand("EngineeringBayResearch", 26);
    gv_race_teaminfo_upgrade_abilities[0][4] = AbilityCommand("EngineeringBayResearch", 25);
    gv_race_teaminfo_upgrade_abilities[0][5] = AbilityCommand("EngineeringBayResearch", 24);
    gv_race_teaminfo_upgrade_abilities[0][6] = AbilityCommand("EngineeringBayResearch", 23);
    gv_race_teaminfo_upgrade_abilities[0][7] = AbilityCommand("EngineeringBayResearch", 22);
    gv_race_teaminfo_upgrade_abilities[1][0] = AbilityCommand("EngineeringBayResearch", 28);
    gv_race_teaminfo_upgrade_abilities[1][1] = AbilityCommand("EngineeringBayResearch", 29);
    gv_race_teaminfo_upgrade_abilities[1][2] = AbilityCommand("EngineeringBayResearch", 27);
    gv_race_teaminfo_upgrade_abilities[1][3] = AbilityCommand("EngineeringBayResearch", 26);
    gv_race_teaminfo_upgrade_abilities[1][4] = AbilityCommand("EngineeringBayResearch", 25);
    gv_race_teaminfo_upgrade_abilities[1][5] = AbilityCommand("EngineeringBayResearch", 24);
    gv_race_teaminfo_upgrade_abilities[1][6] = AbilityCommand("EngineeringBayResearch", 23);
    gv_race_teaminfo_upgrade_abilities[1][7] = AbilityCommand("EngineeringBayResearch", 22);
    gv_spawner_tier[9] = 1;
    gv_spawner_tier[10] = 1;
    gv_spawner_tier[11] = 1;
    gv_spawner_tier[12] = 1;
    gv_spawner_tier[13] = 1;
    gv_spawner_tier[14] = 1;
    gv_spawner_tier[17] = 1;
    gv_spawner_tier[18] = 2;
    gv_spawner_tier[19] = 2;
    gv_spawner_tier[20] = 2;
    gv_spawner_tier[21] = 2;
    gv_spawner_tier[22] = 1;
    gv_spawner_tier[25] = 1;
    gv_spawner_tier[26] = 2;
    gv_spawner_tier[27] = 3;
    gv_spawner_tier[28] = 3;
    gv_spawner_tier[29] = 2;
    gv_spawner_tier[30] = 1;
    gv_spawner_tier[33] = 1;
    gv_spawner_tier[34] = 2;
    gv_spawner_tier[35] = 3;
    gv_spawner_tier[36] = 3;
    gv_spawner_tier[37] = 2;
    gv_spawner_tier[38] = 1;
    gv_spawner_tier[41] = 1;
    gv_spawner_tier[42] = 2;
    gv_spawner_tier[43] = 2;
    gv_spawner_tier[44] = 2;
    gv_spawner_tier[45] = 2;
    gv_spawner_tier[46] = 1;
    gv_spawner_tier[49] = 1;
    gv_spawner_tier[50] = 1;
    gv_spawner_tier[51] = 1;
    gv_spawner_tier[52] = 1;
    gv_spawner_tier[53] = 1;
    gv_spawner_tier[54] = 1;
    gv_spawn_scan_order[0] = 1;
    gv_spawn_scan_order[1] = 6;
    gv_spawn_scan_order[2] = 15;
    gv_spawn_scan_order[3] = 55;
    gv_spawn_scan_order[4] = 62;
    gv_spawn_scan_order[5] = 57;
    gv_spawn_scan_order[6] = 48;
    gv_spawn_scan_order[7] = 8;
    gv_spawn_scan_order[8] = 2;
    gv_spawn_scan_order[9] = 5;
    gv_spawn_scan_order[10] = 23;
    gv_spawn_scan_order[11] = 47;
    gv_spawn_scan_order[12] = 61;
    gv_spawn_scan_order[13] = 58;
    gv_spawn_scan_order[14] = 40;
    gv_spawn_scan_order[15] = 16;
    gv_spawn_scan_order[16] = 3;
    gv_spawn_scan_order[17] = 4;
    gv_spawn_scan_order[18] = 31;
    gv_spawn_scan_order[19] = 39;
    gv_spawn_scan_order[20] = 59;
    gv_spawn_scan_order[21] = 60;
    gv_spawn_scan_order[22] = 32;
    gv_spawn_scan_order[23] = 24;
    gv_spawn_scan_order[24] = 9;
    gv_spawn_scan_order[25] = 14;
    gv_spawn_scan_order[26] = 54;
    gv_spawn_scan_order[27] = 49;
    gv_spawn_scan_order[28] = 10;
    gv_spawn_scan_order[29] = 13;
    gv_spawn_scan_order[30] = 22;
    gv_spawn_scan_order[31] = 46;
    gv_spawn_scan_order[32] = 53;
    gv_spawn_scan_order[33] = 50;
    gv_spawn_scan_order[34] = 41;
    gv_spawn_scan_order[35] = 17;
    gv_spawn_scan_order[36] = 11;
    gv_spawn_scan_order[37] = 12;
    gv_spawn_scan_order[38] = 30;
    gv_spawn_scan_order[39] = 38;
    gv_spawn_scan_order[40] = 52;
    gv_spawn_scan_order[41] = 51;
    gv_spawn_scan_order[42] = 33;
    gv_spawn_scan_order[43] = 25;
    gv_spawn_scan_order[44] = 18;
    gv_spawn_scan_order[45] = 21;
    gv_spawn_scan_order[46] = 45;
    gv_spawn_scan_order[47] = 42;
    gv_spawn_scan_order[48] = 19;
    gv_spawn_scan_order[49] = 20;
    gv_spawn_scan_order[50] = 29;
    gv_spawn_scan_order[51] = 37;
    gv_spawn_scan_order[52] = 44;
    gv_spawn_scan_order[53] = 43;
    gv_spawn_scan_order[54] = 34;
    gv_spawn_scan_order[55] = 26;
    gv_spawn_scan_order[56] = 27;
    gv_spawn_scan_order[57] = 28;
    gv_spawn_scan_order[58] = 36;
    gv_spawn_scan_order[59] = 35;
    gv_engineering_bay_positions[0] = Point(18.5, 88.5);
    gv_engineering_bay_positions[1] = Point(21.5, 90.5);
    gv_engineering_bay_positions[2] = Point(90.5, 90.5);
    gv_engineering_bay_positions[3] = Point(93.5, 88.5);
    gv_engineering_bay_positions[4] = Point(93.5, 19.5);
    gv_engineering_bay_positions[5] = Point(90.5, 17.5);
    gv_engineering_bay_positions[6] = Point(21.5, 17.5);
    gv_engineering_bay_positions[7] = Point(18.5, 19.5);
    gv_nuke_silo_positions[0] = Point(16.5, 91.5);
    gv_nuke_silo_positions[1] = Point(19.5, 93.5);
    gv_nuke_silo_positions[2] = Point(92.5, 93.5);
    gv_nuke_silo_positions[3] = Point(95.5, 91.5);
    gv_nuke_silo_positions[4] = Point(95.5, 16.5);
    gv_nuke_silo_positions[5] = Point(92.5, 14.5);
    gv_nuke_silo_positions[6] = Point(19.5, 14.5);
    gv_nuke_silo_positions[7] = Point(16.5, 16.5);
    gv_initial_bunker_positions[0] = Point(20.5, 79.5);
    gv_initial_bunker_positions[1] = Point(30.5, 89.5);
    gv_initial_bunker_positions[2] = Point(81.5, 89.5);
    gv_initial_bunker_positions[3] = Point(91.5, 79.5);
    gv_initial_bunker_positions[4] = Point(91.5, 28.5);
    gv_initial_bunker_positions[5] = Point(81.5, 18.5);
    gv_initial_bunker_positions[6] = Point(30.5, 18.5);
    gv_initial_bunker_positions[7] = Point(20.5, 28.5);
    gv_position_spawn_offsets[0][0] = 1.0;
    gv_position_spawn_offsets[1][0] = 1.0;
    gv_position_spawn_offsets[2][0] = -1.0;
    gv_position_spawn_offsets[3][0] = -1.0;
    gv_position_spawn_offsets[4][0] = -1.0;
    gv_position_spawn_offsets[5][0] = -1.0;
    gv_position_spawn_offsets[6][0] = 1.0;
    gv_position_spawn_offsets[7][0] = 1.0;
    gv_position_spawn_offsets[0][1] = -1.0;
    gv_position_spawn_offsets[1][1] = -1.0;
    gv_position_spawn_offsets[2][1] = -1.0;
    gv_position_spawn_offsets[3][1] = -1.0;
    gv_position_spawn_offsets[4][1] = 1.0;
    gv_position_spawn_offsets[5][1] = 1.0;
    gv_position_spawn_offsets[6][1] = 1.0;
    gv_position_spawn_offsets[7][1] = 1.0;
    gv_extra_bunk_position[0] = 1;
    gv_extra_bunk_position[1] = 0;
    gv_extra_bunk_position[2] = 3;
    gv_extra_bunk_position[3] = 2;
    gv_extra_bunk_position[4] = 5;
    gv_extra_bunk_position[5] = 4;
    gv_extra_bunk_position[6] = 7;
    gv_extra_bunk_position[7] = 6;
}

void gf_AssignTeamLocations () {
    int init_i;

    // Variable Declarations
    int lv_team_index2;
    int lv_team_index;
    int lv_size;
    int lv_swap_player;
    int lv_loop;
    int lv_team1;
    int lv_team2;
    int lv_position;
    int lv_slot_on_team;
    int[6][5] lv_team_placement;
    string lv_mode;
    int lv_current_slot;
    int lv_team;
    int[6][5] lv_lobby_teams;
    bool[17] lv_lobby_player_has_team;
    int[6] lv_lobby_team_size;
    int lv_lobby_team;
    int lv_lobby_current_team;
    playergroup[5] lv_teams;
    int lv_player2;
    string lv_attribute_value;
    int lv_player;
    int lv_max_team_size;
    int lv_min_team_size;

    // Automatic Variable Declarations
    playergroup auto8785B3BC_g;
    const int auto07BC1A5F_ae = 4;
    const int auto07BC1A5F_ai = 1;
    playergroup auto4D3D80E7_g;
    int autoE286ED9A_ae;
    const int autoE286ED9A_ai = 1;
    const int autoCD8200B8_ae = 8;
    const int autoCD8200B8_ai = 1;
    const int autoEB2318FC_ae = 5;
    const int autoEB2318FC_ai = 1;
    const int auto9C6A9D8F_ae = 10;
    const int auto9C6A9D8F_ai = 1;
    const int auto2C5951D7_ae = 3;
    const int auto2C5951D7_ai = 1;
    const int auto70BD7D8D_ae = 30;
    const int auto70BD7D8D_ai = 1;
    int auto52884C1E_ae;
    const int auto52884C1E_ai = 1;
    int auto947EBC81_ae;
    const int auto947EBC81_ai = 1;
    playergroup autoDA4A409A_g;
    const int autoD84268BD_ae = 15;
    const int autoD84268BD_ai = 1;
    const int autoAD41E70C_ae = 15;
    const int autoAD41E70C_ai = 1;

    // Variable Initialization
    lv_lobby_current_team = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_teams[init_i] = PlayerGroupEmpty();
    }
    lv_min_team_size = 4;

    // Implementation
    auto8785B3BC_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8785B3BC_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            gv_game_contains_ai = true;
        }

    }
    lv_mode = GameAttributeGameValue("1");
    lv_lobby_team = 1;
    for ( ; ( (auto07BC1A5F_ai >= 0 && lv_lobby_team <= auto07BC1A5F_ae) || (auto07BC1A5F_ai < 0 && lv_lobby_team >= auto07BC1A5F_ae) ) ; lv_lobby_team += auto07BC1A5F_ai ) {
        auto4D3D80E7_g = GameAttributePlayersForTeam(lv_lobby_team);
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4D3D80E7_g, lv_player);
            if (lv_player < 0) { break; }
            lv_lobby_teams[lv_lobby_current_team][lv_lobby_team_size[lv_lobby_current_team]] = lv_player;
            lv_lobby_team_size[lv_lobby_current_team] = (lv_lobby_team_size[lv_lobby_current_team] + 1);
            lv_lobby_player_has_team[lv_player] = true;
        }
        if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_lobby_team)) >= 1)) {
            lv_max_team_size = MaxI(lv_max_team_size, lv_lobby_team_size[lv_lobby_current_team]);
            lv_min_team_size = MinI(lv_min_team_size, lv_lobby_team_size[lv_lobby_current_team]);
            lv_lobby_current_team += 1;
        }

    }
    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 2) && (lv_lobby_current_team == 3))) {
        lv_mode = "0004";
    }

    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0001") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 5))) {
        lv_mode = "0003";
    }

    if (((lv_mode == "0002") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 2) && (lv_lobby_current_team == 3))) {
        lv_mode = "0004";
    }

    if (((lv_mode == "0002") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0004") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if (((lv_mode == "0003") && (lv_min_team_size == lv_max_team_size) && (lv_min_team_size == 1) && (lv_lobby_current_team == 3))) {
        lv_mode = "0005";
    }

    if ((lv_mode == "0001")) {
        gv_game_mode_string = "2v2v2v2";
        gv_num_teams = 4;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[3][0] = 4;
        lv_team_placement[3][1] = 5;
        lv_team_placement[4][0] = 6;
        lv_team_placement[4][1] = 7;
    }
    else if ((lv_mode == "0002")) {
        gv_game_mode_string = "4v4";
        gv_num_teams = 2;
        gv_players_per_team = 4;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 1;
        lv_team_placement[1][2] = 4;
        lv_team_placement[1][3] = 5;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 3;
        lv_team_placement[2][2] = 6;
        lv_team_placement[2][3] = 7;
    }
    else if ((lv_mode == "0003")) {
        gv_game_mode_string = "1v1v1v1";
        gv_num_teams = 4;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 0;
        lv_team_placement[2][0] = 2;
        lv_team_placement[3][0] = 4;
        lv_team_placement[4][0] = 6;
    }
    else if ((lv_mode == "0004")) {
        gv_game_mode_string = "2v2";
        gv_num_teams = 2;
        gv_players_per_team = 2;
        lv_team_placement[1][0] = 0;
        lv_team_placement[1][1] = 4;
        lv_team_placement[2][0] = 2;
        lv_team_placement[2][1] = 6;
    }
    else if ((lv_mode == "0005")) {
        gv_game_mode_string = "1v1";
        gv_num_teams = 2;
        gv_players_per_team = 1;
        lv_team_placement[1][0] = 1;
        lv_team_placement[2][0] = 2;
    }
    if ((lv_mode != GameAttributeGameValue("1"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6652DF1C") + StringToText(gv_game_mode_string)));
        gv_mode_downgraded = true;
    }

    autoE286ED9A_ae = gv_num_teams;
    lv_team = 1;
    for ( ; ( (autoE286ED9A_ai >= 0 && lv_team <= autoE286ED9A_ae) || (autoE286ED9A_ai < 0 && lv_team >= autoE286ED9A_ae) ) ; lv_team += autoE286ED9A_ai ) {
        if ((GameAttributeGameValue("8") == "0001")) {
            while ((lv_lobby_team_size[lv_team] < gv_players_per_team)) {
                lv_player = 1;
                for ( ; ( (autoCD8200B8_ai >= 0 && lv_player <= autoCD8200B8_ae) || (autoCD8200B8_ai < 0 && lv_player >= autoCD8200B8_ae) ) ; lv_player += autoCD8200B8_ai ) {
                    if (((lv_lobby_player_has_team[lv_player] == false))) {
                        lv_lobby_teams[lv_team][lv_lobby_team_size[lv_team]] = lv_player;
                        lv_lobby_team_size[lv_team] = (lv_lobby_team_size[lv_team] + 1);
                        lv_lobby_player_has_team[lv_player] = true;
                        break;
                    }

                }
            }
        }
        else {
            if ((lv_lobby_team_size[lv_team] < gv_players_per_team)) {
                gv_game_inbalanced = true;
            }

        }
    }
    if ((GameAttributeGameValue("3") == "0001")) {
        lv_loop = 1;
        for ( ; ( (auto70BD7D8D_ai >= 0 && lv_loop <= auto70BD7D8D_ae) || (auto70BD7D8D_ai < 0 && lv_loop >= auto70BD7D8D_ae) ) ; lv_loop += auto70BD7D8D_ai ) {
            lv_team1 = RandomInt(1, gv_num_teams);
            lv_team2 = RandomInt(1, gv_num_teams);
            lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team1] - 1));
            lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team2] - 1));
            if (((lv_lobby_teams[lv_team1][lv_team_index] > 0) && (lv_lobby_teams[lv_team2][lv_team_index2] > 0))) {
                lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index2];
                lv_lobby_teams[lv_team2][lv_team_index2] = lv_swap_player;
            }

        }
    }
    else {
        if ((GameAttributeGameValue("2") != "0002")) {
            lv_loop = 1;
            for ( ; ( (autoEB2318FC_ai >= 0 && lv_loop <= autoEB2318FC_ae) || (autoEB2318FC_ai < 0 && lv_loop >= autoEB2318FC_ae) ) ; lv_loop += autoEB2318FC_ai ) {
                lv_team_index = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_team_index2 = RandomInt(0, (lv_lobby_team_size[lv_team] - 1));
                lv_swap_player = lv_lobby_teams[lv_team][lv_team_index];
                lv_lobby_teams[lv_team][lv_team_index] = lv_lobby_teams[lv_team][lv_team_index2];
                lv_lobby_teams[lv_team][lv_team_index2] = lv_swap_player;
            }
        }

        if ((GameAttributeGameValue("2") == "0001")) {
            lv_loop = 1;
            for ( ; ( (auto9C6A9D8F_ai >= 0 && lv_loop <= auto9C6A9D8F_ae) || (auto9C6A9D8F_ai < 0 && lv_loop >= auto9C6A9D8F_ae) ) ; lv_loop += auto9C6A9D8F_ai ) {
                lv_team1 = RandomInt(1, gv_num_teams);
                lv_team2 = RandomInt(1, gv_num_teams);
                lv_team_index = 0;
                for ( ; ( (auto2C5951D7_ai >= 0 && lv_team_index <= auto2C5951D7_ae) || (auto2C5951D7_ai < 0 && lv_team_index >= auto2C5951D7_ae) ) ; lv_team_index += auto2C5951D7_ai ) {
                    lv_swap_player = lv_lobby_teams[lv_team1][lv_team_index];
                    lv_lobby_teams[lv_team1][lv_team_index] = lv_lobby_teams[lv_team2][lv_team_index];
                    lv_lobby_teams[lv_team2][lv_team_index] = lv_swap_player;
                }
            }
        }

    }
    auto52884C1E_ae = gv_num_teams;
    lv_team = 0;
    for ( ; ( (auto52884C1E_ai >= 0 && lv_team <= auto52884C1E_ae) || (auto52884C1E_ai < 0 && lv_team >= auto52884C1E_ae) ) ; lv_team += auto52884C1E_ai ) {
        lv_current_slot = 0;
        auto947EBC81_ae = (lv_lobby_team_size[lv_team] - 1);
        lv_team_index = 0;
        for ( ; ( (auto947EBC81_ai >= 0 && lv_team_index <= auto947EBC81_ae) || (auto947EBC81_ai < 0 && lv_team_index >= auto947EBC81_ae) ) ; lv_team_index += auto947EBC81_ai ) {
            lv_player = lv_lobby_teams[lv_team][lv_team_index];
            if (((lv_lobby_player_has_team[lv_player] == true))) {
                lv_position = lv_team_placement[lv_team][lv_current_slot];
                gv_position_players[lv_position] = lv_player;
                gv_player_positions[lv_player] = lv_position;
                lv_current_slot = (lv_current_slot + 1);
                gv_player_team[lv_player] = (lv_team - 1);
                libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupSingle(lv_player), gv_teams[gv_player_team[lv_player]]);
                PlayerGroupAdd(lv_teams[gv_player_team[lv_player]], lv_player);
            }

        }
    }
    autoDA4A409A_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDA4A409A_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lv_lobby_player_has_team[lv_player] == true)) {
            PlayerOptionOverride(lv_player, "controlgroupmode", "3");
            PlayerOptionOverride(lv_player, "selectuncontrolable", "1");
            PlayerGroupAdd(gv_all_players, lv_player);
        }

    }
    UISetResourceTradingAllowed(c_resourceTypeMinerals, true);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradeCountdownTime(300);
    lv_player = 0;
    for ( ; ( (autoD84268BD_ai >= 0 && lv_player <= autoD84268BD_ae) || (autoD84268BD_ai < 0 && lv_player >= autoD84268BD_ae) ) ; lv_player += autoD84268BD_ai ) {
        if (((PlayerType(lv_player) != c_playerTypeNone) && (PlayerType(lv_player) != c_playerTypeNeutral) && (PlayerType(lv_player) != c_playerTypeHostile) && (lv_lobby_player_has_team[lv_player] == true))) {
            lv_player2 = 0;
            for ( ; ( (autoAD41E70C_ai >= 0 && lv_player2 <= autoAD41E70C_ae) || (autoAD41E70C_ai < 0 && lv_player2 >= autoAD41E70C_ae) ) ; lv_player2 += autoAD41E70C_ai ) {
                if (((PlayerType(lv_player2) != c_playerTypeNone) && (PlayerType(lv_player2) != c_playerTypeNeutral) && (PlayerType(lv_player2) != c_playerTypeHostile) && (lv_lobby_player_has_team[lv_player] == true) && (lv_player2 != lv_player))) {
                    if (((gv_player_team[lv_player] == gv_player_team[lv_player2]))) {
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Ally);
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, true);
                        PlayerSetAlliance(lv_player2, c_allianceIdVision, lv_player, true);
                        PlayerSetAlliance(lv_player, c_allianceIdPushable, lv_player2, true);
                        PlayerSetAlliance(lv_player2, c_allianceIdPushable, lv_player, true);
                    }
                    else {
                        PlayerSetAlliance(lv_player, c_allianceIdVision, lv_player2, false);
                        libNtve_gf_SetAlliance(lv_player, lv_player2, libNtve_ge_AllianceSetting_Enemy);
                    }
                }
            }
        }
    }
}

void gf_SpawnPlayers () {
    // Variable Declarations
    bool lv_spawn_extra_bunk;
    int lv_player_race;
    unit lv_unit;
    int lv_player;
    int lv_position;

    // Automatic Variable Declarations
    playergroup autoF3930426_g;

    // Variable Initialization

    // Implementation
    lv_spawn_extra_bunk = ((GameAttributeGameValue("10") == "0001") && (PlayerGroupCount(gv_all_players) <= 4));
    autoF3930426_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF3930426_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerModifyPropertyInt(lv_player, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        if ((GameAttributeGameValue("8") == "0001")) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/B9C32212"));
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, 1000000);
        }
        else {
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperSetTo, 50);
        }
        lv_position = gv_player_positions[lv_player];
        lv_player_race = gv_player_race_index[lv_player];
        gv_player_spawn_offsets[lv_player][0] = gv_position_spawn_offsets[lv_position][0];
        gv_player_spawn_offsets[lv_player][1] = gv_position_spawn_offsets[lv_position][1];
        gv_player_alive[lv_player] = true;
        gv_team_alive[gv_player_team[lv_player]] = true;
        VisRevealArea(gv_position_players[lv_position], RegionEntireMap(), 0.1, false);
        UnitCreate(1, gv_race_nuke_facility_types[lv_player_race], c_unitCreateIgnorePlacement, lv_player, gv_nuke_silo_positions[lv_position], 270.0);
        gv_nuke_silos[lv_player] = UnitLastCreated();
        UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
        gv_ghost_academies[lv_player] = UnitLastCreated();
        UnitCreate(1, gv_race_research_facility_types[lv_player_race], c_unitCreateIgnorePlacement, lv_player, gv_engineering_bay_positions[lv_position], 270.0);
        gv_research_facilities[lv_player] = UnitLastCreated();
        UnitControlGroupAddUnit(lv_player, 4, UnitLastCreated());
        CameraPan(lv_player, gv_initial_bunker_positions[lv_position], 0.01, -1, 10.0, false);
        gf_SpawnInitialBunk(lv_player, lv_position, lv_player_race);
        if ((lv_spawn_extra_bunk == true)) {
            gf_SpawnInitialBunk(lv_player, gv_extra_bunk_position[lv_position], lv_player_race);
        }
        gv_initial_bunkers[lv_player] = lv_unit;
        UnitCreate(1, gv_race_worker_types[lv_player_race], 0, lv_player, PointWithOffset(gv_initial_bunker_positions[lv_position], (-4.0 * gv_position_spawn_offsets[lv_position][0]), (-4.0 * gv_position_spawn_offsets[lv_position][1])), 270.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        lv_unit = UnitLastCreated();
        gf_OnBunkerCreated2(lv_unit);
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
        libHots_gf_StoreActorForUnit(UnitLastCreated(), 1, libNtve_gf_ActorLastCreated());
    }
}

void gf_SpectatorInit () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    PlayerSetColorIndex(0, 0, true);
    UISetResourceVisible(PlayerGroupSingle(0), c_resourceTypeMinerals, false);
}

void gf_SpawnInitialBunk (int lp_player, int lp_position, int lp_player_race) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitCreate(1, gv_race_spawner_types[lp_player_race][0], c_unitCreateIgnorePlacement, lp_player, gv_initial_bunker_positions[lp_position], 270.0);
    lv_unit = UnitLastCreated();
    gf_OnBunkerCreated3(lv_unit);
    gf_OnBunkerCreated(lp_player, lv_unit);
}

void gf_PlayerAfkEnded (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto9C1E4D45_ae = 7;
    const int auto9C1E4D45_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_player_is_afk[lp_player] == true)) {
        gv_player_is_afk[lp_player] = false;
        lv_index = 0;
        for ( ; ( (auto9C1E4D45_ai >= 0 && lv_index <= auto9C1E4D45_ae) || (auto9C1E4D45_ai < 0 && lv_index >= auto9C1E4D45_ae) ) ; lv_index += auto9C1E4D45_ai ) {
            DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lp_player][lv_index], PlayerGroupAll(), false);
        }
    }

}

void gf_RecordLastGameResults (int lp_winning_team) {
    // Variable Declarations
    int lv_player;
    int lv_bank_player;

    // Automatic Variable Declarations
    playergroup auto1FDC3B8D_g;
    playergroup auto4BD7ABBA_g;

    // Variable Initialization

    // Implementation
    auto1FDC3B8D_g = gv_all_players;
    lv_bank_player = -1;
    while (true) {
        lv_bank_player = PlayerGroupNextPlayer(auto1FDC3B8D_g, lv_bank_player);
        if (lv_bank_player < 0) { break; }
        BankSectionRemove(gv_banks[lv_bank_player], "LastGame");
        BankValueSetFromString(gv_banks[lv_bank_player], "LastGame", "mode", gv_game_mode_string);
        BankValueSetFromInt(gv_banks[lv_bank_player], "LastGame", "winningteam", lp_winning_team);
        auto4BD7ABBA_g = gv_all_players;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4BD7ABBA_g, lv_player);
            if (lv_player < 0) { break; }
            BankValueSetFromFixed(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "elo")), gv_player_current_elo[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "wins")), gv_player_mode_wins[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "games")), gv_player_mode_games[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "team")), gv_player_team[lv_player]);
            BankValueSetFromInt(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "position")), gv_player_positions[lv_player]);
            BankValueSetFromString(gv_banks[lv_bank_player], "LastGame", ("player" + (IntToString(lv_player) + "handle")), PlayerHandle(lv_player));
        }
    }
}

void gf_SignBank (bank lp_bank) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromString(lp_bank, "Unsigned", "signature", gf_ComputeChecksum(lp_bank));
}

bool gf_VerifyBank (bank lp_bank) {
    // Variable Declarations
    int lv_string;
    int lv_section_number;
    string lv_section_name;
    int lv_key;
    string lv_key_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_section_name = "";
    lv_key_name = "";

    // Implementation
    return (BankValueGetAsString(BankLastCreated(), "Unsigned", "signature") == gf_ComputeChecksum(lp_bank));
}

string gf_ComputeChecksum (bank lp_bank) {
    // Variable Declarations
    string lv_attr2;
    string lv_attr;
    int lv_string;
    int lv_section_number;
    string lv_section_name;
    int lv_key;
    string lv_key_name;

    // Automatic Variable Declarations
    int autoADA9B3E7_ae;
    const int autoADA9B3E7_ai = 1;
    int autoD053C6EB_ae;
    const int autoD053C6EB_ai = 1;

    // Variable Initialization
    lv_attr2 = "";
    lv_section_name = "";
    lv_key_name = "";

    // Implementation
    lib1_gf_InitializeHashInput();
    lib1_gf_AddStringToHashInput("nice");
    lv_attr = GameAttributeGameValue("4");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("5");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("6");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    lv_attr = GameAttributeGameValue("7");
    lv_attr2 = lv_attr;
    lib1_gf_AddStringToHashInput(lv_attr2);
    autoADA9B3E7_ae = (BankSectionCount(lp_bank) - 1);
    lv_section_number = 0;
    for ( ; ( (autoADA9B3E7_ai >= 0 && lv_section_number <= autoADA9B3E7_ae) || (autoADA9B3E7_ai < 0 && lv_section_number >= autoADA9B3E7_ae) ) ; lv_section_number += autoADA9B3E7_ai ) {
        lv_section_name = BankSectionName(lp_bank, lv_section_number);
        if ((lv_section_name == "Unsigned")) {
        }
        else {
            autoD053C6EB_ae = (BankKeyCount(lp_bank, lv_section_name) - 1);
            lv_key = 0;
            for ( ; ( (autoD053C6EB_ai >= 0 && lv_key <= autoD053C6EB_ae) || (autoD053C6EB_ai < 0 && lv_key >= autoD053C6EB_ae) ) ; lv_key += autoD053C6EB_ai ) {
                lv_key_name = BankKeyName(lp_bank, lv_section_name, lv_key);
                lib1_gf_AddStringToHashInput(lv_section_name);
                lib1_gf_AddStringToHashInput(",");
                lib1_gf_AddStringToHashInput(lv_key_name);
                lib1_gf_AddStringToHashInput(",");
                if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeString) == true)) {
                    lib1_gf_AddStringToHashInput(BankValueGetAsString(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeInt) == true)) {
                    lib1_gf_AddIntegerToHashInput(BankValueGetAsInt(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypePoint) == true)) {
                    lib1_gf_AddStringToHashInput(libNtve_gf_ConvertPointToString(BankValueGetAsPoint(lp_bank, lv_section_name, lv_key_name)));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeFixed) == true)) {
                    lib1_gf_AddRealToHashInput(BankValueGetAsFixed(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeFlag) == true)) {
                    lib1_gf_AddBooleanToHashInput(BankValueGetAsFlag(lp_bank, lv_section_name, lv_key_name));
                }
                else if ((BankValueIsType(lp_bank, lv_section_name, lv_key_name, c_bankTypeUnit) == true)) {
                    TriggerDebugOutput(1, StringExternal("Param/Value/63C0F234"), true);
                }
                lib1_gf_AddStringToHashInput("\\n");
            }
        }
    }
    return lib1_gf_GenerateSHA256HashCode();
}

void gf_DisplayElo (playergroup lp_players) {
    // Variable Declarations
    int lv_player;
    text lv_message;

    // Automatic Variable Declarations
    playergroup auto11B949D1_g;

    // Variable Initialization

    // Implementation
    auto11B949D1_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto11B949D1_g, lv_player);
        if (lv_player < 0) { break; }
        lv_message = (StringToText("") + StringExternal("Param/Value/AD714ED6"));
        lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(((gv_total_wagers / gv_players_per_team) - gv_player_elos_wagers[lv_player]), c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(13)));
        lv_message = (lv_message + StringExternal("Param/Value/911BE273"));
        lv_message = (lv_message + TextWithColor(FixedToTextAdvanced(gv_player_elos_wagers[lv_player], c_formatNumberStyleNormal, true, 2, 2), libNtve_gf_ConvertPlayerColorToColor(1)));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, lv_message);
    }
}

void gf_SaveBankIfFullGame (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_full_game == true)) {
        gf_SignBank(gv_banks[lp_player]);
        BankSave(gv_banks[lp_player]);
    }

}

void gf_RecordUpdateGameStart () {
    // Variable Declarations
    text lv_message;
    int lv_real_player_count;
    fixed lv_r1;
    fixed lv_r2;
    fixed lv_e1;
    int lv_team;
    fixed lv_average_team_elo;
    fixed lv_average_opponent_elo;
    fixed lv_total_elo;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF6B8A1AF_g;
    playergroup autoB2E70265_g;
    playergroup auto63DE3FB6_g;

    // Variable Initialization

    // Implementation
    autoF6B8A1AF_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF6B8A1AF_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerType(lv_player) == c_playerTypeUser) && (GameAttributePlayerValue("11", lv_player) == "0001"))) {
            lv_real_player_count = (lv_real_player_count + 1);
        }

    }
    if ((((GameAttributeGameValue("8") == "0002") && (gv_mode_downgraded == false) && (lv_real_player_count == (gv_num_teams * gv_players_per_team))))) {
        gv_full_game = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/CFE0085C"));
    }
    autoB2E70265_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB2E70265_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        BankLoad("ZoneControlCE", lv_player);
        BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
        if (((BankVerify(BankLastCreated()) == true) && (gf_VerifyBank(BankLastCreated()) == true))) {
        }
        else {
            BankSectionRemove(BankLastCreated(), "Player");
        }
        gv_banks[lv_player] = BankLastCreated();
        gv_player_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "games");
        gv_player_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", "wins");
        gv_player_mode_wins[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("wins" + gv_game_mode_string));
        BankValueSetFromInt(BankLastCreated(), "Player", "games", (gv_player_games[lv_player] + 1));
        gv_player_mode_games[lv_player] = BankValueGetAsInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string));
        BankValueSetFromInt(BankLastCreated(), "Player", ("games" + gv_game_mode_string), (gv_player_mode_games[lv_player] + 1));
        if ((BankKeyExists(BankLastCreated(), "Player", ("elo" + gv_game_mode_string)) == true)) {
            gv_player_elos[lv_player] = BankValueGetAsFixed(BankLastCreated(), "Player", ("elo" + gv_game_mode_string));
        }

        if ((gv_player_elos[lv_player] < 200.0)) {
            gv_player_elos[lv_player] = 1000.0;
        }

        if ((gv_player_elos[lv_player] > 2500.0)) {
            gv_player_elos[lv_player] = 2500.0;
        }

        gv_team_elo_sums[lv_team] = (gv_team_elo_sums[lv_team] + gv_player_elos[lv_player]);
        lv_total_elo = (lv_total_elo + gv_player_elos[lv_player]);
    }
    auto63DE3FB6_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto63DE3FB6_g, lv_player);
        if (lv_player < 0) { break; }
        lv_team = gv_player_team[lv_player];
        gv_team_elo_averages[lv_team] = (gv_team_elo_sums[lv_team] / gv_players_per_team);
        lv_average_opponent_elo = ((lv_total_elo - gv_team_elo_sums[lv_team]) / ((gv_num_teams - 1) * gv_players_per_team));
        lv_r1 = Pow(10.0, (gv_team_elo_averages[lv_team] / 400.0));
        lv_r2 = Pow(10.0, (lv_average_opponent_elo / 400.0));
        lv_e1 = (lv_r1 / (lv_r1 + lv_r2));
        gv_player_elos_wagers[lv_player] = ((6.0 * lv_e1) / 1.0);
        gv_total_wagers = (gv_total_wagers + gv_player_elos_wagers[lv_player]);
        gv_player_current_elo[lv_player] = (gv_player_elos[lv_player] - gv_player_elos_wagers[lv_player]);
        BankValueSetFromFixed(gv_banks[lv_player], "Player", ("elo" + gv_game_mode_string), gv_player_current_elo[lv_player]);
        gf_SaveBankIfFullGame(lv_player);
    }
    gf_DisplayElo(gv_all_players);
}

void gf_RecordUpdateGameVictory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_banks[lp_player], "Player", "wins", (gv_player_wins[lp_player] + 1));
    BankValueSetFromInt(gv_banks[lp_player], "Player", ("wins" + gv_game_mode_string), (gv_player_mode_wins[lp_player] + 1));
    gv_player_current_elo[lp_player] = ((gv_player_elos[lp_player] - gv_player_elos_wagers[lp_player]) + (gv_total_wagers / gv_players_per_team));
    BankValueSetFromFixed(gv_banks[lp_player], "Player", ("elo" + gv_game_mode_string), gv_player_current_elo[lp_player]);
}

text gf_GetTeamPlayerList (int lp_team) {
    // Variable Declarations
    int lv_player;
    text lv_string;

    // Automatic Variable Declarations
    playergroup auto5CEE6BAE_g;

    // Variable Initialization

    // Implementation
    lv_string = StringToText("");
    auto5CEE6BAE_g = gv_teams[lp_team];
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5CEE6BAE_g, lv_player);
        if (lv_player < 0) { break; }
        lv_string = (lv_string + StringExternal("Param/Value/2DABF6B5") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/BB11940F"));
    }
    return lv_string;
}

void gf_ShowFinalStandings (int lp_winning_team) {
    // Variable Declarations
    fixed lv_cur_top_performance;
    int lv_runner_up_team;
    int lv_team;

    // Automatic Variable Declarations
    const int auto9614AB2F_ae = 3;
    const int auto9614AB2F_ai = 1;
    const int auto063A0715_ae = 3;
    const int auto063A0715_ai = 1;

    // Variable Initialization
    lv_runner_up_team = -1;

    // Implementation
    lv_runner_up_team = lp_winning_team;
    lv_team = 0;
    for ( ; ( (auto9614AB2F_ai >= 0 && lv_team <= auto9614AB2F_ae) || (auto9614AB2F_ai < 0 && lv_team >= auto9614AB2F_ae) ) ; lv_team += auto9614AB2F_ai ) {
        if ((gv_team_peak_performance[lv_team] >= gv_team_peak_performance[lv_runner_up_team])) {
            lv_runner_up_team = lv_team;
            lv_cur_top_performance = gv_team_peak_performance[lv_team];
        }
    }
    if ((lv_runner_up_team == lp_winning_team)) {
        lv_cur_top_performance = 0.0;
        lv_team = 0;
        for ( ; ( (auto063A0715_ai >= 0 && lv_team <= auto063A0715_ae) || (auto063A0715_ai < 0 && lv_team >= auto063A0715_ae) ) ; lv_team += auto063A0715_ai ) {
            if ((gv_team_peak_performance_for_winning_team[lp_winning_team][lv_team] >= lv_cur_top_performance)) {
                lv_runner_up_team = lv_team;
                lv_cur_top_performance = gv_team_peak_performance_for_winning_team[lp_winning_team][lv_team];
            }
        }
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (gf_GetTeamPlayerList(lp_winning_team) + StringToText("") + StringExternal("Param/Value/DFB2EDB0") + FixedToText(gv_team_peak_performance[lp_winning_team], 2) + StringToText("")));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (gf_GetTeamPlayerList(lv_runner_up_team) + StringToText("") + StringExternal("Param/Value/64965991") + FixedToText(lv_cur_top_performance, 2) + StringToText("")));
}

void gf_ShowCorrectLeaderboard (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerType(lp_player) == c_playerTypeNeutral) || (BankValueGetAsFlag(gv_banks[lp_player], "Player", "use_team_leaderboard") == true))) {
        DialogSetVisible(gv_teamLeaderboard, PlayerGroupSingle(lp_player), true);
        DialogSetVisible(gv_playerLeaderboard, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogSetVisible(gv_teamLeaderboard, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_playerLeaderboard, PlayerGroupSingle(lp_player), true);
    }
}

void gf_UpdatePlayerColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(gv_team_leaderboard_player_names[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_leaderboard_player_scores[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_player_leaderboard_player_names[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_player_leaderboard_player_scores[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
}

void gf_LeaderboardInit () {
    // Variable Declarations
    int[5] lv_current_team_rank;
    int lv_current_rank;
    int lv_teamFrame;
    int lv_playerFrame;
    int lv_player;
    int lv_team;

    // Automatic Variable Declarations
    playergroup auto5FBD3F8B_g;
    int autoAFDD36F3_ae;
    const int autoAFDD36F3_ai = 1;
    playergroup auto1286F6C1_g;
    playergroup autoDA99E279_g;

    // Variable Initialization
    lv_teamFrame = c_invalidDialogControlId;
    lv_playerFrame = c_invalidDialogControlId;

    // Implementation
    DialogCreate(500, 400, c_anchorTopRight, 10, 70, true);
    gv_teamLeaderboard = DialogLastCreated();
    DialogCreate(500, 400, c_anchorTopRight, 10, 70, true);
    gv_playerLeaderboard = DialogLastCreated();
    DialogSetImageVisible(gv_teamLeaderboard, false);
    DialogSetImageVisible(gv_playerLeaderboard, false);
    gf_ShowCorrectLeaderboard(0);
    auto5FBD3F8B_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5FBD3F8B_g, lv_player);
        if (lv_player < 0) { break; }
        gf_ShowCorrectLeaderboard(lv_player);
    }
    autoAFDD36F3_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (autoAFDD36F3_ai >= 0 && lv_team <= autoAFDD36F3_ae) || (autoAFDD36F3_ai < 0 && lv_team >= autoAFDD36F3_ae) ) ; lv_team += autoAFDD36F3_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            gv_team_rank[lv_current_rank] = lv_team;
            lv_current_rank = (lv_current_rank + 1);
            DialogControlCreateFromTemplate(gv_teamLeaderboard, c_triggerControlTypePanel, "ZoneLeaderboard/TeamFrame");
            lv_teamFrame = DialogControlLastCreated();
            gv_team_leaderboard_team_frames[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamScore");
            gv_team_leaderboard_team_score_dialog_item[lv_team] = DialogControlLastCreated();
            DialogControlHookup(lv_teamFrame, c_triggerControlTypeLabel, "TeamName");
            gv_team_leaderboard_team_name_dialog_item[lv_team] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/7A6AC653") + IntToText((lv_team + 1))), PlayerGroupAll());
        }

    }
    auto1286F6C1_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1286F6C1_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            lv_team = gv_player_team[lv_player];
            gv_player_team_rank[lv_team][lv_current_team_rank[lv_team]] = lv_player;
            lv_current_team_rank[lv_team] = (lv_current_team_rank[lv_team] + 1);
            DialogControlCreateInPanelFromTemplate(gv_team_leaderboard_team_frames[gv_player_team[lv_player]], c_triggerControlTypePanel, "ZoneLeaderboard/PlayerFrame");
            lv_playerFrame = DialogControlLastCreated();
            gv_team_leaderboard_player_frames[lv_player] = lv_playerFrame;
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Score");
            gv_team_leaderboard_player_scores[lv_player] = DialogControlLastCreated();
            gv_player_colors[lv_player] = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Name");
            gv_team_leaderboard_player_names[lv_player] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (PlayerName(lv_player) + (StringExternal("Param/Value/298CA7FA") + (IntToText(RoundI(gv_player_elos[lv_player])) + StringExternal("Param/Value/FEC831E8")))), PlayerGroupAll());
        }
    }
    lv_current_rank = 0;
    autoDA99E279_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDA99E279_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            gv_player_rank[lv_current_rank] = lv_player;
            lv_current_rank = (lv_current_rank + 1);
            DialogControlCreateFromTemplate(gv_playerLeaderboard, c_triggerControlTypePanel, "ZoneLeaderboard/PlayerFrame");
            lv_playerFrame = DialogControlLastCreated();
            gv_player_leaderboard_player_frames[lv_player] = lv_playerFrame;
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Score");
            gv_player_leaderboard_player_scores[lv_player] = DialogControlLastCreated();
            gv_player_colors[lv_player] = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false));
            DialogControlHookup(lv_playerFrame, c_triggerControlTypeLabel, "Player1Name");
            gv_player_leaderboard_player_names[lv_player] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (PlayerName(lv_player) + (StringExternal("Param/Value/D949A0BD") + (IntToText(RoundI(gv_player_elos[lv_player])) + StringExternal("Param/Value/4D217C45")))), PlayerGroupAll());
            gf_UpdatePlayerColor(lv_player);
        }
    }
    gf_UpdateLeaderboardSortOrder();
}

void gf_UpdateLeaderboardSortOrder () {
    // Variable Declarations
    color lv_team_color;
    int lv_player_rank;
    int lv_team_rank;
    int lv_team;
    int lv_player;

    // Automatic Variable Declarations
    int auto45D61597_ae;
    const int auto45D61597_ai = 1;
    int auto6A520955_ae;
    const int auto6A520955_ai = 1;
    int auto37397ADC_ae;
    const int auto37397ADC_ai = 1;
    const int auto6E4B72E8_ae = 7;
    const int auto6E4B72E8_ai = 1;

    // Variable Initialization
    lv_team_color = Color(0,0,0);

    // Implementation
    auto45D61597_ae = (gv_num_teams - 1);
    lv_team_rank = 0;
    for ( ; ( (auto45D61597_ai >= 0 && lv_team_rank <= auto45D61597_ae) || (auto45D61597_ai < 0 && lv_team_rank >= auto45D61597_ae) ) ; lv_team_rank += auto45D61597_ai ) {
        DialogControlSetPosition(gv_team_leaderboard_team_frames[gv_team_rank[lv_team_rank]], PlayerGroupAll(), c_anchorTopLeft, 0, ((((gv_players_per_team + 1) * 28) + 5) * lv_team_rank));
    }
    auto6A520955_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto6A520955_ai >= 0 && lv_team <= auto6A520955_ae) || (auto6A520955_ai < 0 && lv_team >= auto6A520955_ae) ) ; lv_team += auto6A520955_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_team_color = gv_player_colors[gv_player_team_rank[lv_team][0]];
            libNtve_gf_SetDialogItemColor(gv_team_leaderboard_team_name_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_team_leaderboard_team_score_dialog_item[lv_team], lv_team_color, PlayerGroupAll());
        }

        auto37397ADC_ae = (gv_players_per_team - 1);
        lv_player_rank = 0;
        for ( ; ( (auto37397ADC_ai >= 0 && lv_player_rank <= auto37397ADC_ae) || (auto37397ADC_ai < 0 && lv_player_rank >= auto37397ADC_ae) ) ; lv_player_rank += auto37397ADC_ai ) {
            lv_player = gv_player_team_rank[lv_team][lv_player_rank];
            if ((lv_player > 0)) {
                DialogControlSetPosition(gv_team_leaderboard_player_frames[lv_player], PlayerGroupAll(), c_anchorTopLeft, 20, ((lv_player_rank + 1) * 28));
            }

        }
    }
    lv_player_rank = 0;
    for ( ; ( (auto6E4B72E8_ai >= 0 && lv_player_rank <= auto6E4B72E8_ae) || (auto6E4B72E8_ai < 0 && lv_player_rank >= auto6E4B72E8_ae) ) ; lv_player_rank += auto6E4B72E8_ai ) {
        lv_player = gv_player_rank[lv_player_rank];
        if ((lv_player > 0)) {
            DialogControlSetPosition(gv_player_leaderboard_player_frames[lv_player], PlayerGroupAll(), c_anchorTopLeft, 20, ((lv_player_rank + 0) * 28));
        }

    }
}

void gf_UpdateLeaderboard (bool lp_force_update_sort) {
    // Variable Declarations
    fixed lv_teams_left;
    int lv_total_score;
    int lv_team2;
    int lv_team1;
    int lv_player2;
    int lv_player1;
    bool lv_swap_needed;
    bool lv_player_sort_order_modified;
    int lv_swap;
    int lv_sort_index;
    int lv_team;
    int[5] lv_team_scores;
    int[5] lv_team_nuke_scores;
    int lv_player;
    int lv_player_score;

    // Automatic Variable Declarations
    playergroup autoCE5FF33E_g;
    const int auto81D86527_ae = 3;
    const int auto81D86527_ai = 1;
    int auto34AC0828_ae;
    const int auto34AC0828_ai = 1;
    int auto1F60DB84_ae;
    const int auto1F60DB84_ai = 1;
    int autoF24ADD00_ae;
    const int autoF24ADD00_ai = 1;
    int auto95E8FBC3_ae;
    const int auto95E8FBC3_ai = 1;

    // Variable Initialization

    // Implementation
    autoCE5FF33E_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCE5FF33E_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            if ((gv_num_nukes_detected[lv_player] == 0)) {
                lv_team_nuke_scores[gv_player_team[lv_player]] += 500;
            }

            lv_player_score = (PlayerScoreValueGetAsInt(lv_player, "UnitsKilledValue") + (PlayerScoreValueGetAsInt(lv_player, "StructuresKilledValue") + gv_player_shards_collected[lv_player]));
            gv_player_scores[lv_player] = lv_player_score;
            lv_team_scores[gv_player_team[lv_player]] = (lv_player_score + lv_team_scores[gv_player_team[lv_player]]);
            gv_team_scores[gv_player_team[lv_player]] = lv_team_scores[gv_player_team[lv_player]];
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_player_scores[lv_player], IntToText(lv_player_score), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_player_leaderboard_player_scores[lv_player], IntToText(lv_player_score), PlayerGroupAll());
        }

    }
    lv_team = 0;
    for ( ; ( (auto81D86527_ai >= 0 && lv_team <= auto81D86527_ae) || (auto81D86527_ai < 0 && lv_team >= auto81D86527_ae) ) ; lv_team += auto81D86527_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            libNtve_gf_SetDialogItemText(gv_team_leaderboard_team_score_dialog_item[lv_team], IntToText(lv_team_scores[lv_team]), PlayerGroupAll());
        }

    }
    auto34AC0828_ae = (gv_num_teams - 2);
    lv_sort_index = 0;
    for ( ; ( (auto34AC0828_ai >= 0 && lv_sort_index <= auto34AC0828_ae) || (auto34AC0828_ai < 0 && lv_sort_index >= auto34AC0828_ae) ) ; lv_sort_index += auto34AC0828_ai ) {
        lv_team1 = gv_team_rank[lv_sort_index];
        lv_team2 = gv_team_rank[(lv_sort_index + 1)];
        if ((gv_team_alive[lv_team1] == gv_team_alive[lv_team2])) {
            lv_swap_needed = (lv_team_scores[lv_team1] < lv_team_scores[lv_team2]);
        }
        else {
            lv_swap_needed = gv_team_alive[lv_team2];
        }
        if ((lv_swap_needed == true)) {
            gv_team_rank[lv_sort_index] = lv_team2;
            gv_team_rank[(lv_sort_index + 1)] = lv_team1;
            lv_player_sort_order_modified = true;
        }

    }
    auto1F60DB84_ae = (gv_num_teams - 1);
    lv_team = 0;
    for ( ; ( (auto1F60DB84_ai >= 0 && lv_team <= auto1F60DB84_ae) || (auto1F60DB84_ai < 0 && lv_team >= auto1F60DB84_ae) ) ; lv_team += auto1F60DB84_ai ) {
        autoF24ADD00_ae = (gv_players_per_team - 2);
        lv_sort_index = 0;
        for ( ; ( (autoF24ADD00_ai >= 0 && lv_sort_index <= autoF24ADD00_ae) || (autoF24ADD00_ai < 0 && lv_sort_index >= autoF24ADD00_ae) ) ; lv_sort_index += autoF24ADD00_ai ) {
            lv_player1 = gv_player_team_rank[lv_team][lv_sort_index];
            lv_player2 = gv_player_team_rank[lv_team][(lv_sort_index + 1)];
            if ((gv_player_alive[lv_player1] == gv_player_alive[lv_player2])) {
                lv_swap_needed = (gv_player_scores[lv_player1] < gv_player_scores[lv_player2]);
            }
            else {
                lv_swap_needed = gv_player_alive[lv_player2];
            }
            if ((lv_swap_needed == true)) {
                gv_player_team_rank[lv_team][lv_sort_index] = lv_player2;
                gv_player_team_rank[lv_team][(lv_sort_index + 1)] = lv_player1;
                lv_player_sort_order_modified = true;
            }

        }
    }
    auto95E8FBC3_ae = ((gv_num_teams * gv_players_per_team) - 2);
    lv_sort_index = 0;
    for ( ; ( (auto95E8FBC3_ai >= 0 && lv_sort_index <= auto95E8FBC3_ae) || (auto95E8FBC3_ai < 0 && lv_sort_index >= auto95E8FBC3_ae) ) ; lv_sort_index += auto95E8FBC3_ai ) {
        lv_player1 = gv_player_rank[lv_sort_index];
        lv_player2 = gv_player_rank[(lv_sort_index + 1)];
        if ((gv_player_alive[lv_player1] == gv_player_alive[lv_player2])) {
            lv_swap_needed = (gv_player_scores[lv_player1] < gv_player_scores[lv_player2]);
        }
        else {
            lv_swap_needed = gv_player_alive[lv_player2];
        }
        if ((lv_swap_needed == true)) {
            gv_player_rank[lv_sort_index] = lv_player2;
            gv_player_rank[(lv_sort_index + 1)] = lv_player1;
            lv_player_sort_order_modified = true;
        }

    }
    if ((!((lv_player_sort_order_modified == true) || (lp_force_update_sort == true)))) {
        gf_UpdateLeaderboardSortOrder();
    }

}

void gf_UpdateTeamInfoColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(gv_team_info_player_mineral[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_armor[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_attack[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_range[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_regen[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_speed[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_armor[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_regen[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_team_info_player_bunker_slots[lp_player], gv_player_colors[lp_player], PlayerGroupAll());
}

void gf_TeamInfoInit () {
    int init_i;

    // Variable Declarations
    playergroup lv_all_players_and_observers;
    int lv_header;
    int[10] lv_player_slot_counts;
    int lv_player;
    int lv_teammate;
    int lv_mainDialog;
    int lv_position;

    // Automatic Variable Declarations
    playergroup auto1B60C81C_g;
    playergroup auto530E5BC5_g;
    playergroup auto8B2D3C70_g;

    // Variable Initialization
    lv_all_players_and_observers = PlayerGroupEmpty();
    lv_header = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_player_slot_counts[init_i] = 1;
    }
    lv_mainDialog = c_invalidDialogId;

    // Implementation
    DialogCreate(900, 200, c_anchorTopLeft, 110, 15, true);
    lv_mainDialog = DialogLastCreated();
    DialogSetImageVisible(lv_mainDialog, false);
    DialogSetVisible(lv_mainDialog, PlayerGroupAll(), true);
    auto1B60C81C_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1B60C81C_g, lv_player);
        if (lv_player < 0) { break; }
        DialogControlCreateFromTemplate(lv_mainDialog, c_triggerControlTypePanel, "ZoneTeammateStats/TeammateStateIcons");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(lv_player), c_anchorTopLeft, 0, 0);
        lv_header = DialogControlLastCreated();
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "PlayerMineralIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\icon-mineral.dds", PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "SpeedIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][4], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "RegenIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][3], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "RangeIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][2], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "AttackIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][1], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "ArmorIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][0], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerArmorIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][5], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerRegenIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][6], PlayerGroupAll());
        DialogControlHookup(lv_header, c_triggerControlTypeImage, "BunkerSlotsIcon");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_race_teaminfo_icons[gv_player_race_index[lv_player]][7], PlayerGroupAll());
        DialogControlCreateFromTemplate(lv_mainDialog, c_triggerControlTypePanel, "ZoneTeammateStats/TeammateState");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_team_info_player_dialogs[lv_player] = DialogControlLastCreated();
        DialogControlSetPosition(gv_team_info_player_dialogs[lv_player], PlayerGroupSingle(lv_player), c_anchorTopLeft, 0, ((0 * 30) + 30));
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "PlayerMinerals");
        gv_team_info_player_mineral[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "AttackUp");
        gv_team_info_player_attack[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "ArmorUp");
        gv_team_info_player_armor[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "RangeUp");
        gv_team_info_player_range[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "RegenUp");
        gv_team_info_player_regen[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "SpeedUp");
        gv_team_info_player_speed[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerArmorUp");
        gv_team_info_player_bunker_armor[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerRegenUp");
        gv_team_info_player_bunker_regen[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeLabel, "BunkerSlotsUp");
        gv_team_info_player_bunker_slots[lv_player] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "ArmorUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][0] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "AttackUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][1] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "RangeUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][2] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "RegenUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][3] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "SpeedUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][4] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerArmorUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][5] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerRegenUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][6] = DialogControlLastCreated();
        DialogControlHookup(gv_team_info_player_dialogs[lv_player], c_triggerControlTypeButton, "BunkerSlotsUpButton");
        gv_team_info_player_upgrade_buttons[lv_player][7] = DialogControlLastCreated();
        TriggerAddEventDialogControl(gt_ButtonPress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
        gf_UpdateTeamInfoColor(lv_player);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_all_players, lv_all_players_and_observers);
    PlayerGroupAdd(lv_all_players_and_observers, 0);
    lv_player_slot_counts[0] = 0;
    auto530E5BC5_g = lv_all_players_and_observers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto530E5BC5_g, lv_player);
        if (lv_player < 0) { break; }
        auto8B2D3C70_g = gv_all_players;
        lv_teammate = -1;
        while (true) {
            lv_teammate = PlayerGroupNextPlayer(auto8B2D3C70_g, lv_teammate);
            if (lv_teammate < 0) { break; }
            if (((lv_player == 0) || (gv_player_team[lv_player] == gv_player_team[lv_teammate]))) {
                DialogControlSetVisible(gv_team_info_player_dialogs[lv_teammate], PlayerGroupSingle(lv_player), true);
            }

            if ((((lv_player != lv_teammate) && ((lv_player == 0) || (gv_player_team[lv_player] == gv_player_team[lv_teammate]))))) {
                DialogControlSetPosition(gv_team_info_player_dialogs[lv_teammate], PlayerGroupSingle(lv_player), c_anchorTopLeft, 0, ((lv_player_slot_counts[lv_player] * 30) + 30));
                lv_player_slot_counts[lv_player] = (lv_player_slot_counts[lv_player] + 1);
            }

        }
    }
}

void gf_UpdateTeamInfoForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player_alive[gv_team_info_current_player] == true)) {
        libNtve_gf_SetDialogItemText(gv_team_info_player_mineral[lp_player], IntToText(PlayerGetPropertyInt(lp_player, c_playerPropMinerals)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_armor[lp_player], IntToText(gv_team_info_player_armor_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_attack[lp_player], IntToText(gv_team_info_player_attack_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_range[lp_player], IntToText(gv_team_info_player_range_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_regen[lp_player], IntToText(gv_team_info_player_regen_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_speed[lp_player], IntToText(gv_team_info_player_speed_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_armor[lp_player], IntToText(gv_team_info_player_bunker_armor_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_regen[lp_player], IntToText(gv_team_info_player_bunker_regen_level[lp_player]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_team_info_player_bunker_slots[lp_player], IntToText(gv_team_info_player_bunker_slots_level[lp_player]), PlayerGroupAll());
    }

}

void gf_RedrawDeathNotifications () {
    // Variable Declarations
    int lv_index;
    int lv_player;
    text lv_string;

    // Automatic Variable Declarations
    int auto7DBB0B2B_ae;
    const int auto7DBB0B2B_ai = 1;

    // Variable Initialization

    // Implementation
    while ((gv_num_messages >= 1)) {
        lv_string = gv_messages[0];
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, lv_string);
        Wait(8.0, c_timeGame);
        while (gv_message_lock) {
            Wait(1.0, c_timeGame);
        }
        gv_message_lock = true;
        auto7DBB0B2B_ae = gv_num_messages;
        lv_index = 0;
        for ( ; ( (auto7DBB0B2B_ai >= 0 && lv_index <= auto7DBB0B2B_ae) || (auto7DBB0B2B_ai < 0 && lv_index >= auto7DBB0B2B_ae) ) ; lv_index += auto7DBB0B2B_ai ) {
            gv_messages[lv_index] = gv_messages[(lv_index + 1)];
        }
        gv_num_messages = (gv_num_messages - 1);
        gv_message_lock = false;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
}

void gf_NotifyPlayerDied (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((TextWithColor(PlayerName(lp_palyer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_palyer, false))) + StringExternal("Param/Value/90E4AD59")));
}

void gf_NotifyPlayerLeave (int lp_palyer) {
    // Automatic Variable Declarations
    // Implementation
    gf_AddMessage((TextWithColor(PlayerName(lp_palyer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_palyer, false))) + StringExternal("Param/Value/8D5E846C")));
}

void gf_AddMessage (text lp_message) {
    // Variable Declarations
    bool lv_process_needed;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (gv_message_lock) {
        Wait(1.0, c_timeGame);
    }
    gv_message_lock = true;
    lv_process_needed = (gv_num_messages == 0);
    gv_messages[gv_num_messages] = lp_message;
    gv_num_messages = (gv_num_messages + 1);
    gv_message_lock = false;
    if ((lv_process_needed == true)) {
        gf_RedrawDeathNotifications();
    }

}

int gf_GetBunkerIndex (unit lp_bunker) {
    // Variable Declarations
    int lv_y;
    int lv_x;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_point = UnitGetPosition(lp_bunker);
    lv_x = RoundI(((PointGetX(lv_point) - 20.5) / 10.0));
    lv_y = RoundI(((90.0 - PointGetY(lv_point)) / 10.0));
    return (lv_x + RoundI((lv_y * 8.0)));
}

void gf_OnBunkerCreated (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_locations[lv_bunker_index] = UnitGetPosition(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = lp_player;
    gv_bunker_retire_status[lv_bunker_index] = false;
    gv_bunkers[lv_bunker_index] = lp_bunker;
    gv_bunker_spawn_points[lv_bunker_index] = Point(gv_player_spawn_offsets[lp_player][0], gv_player_spawn_offsets[lp_player][1]);
    gv_bunker_spawn_points[lv_bunker_index] = PointWithOffset(gv_bunker_locations[lv_bunker_index], gv_player_spawn_offsets[lp_player][0], gv_player_spawn_offsets[lp_player][1]);
    UnitGroupAdd(gv_structuresGroup[lp_player], lp_bunker);
    UnitControlGroupAddUnit(UnitGetOwner(lp_bunker), 2, lp_bunker);
    TriggerAddEventUnitDied(gt_BunkerDestoryed, UnitRefFromUnit(lp_bunker));
}

void gf_OnBunkerCreated3 (unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_structuresGroup[UnitGetOwner(lp_bunker)], lp_bunker);
    UnitControlGroupAddUnit(UnitGetOwner(lp_bunker), 2, lp_bunker);
     TriggerAddEventUnitOrder(gt_OnRallyChange, UnitRefFromUnit(lp_bunker), AbilityCommand("Rally", 0));
}

void gf_OnBunkerCreated2 (unit lp_worker) {
    // Variable Declarations
    int lv_untitledVariable001;
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_UpdateSingleWorker(lp_worker, gf_PlayerHasNuke(UnitGetOwner(lp_worker)));
    UnitControlGroupAddUnit(UnitGetOwner(lp_worker), 3, lp_worker);
    TriggerAddEventUnitDied(gt_ScvDied, UnitRefFromUnit(lp_worker));
}

void gf_OnBunkerRemoved (int lp_player, unit lp_bunker) {
    // Variable Declarations
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bunker_index = gf_GetBunkerIndex(lp_bunker);
    gv_bunker_owners[lv_bunker_index] = 0;
    gv_spawner_upgrade_status[lv_bunker_index] = 0;
    gf_TestPlayerDead(lp_player);
}

void gf_UpdateAllWorkers (int lp_player) {
    // Variable Declarations
    bool lv_player_has_nuke;
    actor lv_stored_actor;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoDF5EA8CF_g;
    int autoDF5EA8CF_u;

    // Variable Initialization

    // Implementation
    lv_player_has_nuke = gf_PlayerHasNuke(lp_player);
    autoDF5EA8CF_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF5EA8CF_u = UnitGroupCount(autoDF5EA8CF_g, c_unitCountAll);
    for (;; autoDF5EA8CF_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoDF5EA8CF_g, autoDF5EA8CF_u);
        if (lv_unit == null) { break; }
        if (((UnitGetType(lv_unit) == "SCV") || (UnitGetType(lv_unit) == "Probe") || (UnitGetType(lv_unit) == "Drone"))) {
            gf_UpdateSingleWorker(lv_unit, lv_player_has_nuke);
        }

    }
}

void gf_UpdateSingleWorker (unit lp_worker, bool lp_player_has_nuke) {
    // Variable Declarations
    actor lv_stored_actor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_stored_actor = libHots_gf_ActorForUnit(lp_worker, 1);
    if ((lp_player_has_nuke == true)) {
        if ((lv_stored_actor == null)) {
            libNtve_gf_AttachModelToUnit(lp_worker, "SS_PowerupStrongerMissiles", "Ref_Hardpoint");
            libHots_gf_StoreActorForUnit(lp_worker, 1, libNtve_gf_ActorLastCreated());
        }

    }
    else {
        if ((lv_stored_actor == null)) {
        }
        else {
            libNtve_gf_KillModel(lv_stored_actor);
            libHots_gf_StoreActorForUnit(lp_worker, 1, null);
        }
    }
}

bool gf_PlayerHasNuke (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitMagazineCount(gv_ghost_academies[lp_player], "ArmSiloWithNuke") >= 1);
}

void gf_SetDeadPlayerColor (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_player_left_game[lp_player] == true)) {
        gv_player_colors[lp_player] = Color(0.00, 0.00, 0.00);
    }
    else {
        gv_player_colors[lp_player] = Color(25.49, 25.49, 25.49);
    }
}

void gf_TestVictory () {
    // Variable Declarations
    int lv_player;
    int lv_alive_team;

    // Automatic Variable Declarations
    playergroup auto6884B796_g;
    playergroup autoFF8AFB91_g;
    playergroup autoCF996047_g;
    playergroup auto6BDECC6F_g;

    // Variable Initialization
    lv_alive_team = -1;

    // Implementation
    auto6884B796_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6884B796_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_alive[lv_player] == true)) {
            if (((lv_alive_team == gv_player_team[lv_player]) || (lv_alive_team == -1))) {
                lv_alive_team = gv_player_team[lv_player];
            }
            else {
                return ;
            }
        }

    }
    autoFF8AFB91_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoFF8AFB91_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_team[lv_player] == lv_alive_team)) {
            gf_RecordUpdateGameVictory(lv_player);
        }

    }
    gf_RecordLastGameResults(lv_alive_team);
    autoCF996047_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCF996047_g, lv_player);
        if (lv_player < 0) { break; }
        gf_SaveBankIfFullGame(lv_player);
    }
    gf_ShowFinalStandings(lv_alive_team);
    Wait(1.0, c_timeGame);
    auto6BDECC6F_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6BDECC6F_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_team[lv_player] == lv_alive_team)) {
            GameOver(lv_player, c_gameOverVictory, true, true);
        }
        else {
            GameOver(lv_player, c_gameOverDefeat, true, true);
        }
    }
}

void gf_OnPlayerDead (int lp_player) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoF739310F_g;
    int autoF739310F_u;
    unitgroup auto5C8128CE_g;
    int auto5C8128CE_u;

    // Variable Initialization

    // Implementation
    gv_player_alive[lp_player] = false;
    gf_SetDeadPlayerColor(lp_player);
    gf_UpdatePlayerColor(lp_player);
    gf_UpdateTeamInfoColor(lp_player);
    gf_UpdateLeaderboard(true);
    autoF739310F_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF739310F_u = UnitGroupCount(autoF739310F_g, c_unitCountAll);
    for (;; autoF739310F_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoF739310F_g, autoF739310F_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    auto5C8128CE_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5C8128CE_u = UnitGroupCount(auto5C8128CE_g, c_unitCountAll);
    for (;; auto5C8128CE_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto5C8128CE_g, auto5C8128CE_u);
        if (lv_unit == null) { break; }
        UnitRemove(lv_unit);
    }
    gf_TestVictory();
}

void gf_TestPlayerDead (int lp_player) {
    // Variable Declarations
    unit lv_possible_bunker;
    int lv_teammate;
    int lv_slot;

    // Automatic Variable Declarations
    const int autoA6BAEF31_ae = 63;
    const int autoA6BAEF31_ai = 1;
    unitgroup auto6E6881B1_g;
    int auto6E6881B1_u;
    playergroup auto4A0D2F01_g;

    // Variable Initialization

    // Implementation
    lv_slot = 1;
    for ( ; ( (autoA6BAEF31_ai >= 0 && lv_slot <= autoA6BAEF31_ae) || (autoA6BAEF31_ai < 0 && lv_slot >= autoA6BAEF31_ae) ) ; lv_slot += autoA6BAEF31_ai ) {
        if ((gv_bunker_owners[lv_slot] == lp_player)) {
            return ;
        }

    }
    auto6E6881B1_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6E6881B1_u = UnitGroupCount(auto6E6881B1_g, c_unitCountAll);
    for (;; auto6E6881B1_u -= 1) {
        lv_possible_bunker = UnitGroupUnitFromEnd(auto6E6881B1_g, auto6E6881B1_u);
        if (lv_possible_bunker == null) { break; }
        if ((UnitGetType(lv_possible_bunker) == "Bunker")) {
            return ;
        }

    }
    auto4A0D2F01_g = PlayerGroupAlliance(c_playerGroupAlly, lp_player);
    lv_teammate = -1;
    while (true) {
        lv_teammate = PlayerGroupNextPlayer(auto4A0D2F01_g, lv_teammate);
        if (lv_teammate < 0) { break; }
        PlayerSetAlliance(lp_player, c_allianceIdVision, lv_teammate, false);
    }
    VisRevealerCreate(lp_player, RegionEntireMap());
    gv_player_revealers[lp_player] = VisRevealerLastCreated();
    gf_OnPlayerDead(lp_player);
    gf_NotifyPlayerDied(lp_player);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help
//--------------------------------------------------------------------------------------------------
bool gt_Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/42164AEC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Help_Init () {
    gt_Help = TriggerCreate("gt_Help_Func");
    TriggerAddEventChatMessage(gt_Help, c_playerAny, "-help", true);
    TriggerAddEventChatMessage(gt_Help, c_playerAny, "-h", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control
//--------------------------------------------------------------------------------------------------
bool gt_Control_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_has_control_shared;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    playergroup autoAC7F0913_g;
    playergroup auto0C64208D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    autoAC7F0913_g = PlayerGroupAlliance(c_playerGroupAlly, lv_player);
    lv_ally = -1;
    while (true) {
        lv_ally = PlayerGroupNextPlayer(autoAC7F0913_g, lv_ally);
        if (lv_ally < 0) { break; }
        if (((PlayerGetAlliance(lv_player, c_allianceIdControl, lv_ally) == true) && (lv_player != lv_ally))) {
            lv_has_control_shared = true;
        }

    }
    if ((lv_has_control_shared == true)) {
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_player), c_messageAreaChat, StringExternal("Param/Value/0238EF3D"));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/4CECA4D5"));
    }
    else {
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_player), c_messageAreaChat, StringExternal("Param/Value/4C6E8C81"));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/5BD76028"));
    }
    auto0C64208D_g = PlayerGroupAlliance(c_playerGroupAlly, lv_player);
    lv_ally = -1;
    while (true) {
        lv_ally = PlayerGroupNextPlayer(auto0C64208D_g, lv_ally);
        if (lv_ally < 0) { break; }
        if ((lv_player != lv_ally)) {
            if ((lv_has_control_shared == true)) {
                PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, false);
            }
            else {
                PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Control_Init () {
    gt_Control = TriggerCreate("gt_Control_Func");
    TriggerAddEventChatMessage(gt_Control, c_playerAny, "-control", true);
    TriggerAddEventChatMessage(gt_Control, c_playerAny, "-c", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ButtonPress
//--------------------------------------------------------------------------------------------------
bool gt_ButtonPress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_qnkgqrppndkojrju;
    bool lv_has_control_shared;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    const int autoDC2BB981_ae = 8;
    const int autoDC2BB981_ai = 1;
    const int autoA9265719_ae = 7;
    const int autoA9265719_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (autoDC2BB981_ai >= 0 && lv_player <= autoDC2BB981_ae) || (autoDC2BB981_ai < 0 && lv_player >= autoDC2BB981_ae) ) ; lv_player += autoDC2BB981_ai ) {
        lv_qnkgqrppndkojrju = 0;
        for ( ; ( (autoA9265719_ai >= 0 && lv_qnkgqrppndkojrju <= autoA9265719_ae) || (autoA9265719_ai < 0 && lv_qnkgqrppndkojrju >= autoA9265719_ae) ) ; lv_qnkgqrppndkojrju += autoA9265719_ai ) {
            if ((EventDialogControl() == gv_team_info_player_upgrade_buttons[lv_player][lv_qnkgqrppndkojrju])) {
                if (((gv_player_is_afk[lv_player] == true) && (PlayerGetAlliance(lv_player, c_allianceIdControl, EventPlayer()) == true))) {
                    UnitIssueOrder(gv_research_facilities[lv_player], Order(gv_race_teaminfo_upgrade_abilities[gv_player_race_index[lv_player]][lv_qnkgqrppndkojrju]), c_orderQueueReplace);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonPress_Init () {
    gt_ButtonPress = TriggerCreate("gt_ButtonPress_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CheckForInvalidGame
//--------------------------------------------------------------------------------------------------
bool gt_CheckForInvalidGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4309E3C8_g;
    playergroup autoCEE91A08_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_game_contains_ai == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B40F80D"));
        auto4309E3C8_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(auto4309E3C8_g, lv_player);
            if (lv_player < 0) { break; }
            GameOver(lv_player, c_gameOverTie, true, true);
        }
    }

    if ((gv_game_inbalanced == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E26CC330"));
        autoCEE91A08_g = PlayerGroupAll();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoCEE91A08_g, lv_player);
            if (lv_player < 0) { break; }
            GameOver(lv_player, c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckForInvalidGame_Init () {
    gt_CheckForInvalidGame = TriggerCreate("gt_CheckForInvalidGame_Func");
    TriggerAddEventTimeElapsed(gt_CheckForInvalidGame, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    TimerStart(gv_game_timer, 50000.0, false, c_timeGame);
    gf_ConfigureConstants();
    gf_AssignTeamLocations();
    gf_SpawnPlayers();
    gf_SpectatorInit();
    gf_RecordUpdateGameStart();
    gf_LeaderboardInit();
    gf_TeamInfoInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectMovement
//--------------------------------------------------------------------------------------------------
bool gt_DetectMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_movement_detected[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectMovement_Init () {
    gt_DetectMovement = TriggerCreate("gt_DetectMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectPlayerChat
//--------------------------------------------------------------------------------------------------
bool gt_DetectPlayerChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_PlayerAfkEnded(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectPlayerChat_Init () {
    gt_DetectPlayerChat = TriggerCreate("gt_DetectPlayerChat_Func");
    TriggerAddEventChatMessage(gt_DetectPlayerChat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrackUnitMovement
//--------------------------------------------------------------------------------------------------
bool gt_TrackUnitMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup auto40E7B021_g;
    unitgroup autoE7451016_g;
    int autoE7451016_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto40E7B021_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto40E7B021_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_movement_detected[lv_player] == false)) {
            autoE7451016_g = UnitControlGroup(lv_player, 1);
            autoE7451016_u = UnitGroupCount(autoE7451016_g, c_unitCountAll);
            for (;; autoE7451016_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(autoE7451016_g, autoE7451016_u);
                if (lv_unit == null) { break; }
                TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_unit), AbilityCommand("move", 0));
                TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_unit), AbilityCommand("attack", 0));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackUnitMovement_Init () {
    gt_TrackUnitMovement = TriggerCreate("gt_TrackUnitMovement_Func");
    TriggerAddEventTimeElapsed(gt_TrackUnitMovement, 1.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_TrackUnitMovement, 5.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_TrackUnitMovement, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TrackRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_TrackRallyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    playergroup autoE911CA37_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE911CA37_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE911CA37_g, lv_player);
        if (lv_player < 0) { break; }
        lv_bunker = gv_initial_bunkers[lv_player];
         TriggerAddEventUnitOrder(gt_DetectMovement, UnitRefFromUnit(lv_bunker), AbilityCommand("Rally", 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackRallyChange_Init () {
    gt_TrackRallyChange = TriggerCreate("gt_TrackRallyChange_Func");
    TriggerAddEventTimeElapsed(gt_TrackRallyChange, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShareControlForAfkPlayer
//--------------------------------------------------------------------------------------------------
bool gt_ShareControlForAfkPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ywrvpcpmfvwfleut;
    int lv_player;
    int lv_ally;

    // Automatic Variable Declarations
    playergroup auto4958B184_g;
    const int autoFC6C6804_ae = 7;
    const int autoFC6C6804_ai = 1;
    playergroup auto035062F2_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4958B184_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4958B184_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_alive[lv_player] == true) && (gv_movement_detected[lv_player] == false))) {
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lv_player), c_messageAreaChat, (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/33188E24")));
            lv_ywrvpcpmfvwfleut = 0;
            for ( ; ( (autoFC6C6804_ai >= 0 && lv_ywrvpcpmfvwfleut <= autoFC6C6804_ae) || (autoFC6C6804_ai < 0 && lv_ywrvpcpmfvwfleut >= autoFC6C6804_ae) ) ; lv_ywrvpcpmfvwfleut += autoFC6C6804_ai ) {
                DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lv_player][lv_ywrvpcpmfvwfleut], PlayerGroupAlliance(c_playerGroupAlly, lv_player), true);
                DialogControlSetVisible(gv_team_info_player_upgrade_buttons[lv_player][lv_ywrvpcpmfvwfleut], PlayerGroupSingle(lv_player), true);
            }
            auto035062F2_g = PlayerGroupAlliance(c_playerGroupAlly, lv_player);
            lv_ally = -1;
            while (true) {
                lv_ally = PlayerGroupNextPlayer(auto035062F2_g, lv_ally);
                if (lv_ally < 0) { break; }
                if ((lv_player != lv_ally)) {
                    PlayerSetAlliance(lv_player, c_allianceIdControl, lv_ally, true);
                }

            }
            gv_player_is_afk[lv_player] = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShareControlForAfkPlayer_Init () {
    gt_ShareControlForAfkPlayer = TriggerCreate("gt_ShareControlForAfkPlayer_Func");
    TriggerAddEventTimeElapsed(gt_ShareControlForAfkPlayer, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Records
//--------------------------------------------------------------------------------------------------
bool gt_Records_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto22277244_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto22277244_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto22277244_g, lv_player);
        if (lv_player < 0) { break; }
        lv_message = (StringToText("") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
        lv_message = (lv_message + StringExternal("Param/Value/E66400FB"));
        lv_message = (lv_message + IntToText(gv_player_mode_wins[lv_player]));
        lv_message = (lv_message + StringExternal("Param/Value/77531E47"));
        lv_message = (lv_message + IntToText((gv_player_mode_games[lv_player] - gv_player_mode_wins[lv_player])));
        lv_message = (lv_message + StringExternal("Param/Value/3AC4D29A"));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, lv_message);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Records_Init () {
    gt_Records = TriggerCreate("gt_Records_Func");
    TriggerAddEventChatMessage(gt_Records, c_playerAny, "-records", true);
    TriggerAddEventChatMessage(gt_Records, c_playerAny, "-r", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Draw
//--------------------------------------------------------------------------------------------------
bool gt_Draw_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_player_draw = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Draw_Init () {
    gt_Draw = TriggerCreate("gt_Draw_Func");
    TriggerAddEventChatMessage(gt_Draw, c_playerAny, "-draw", true);
    TriggerAddEventChatMessage(gt_Draw, c_playerAny, "-d", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Elo
//--------------------------------------------------------------------------------------------------
bool gt_Elo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayElo(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Elo_Init () {
    gt_Elo = TriggerCreate("gt_Elo_Func");
    TriggerAddEventChatMessage(gt_Elo, c_playerAny, "-elo", true);
    TriggerAddEventChatMessage(gt_Elo, c_playerAny, "-e", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ComputeStandings
//--------------------------------------------------------------------------------------------------
bool gt_ComputeStandings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_num_teams;
    fixed[5] lv_num_teams_for_winning_team;
    fixed[5] lv_team_scores_with_nuke_bonus;
    fixed[5][5] lv_team_scores_with_nuke_bonus_for_winning_team;
    fixed lv_total_score;
    fixed[5] lv_total_score_for_winning_team;
    int lv_team;
    int lv_winning_team;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto8F014B60_g;
    const int auto32B39109_ae = 3;
    const int auto32B39109_ai = 1;
    const int auto9335F831_ae = 3;
    const int auto9335F831_ai = 1;
    const int autoF1D30EF4_ae = 3;
    const int autoF1D30EF4_ai = 1;
    const int auto494C091A_ae = 3;
    const int auto494C091A_ai = 1;
    const int auto64136BF7_ae = 3;
    const int auto64136BF7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F014B60_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto8F014B60_g, lv_player);
        if (lv_player < 0) { break; }
        if (((gv_player_alive[lv_player] == true) && (gf_PlayerHasNuke(lv_player) == true))) {
            lv_team_scores_with_nuke_bonus[gv_player_team[lv_player]] += 500.0;
            lv_winning_team = 0;
            for ( ; ( (auto32B39109_ai >= 0 && lv_winning_team <= auto32B39109_ae) || (auto32B39109_ai < 0 && lv_winning_team >= auto32B39109_ae) ) ; lv_winning_team += auto32B39109_ai ) {
                if ((gv_player_team[lv_player] != lv_winning_team)) {
                    lv_team_scores_with_nuke_bonus_for_winning_team[lv_winning_team][gv_player_team[lv_player]] += 500.0;
                }

            }
        }

    }
    lv_team = 0;
    for ( ; ( (auto9335F831_ai >= 0 && lv_team <= auto9335F831_ae) || (auto9335F831_ai < 0 && lv_team >= auto9335F831_ae) ) ; lv_team += auto9335F831_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            lv_team_scores_with_nuke_bonus[lv_team] += gv_team_scores[lv_team];
            lv_total_score += lv_team_scores_with_nuke_bonus[lv_team];
            lv_num_teams += 1.0;
            lv_winning_team = 0;
            for ( ; ( (autoF1D30EF4_ai >= 0 && lv_winning_team <= autoF1D30EF4_ae) || (autoF1D30EF4_ai < 0 && lv_winning_team >= autoF1D30EF4_ae) ) ; lv_winning_team += autoF1D30EF4_ai ) {
                if ((lv_team != lv_winning_team)) {
                    lv_team_scores_with_nuke_bonus_for_winning_team[lv_winning_team][lv_team] += gv_team_scores[lv_team];
                    lv_total_score_for_winning_team[lv_winning_team] += lv_team_scores_with_nuke_bonus[lv_team];
                    lv_num_teams_for_winning_team[lv_winning_team] += 1.0;
                }

            }
        }

    }
    lv_team = 0;
    for ( ; ( (auto494C091A_ai >= 0 && lv_team <= auto494C091A_ae) || (auto494C091A_ai < 0 && lv_team >= auto494C091A_ae) ) ; lv_team += auto494C091A_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            gv_team_current_performance[lv_team] = (lv_team_scores_with_nuke_bonus[lv_team] / lv_total_score);
            gv_team_current_performance[lv_team] *= lv_num_teams;
            gv_team_peak_performance[lv_team] = MaxF(gv_team_current_performance[lv_team], gv_team_peak_performance[lv_team]);
            lv_winning_team = 0;
            for ( ; ( (auto64136BF7_ai >= 0 && lv_winning_team <= auto64136BF7_ae) || (auto64136BF7_ai < 0 && lv_winning_team >= auto64136BF7_ae) ) ; lv_winning_team += auto64136BF7_ai ) {
                if ((lv_team != lv_winning_team)) {
                    gv_team_current_performance_for_winning_team[lv_winning_team][lv_team] = (lv_team_scores_with_nuke_bonus_for_winning_team[lv_winning_team][lv_team] / lv_total_score_for_winning_team[lv_winning_team]);
                    gv_team_current_performance_for_winning_team[lv_winning_team][lv_team] *= lv_num_teams_for_winning_team[lv_winning_team];
                    gv_team_peak_performance_for_winning_team[lv_winning_team][lv_team] = MaxF(gv_team_current_performance_for_winning_team[lv_winning_team][lv_team], gv_team_peak_performance_for_winning_team[lv_winning_team][lv_team]);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ComputeStandings_Init () {
    gt_ComputeStandings = TriggerCreate("gt_ComputeStandings_Func");
    TriggerAddEventTimePeriodic(gt_ComputeStandings, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowStandings
//--------------------------------------------------------------------------------------------------
bool gt_ShowStandings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    text lv_string;
    int lv_team;

    // Automatic Variable Declarations
    const int auto401B4804_ae = 3;
    const int auto401B4804_ai = 1;
    playergroup autoB715DBBF_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = 0;
    for ( ; ( (auto401B4804_ai >= 0 && lv_team <= auto401B4804_ae) || (auto401B4804_ai < 0 && lv_team >= auto401B4804_ae) ) ; lv_team += auto401B4804_ai ) {
        if ((gv_team_alive[lv_team] == true)) {
            autoB715DBBF_g = gv_teams[lv_team];
            lv_player = -1;
            while (true) {
                lv_player = PlayerGroupNextPlayer(autoB715DBBF_g, lv_player);
                if (lv_player < 0) { break; }
                lv_string = (lv_string + StringExternal("Param/Value/436384BF") + TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + StringExternal("Param/Value/4E4C49FD"));
            }
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (gf_GetTeamPlayerList(lv_team) + StringToText("") + StringExternal("Param/Value/10B37AA2") + FixedToText(gv_team_peak_performance[lv_team], 2) + StringToText("")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowStandings_Init () {
    gt_ShowStandings = TriggerCreate("gt_ShowStandings_Func");
    TriggerAddEventChatMessage(gt_ShowStandings, c_playerAny, "-s", true);
    TriggerAddEventChatMessage(gt_ShowStandings, c_playerAny, "-standings", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ToggleLeaderboard
//--------------------------------------------------------------------------------------------------
bool gt_ToggleLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    BankValueSetFromFlag(gv_banks[EventPlayer()], "Player", "use_team_leaderboard", (BankValueGetAsFlag(gv_banks[EventPlayer()], "Player", "use_team_leaderboard") == false));
    gf_SaveBankIfFullGame(EventPlayer());
    gf_ShowCorrectLeaderboard(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleLeaderboard_Init () {
    gt_ToggleLeaderboard = TriggerCreate("gt_ToggleLeaderboard_Func");
    TriggerAddEventChatMessage(gt_ToggleLeaderboard, c_playerAny, "-leaderboard", true);
    TriggerAddEventChatMessage(gt_ToggleLeaderboard, c_playerAny, "-l", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LeaderboardPeriodicRefresh
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardPeriodicRefresh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateLeaderboard(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardPeriodicRefresh_Init () {
    gt_LeaderboardPeriodicRefresh = TriggerCreate("gt_LeaderboardPeriodicRefresh_Func");
    TriggerAddEventTimePeriodic(gt_LeaderboardPeriodicRefresh, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeamInfoTrackUpgrades
//--------------------------------------------------------------------------------------------------
bool gt_TeamInfoTrackUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_player_race;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_player_race = gv_player_race_index[lv_player];
    gv_team_info_player_armor_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][0], c_techCountQueuedOrBetter);
    gv_team_info_player_attack_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][1], c_techCountQueuedOrBetter);
    gv_team_info_player_range_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][2], c_techCountQueuedOrBetter);
    gv_team_info_player_regen_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][3], c_techCountQueuedOrBetter);
    gv_team_info_player_speed_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][4], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_armor_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][5], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_regen_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][6], c_techCountQueuedOrBetter);
    gv_team_info_player_bunker_slots_level[lv_player] = TechTreeUpgradeCount(lv_player, gv_race_teaminfo_upgrades[lv_player_race][7], c_techCountQueuedOrBetter);
    gf_UpdateTeamInfoForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamInfoTrackUpgrades_Init () {
    gt_TeamInfoTrackUpgrades = TriggerCreate("gt_TeamInfoTrackUpgrades_Func");
    TriggerAddEventUpgradeLevelChanged(gt_TeamInfoTrackUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpdateTeamInfo
//--------------------------------------------------------------------------------------------------
bool gt_UpdateTeamInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_team_info_current_player > 15)) {
        gv_team_info_current_player = 1;
    }
    else {
        gv_team_info_current_player = (gv_team_info_current_player + 1);
    }
    gf_UpdateTeamInfoForPlayer(gv_team_info_current_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateTeamInfo_Init () {
    gt_UpdateTeamInfo = TriggerCreate("gt_UpdateTeamInfo_Func");
    TriggerAddEventTimePeriodic(gt_UpdateTeamInfo, 0.1, c_timeGame);
    TriggerAddEventDialogControl(gt_UpdateTeamInfo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardCollected
//--------------------------------------------------------------------------------------------------
bool gt_ShardCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_value;
    point lv_shard_position;
    int lv_player;
    fixed lv_min_distance;
    fixed lv_distance;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto06A249F6_g;
    int auto06A249F6_u;

    // Variable Initialization
    lv_min_distance = 1000.0;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MineralCrystal") || (UnitGetType(EventUnit()) == "PalletMinerals") || (UnitGetType(EventUnit()) == "NaturalMineralsRed") || (UnitGetType(EventUnit()) == "NaturalMinerals")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_value = UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals);
    lv_shard_position = UnitGetPosition(EventUnit());
    auto06A249F6_g = UnitGroupSearch(null, c_playerAny, lv_shard_position, 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto06A249F6_u = UnitGroupCount(auto06A249F6_g, c_unitCountAll);
    for (;; auto06A249F6_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto06A249F6_g, auto06A249F6_u);
        if (lv_unit == null) { break; }
        lv_distance = DistanceBetweenPoints(lv_shard_position, UnitGetPosition(lv_unit));
        if ((lv_distance < lv_min_distance)) {
            lv_player = UnitGetOwner(lv_unit);
            lv_min_distance = lv_distance;
        }

    }
    gv_player_shards_collected[lv_player] = (gv_player_shards_collected[lv_player] + lv_value);
    PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, lv_value);
    SoundPlayAtPointForPlayer(SoundLink("UI_ResourcePickup", -1), c_maxPlayers, PlayerGroupSingle(lv_player), lv_shard_position, 0.0, 100.0, 0.0);
    TextTagCreate((StringExternal("Param/Value/395798D3") + IntToText(lv_value)), 24, lv_shard_position, 1.0, true, false, PlayerGroupSingle(lv_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardCollected_Init () {
    gt_ShardCollected = TriggerCreate("gt_ShardCollected_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShardSpawn
//--------------------------------------------------------------------------------------------------
bool gt_ShardSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_spawn_type;
    int lv_p;
    unit lv_shard;
    fixed lv_elapsed_seconds;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_elapsed_seconds = TimerGetElapsed(gv_game_timer);
    if ((lv_elapsed_seconds < 90.0)) {
        return true;
    }

    if ((RandomInt(0, 100) < 50)) {
        lv_p = RandomInt(0, 100);
        if ((lv_p <= gv_untitledVariable002)) {
            lv_spawn_type = "MineralCrystal";
        }
        else if ((lv_p <= (gv_untitledVariable002 + gv_untitledVariable003))) {
            lv_spawn_type = "PalletMinerals";
        }
        else if ((lv_p < 1000)) {
            lv_spawn_type = "NaturalMineralsRed";
        }
        UnitCreate(1, lv_spawn_type, 0, 0, RegionRandomPoint(RegionFromId(1)), 270.0);
        lv_shard = UnitLastCreated();
        TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(lv_shard));
    }

    if ((lv_elapsed_seconds > 180.0)) {
        if ((gv_untitledVariable002 > 0)) {
            gv_untitledVariable002 = (gv_untitledVariable002 - 2);
            gv_untitledVariable003 = (gv_untitledVariable003 + 2);
        }
        else {
            gv_untitledVariable003 = (gv_untitledVariable003 - 2);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardSpawn_Init () {
    gt_ShardSpawn = TriggerCreate("gt_ShardSpawn_Func");
    TriggerAddEventTimePeriodic(gt_ShardSpawn, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawnUnit
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_spawn_supply_count;
    int[7] lv_cycle_mods;
    unit lv_unit;
    int lv_scan_index;
    string lv_unit_type;
    int lv_bunker_owner;
    int lv_bunker_index;

    // Automatic Variable Declarations
    const int auto0D528480_ae = 60;
    const int auto0D528480_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawn_cycle += 1;
    lv_cycle_mods[2] = ModI(gv_spawn_cycle, 2);
    lv_cycle_mods[3] = ModI(gv_spawn_cycle, 3);
    lv_cycle_mods[4] = ModI(gv_spawn_cycle, 4);
    lv_cycle_mods[5] = ModI(gv_spawn_cycle, 5);
    lv_cycle_mods[6] = ModI(gv_spawn_cycle, 6);
    lv_scan_index = 0;
    for ( ; ( (auto0D528480_ai >= 0 && lv_scan_index <= auto0D528480_ae) || (auto0D528480_ai < 0 && lv_scan_index >= auto0D528480_ae) ) ; lv_scan_index += auto0D528480_ai ) {
        lv_bunker_index = gv_spawn_scan_order[lv_scan_index];
        lv_bunker_owner = gv_bunker_owners[lv_bunker_index];
        if ((lv_bunker_owner != 0) && (gv_bunker_retire_status[lv_bunker_index] == false)) {
            lv_spawn_supply_count = gv_race_spawn_unit_type_supply_cost[gv_player_race_index[lv_bunker_owner]][gv_spawner_tier[lv_bunker_index]][gv_spawner_upgrade_status[lv_bunker_index]];
            if ((lv_cycle_mods[lv_spawn_supply_count] == 0) && ((PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesUsed) + lv_spawn_supply_count) <= PlayerGetPropertyInt(lv_bunker_owner, c_playerPropSuppliesMade))) {
                lv_unit_type = gv_race_spawn_unit_types[gv_player_race_index[lv_bunker_owner]][gv_spawner_tier[lv_bunker_index]][gv_spawner_upgrade_status[lv_bunker_index]];
                UnitCreate(1, lv_unit_type, 0, lv_bunker_owner, gv_bunker_spawn_points[lv_bunker_index], 270.0);
                lv_unit = UnitLastCreated();
                UnitControlGroupAddUnit(lv_bunker_owner, 1, lv_unit);
                if ((gv_bunker_rally_units[lv_bunker_index] != null)) {
                    UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("move", 0), gv_bunker_rally_units[lv_bunker_index]), c_orderQueueReplace);
                }
                else {
                    if ((gv_bunker_rally_points[lv_bunker_index] != null)) {
                        UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), gv_bunker_rally_points[lv_bunker_index]), c_orderQueueReplace);
                    }

                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnUnit_Init () {
    gt_SpawnUnit = TriggerCreate("gt_SpawnUnit_Func");
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 0.1, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 1.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 3.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 5.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 7.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 9.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 11.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_SpawnUnit, 13.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_SpawnUnit, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRallyChange
//--------------------------------------------------------------------------------------------------
bool gt_OnRallyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_bunker_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bunker_index = gf_GetBunkerIndex(EventUnit());
    lv_unit = UnitRallyPointTargetUnit(EventUnit(), 1, 1);
    gv_bunker_rally_points[lv_bunker_index] = UnitRallyPointTargetPoint(EventUnit(), 1, 1);
    if ((lv_unit != null)) {
        if (((lv_unit == UnitFromId(2058176399)) || (lv_unit == EventUnit()))) {
            gv_bunker_rally_units[lv_bunker_index] = null;
        }
        else {
            gv_bunker_rally_units[lv_bunker_index] = UnitRallyPointTargetUnit(EventUnit(), 1, 1);
        }
    }
    else {
        gv_bunker_rally_units[lv_bunker_index] = null;
    }
    gv_bunker_spawn_points[lv_bunker_index] = libNtve_gf_PointOffsetTowardsPoint(gv_bunker_locations[lv_bunker_index], 1.414, gv_bunker_rally_points[lv_bunker_index]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRallyChange_Init () {
    gt_OnRallyChange = TriggerCreate("gt_OnRallyChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUpgrade
//--------------------------------------------------------------------------------------------------
bool gt_OnUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(31.0, c_timeGame);
    gv_spawner_upgrade_status[gf_GetBunkerIndex(EventUnit())] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUpgrade_Init () {
    gt_OnUpgrade = TriggerCreate("gt_OnUpgrade_Func");
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_OnUpgrade, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionCompleted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == gv_race_spawner_types[gv_player_race_index[UnitGetOwner(EventUnitProgressUnit())]][0])) {
        gf_OnBunkerCreated(UnitGetOwner(EventUnitProgressUnit()), EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild_Init () {
    gt_BunkerBuild = TriggerCreate("gt_BunkerBuild_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionStarted
//--------------------------------------------------------------------------------------------------
bool gt_BunkerBuild2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_structure = EventUnitProgressUnit();
    UnitGroupAdd(gv_structuresGroup[UnitGetOwner(lv_structure)], lv_structure);
    if ((UnitGetType(EventUnitProgressUnit()) == gv_race_spawner_types[gv_player_race_index[UnitGetOwner(EventUnitProgressUnit())]][0])) {
        gf_OnBunkerCreated3(EventUnitProgressUnit());
    }
    else if (((UnitGetType(EventUnitProgressUnit()) == "SiegeBreakerSieged") || (UnitGetType(EventUnitProgressUnit()) == "Colossus"))) {
        UnitControlGroupAddUnit(UnitGetOwner(EventUnit()), 5, EventUnitProgressUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerBuild2_Init () {
    gt_BunkerBuild2 = TriggerCreate("gt_BunkerBuild2_Func");
    TriggerAddEventUnitConstructProgress(gt_BunkerBuild2, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ConstructionCancelled
//--------------------------------------------------------------------------------------------------
bool gt_ConstructionCancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_TestPlayerDead(UnitGetOwner(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConstructionCancelled_Init () {
    gt_ConstructionCancelled = TriggerCreate("gt_ConstructionCancelled_Func");
    TriggerAddEventUnitConstructProgress(gt_ConstructionCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BunkerDied
//--------------------------------------------------------------------------------------------------
bool gt_BunkerDestoryed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_OnBunkerRemoved(EventPlayer(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BunkerDestoryed_Init () {
    gt_BunkerDestoryed = TriggerCreate("gt_BunkerDestoryed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnScvDied
//--------------------------------------------------------------------------------------------------
bool gt_ScvDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure_to_spawn_at;
    point lv_spawnPosition;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == gv_race_worker_types[gv_player_race_index[lv_player]]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_spawnPosition = UnitGetPosition(EventUnit());
    Wait(5.0, c_timeGame);
    lv_structure_to_spawn_at = UnitGroupClosestToPoint(gv_structuresGroup[lv_player], lv_spawnPosition);
    if ((gv_player_alive[lv_player] == true)) {
        UnitCreate(1, gv_race_worker_types[gv_player_race_index[lv_player]], 0, lv_player, PointWithOffset(UnitGetPosition(lv_structure_to_spawn_at), (0.0 - gv_player_spawn_offsets[lv_player][0]), (0.0 - gv_player_spawn_offsets[lv_player][1])), 270.0);
        gf_OnBunkerCreated2(UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvDied_Init () {
    gt_ScvDied = TriggerCreate("gt_ScvDied_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnRetire
//--------------------------------------------------------------------------------------------------
bool gt_OnRetire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnRetire_Init () {
    gt_OnRetire = TriggerCreate("gt_OnRetire_Func");
    TriggerAddEventUnitAbility(gt_OnRetire, null, AbilityCommand("RetireStructure", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OnUnretire
//--------------------------------------------------------------------------------------------------
bool gt_OnUnretire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_bunker_retire_status[gf_GetBunkerIndex(EventUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OnUnretire_Init () {
    gt_OnUnretire = TriggerCreate("gt_OnUnretire_Func");
    TriggerAddEventUnitAbility(gt_OnUnretire, null, AbilityCommand("UnretireStructure", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ScvCalldown
//--------------------------------------------------------------------------------------------------
bool gt_ScvCalldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoC83EDAA1_g;
    int autoC83EDAA1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    autoC83EDAA1_g = UnitGroup("SCV", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC83EDAA1_u = UnitGroupCount(autoC83EDAA1_g, c_unitCountAll);
    for (;; autoC83EDAA1_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(autoC83EDAA1_g, autoC83EDAA1_u);
        if (lv_unit == null) { break; }
        gf_OnBunkerCreated2(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScvCalldown_Init () {
    gt_ScvCalldown = TriggerCreate("gt_ScvCalldown_Func");
    TriggerAddEventUnitAbility(gt_ScvCalldown, null, AbilityCommand("CalldownMULE", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectNukeAction
//--------------------------------------------------------------------------------------------------
bool gt_DetectNukeAction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_num_used;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    gv_num_nuke_used[lv_player] += 1;
    lv_num_used = gv_num_nuke_used[lv_player];
    Wait(3.0, c_timeGame);
    if (((gv_num_nuke_used[lv_player] == lv_num_used) && (gv_num_nukes_detected[lv_player] < gv_num_nuke_used[lv_player]))) {
        gv_num_nuke_used[lv_player] -= 1;
        UnitMagazineArm(gv_nuke_silos[lv_player], AbilityCommand("ArmSiloWithNuke", 0), 1);
        TriggerDebugOutput(1, StringExternal("Param/Value/2CB32ECF"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectNukeAction_Init () {
    gt_DetectNukeAction = TriggerCreate("gt_DetectNukeAction_Func");
    TriggerAddEventUnitAbility(gt_DetectNukeAction, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DetectNukeEffect
//--------------------------------------------------------------------------------------------------
bool gt_DetectNukeEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_num_nukes_detected[EventPlayer()] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectNukeEffect_Init () {
    gt_DetectNukeEffect = TriggerCreate("gt_DetectNukeEffect_Func");
    TriggerAddEventPlayerEffectUsed(gt_DetectNukeEffect, c_playerAny, "NukeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ArmNuke
//--------------------------------------------------------------------------------------------------
bool gt_ArmNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateAllWorkers(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmNuke_Init () {
    gt_ArmNuke = TriggerCreate("gt_ArmNuke_Func");
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("ArmSiloWithNuke", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(gt_ArmNuke, null, AbilityCommand("TacNukeStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PeriodicCheckPlayerDeath
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicCheckDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_loop;

    // Automatic Variable Declarations
    const int auto684E1F6A_ae = 8;
    const int auto684E1F6A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = 1;
    for ( ; ( (auto684E1F6A_ai >= 0 && lv_player <= auto684E1F6A_ae) || (auto684E1F6A_ai < 0 && lv_player >= auto684E1F6A_ae) ) ; lv_player += auto684E1F6A_ai ) {
        if ((gv_player_alive[lv_player] == true)) {
            gf_TestPlayerDead(lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicCheckDeath_Init () {
    gt_PeriodicCheckDeath = TriggerCreate("gt_PeriodicCheckDeath_Func");
    TriggerAddEventTimePeriodic(gt_PeriodicCheckDeath, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PlayerLeaveGame
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaveGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_player_race;
    int lv_bunker_slot;
    int lv_teammate;
    int lv_possible_teammate;
    unit lv_unit;
    unit lv_unit2;

    // Automatic Variable Declarations
    const int auto0C76BC50_ae = 8;
    const int auto0C76BC50_ai = 1;
    unitgroup auto78359B8E_g;
    int auto78359B8E_u;
    const int auto356FEFDF_ae = 63;
    const int auto356FEFDF_ai = 1;
    unitgroup auto3DD62C4A_g;
    int auto3DD62C4A_u;
    unitgroup auto1DE84C8F_g;
    int auto1DE84C8F_u;

    // Variable Initialization
    lv_teammate = -1;
    lv_possible_teammate = -1;

    // Conditions
    if (testConds) {
        if (!((GameAttributePlayerValue("11", EventPlayer()) == "0001"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_player_race = gv_player_race_index[lv_player];
    gv_player_left_game[lv_player] = true;
    if ((gv_player_revealers[lv_player] != null)) {
        VisRevealerDestroy(gv_player_revealers[lv_player]);
    }

    if ((gv_player_alive[lv_player] == true)) {
    }
    else {
        gf_SetDeadPlayerColor(lv_player);
        return true;
    }
    lv_possible_teammate = 0;
    for ( ; ( (auto0C76BC50_ai >= 0 && lv_possible_teammate <= auto0C76BC50_ae) || (auto0C76BC50_ai < 0 && lv_possible_teammate >= auto0C76BC50_ae) ) ; lv_possible_teammate += auto0C76BC50_ai ) {
        if (((gv_player_team[lv_possible_teammate] == gv_player_team[lv_player]) && (gv_player_alive[lv_possible_teammate] == true) && (lv_possible_teammate != lv_player))) {
            lv_teammate = lv_possible_teammate;
        }

    }
    if ((lv_teammate >= 1)) {
        UnitGroupAddUnitGroup(gv_structuresGroup[lv_teammate], gv_structuresGroup[lv_player]);
        lv_bunker_slot = 1;
        for ( ; ( (auto356FEFDF_ai >= 0 && lv_bunker_slot <= auto356FEFDF_ae) || (auto356FEFDF_ai < 0 && lv_bunker_slot >= auto356FEFDF_ae) ) ; lv_bunker_slot += auto356FEFDF_ai ) {
            if ((gv_bunker_owners[lv_bunker_slot] == lv_player)) {
                gv_bunker_owners[lv_bunker_slot] = lv_teammate;
            }

        }
        auto3DD62C4A_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3DD62C4A_u = UnitGroupCount(auto3DD62C4A_g, c_unitCountAll);
        for (;; auto3DD62C4A_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto3DD62C4A_g, auto3DD62C4A_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == gv_race_worker_types[lv_player_race]) || (UnitGetType(lv_unit) == gv_race_research_facility_types[lv_player_race]) || (UnitGetType(lv_unit) == "GhostAcademy"))) {
                UnitRemove(lv_unit);
            }
            else {
                if (((UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][0]) || (UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][1]))) {
                    auto1DE84C8F_g = UnitCargoGroup(lv_unit);
                    auto1DE84C8F_u = UnitGroupCount(auto1DE84C8F_g, c_unitCountAll);
                    for (;; auto1DE84C8F_u -= 1) {
                        lv_unit2 = UnitGroupUnitFromEnd(auto1DE84C8F_g, auto1DE84C8F_u);
                        if (lv_unit2 == null) { break; }
                        if ((UnitGetType(lv_unit2) == gv_race_worker_types[lv_player_race])) {
                            UnitKill(lv_unit2);
                        }

                    }
                    UnitSetOwner(lv_unit, lv_teammate, true);
                    UnitControlGroupAddUnit(lv_teammate, 2, lv_unit);
                    PlayerModifyPropertyInt(UnitGetOwner(lv_unit), c_playerPropMinerals, c_playerPropOperAdd, 550);
                    UnitIssueOrder(lv_unit, Order(AbilityCommand("RetireStructure", 0)), c_orderQueueReplace);
                }
                else {
                    if (((UnitGetType(lv_unit) == "SiegeBreakerSieged") || (UnitGetType(lv_unit) == "SiegeBreaker"))) {
                        UnitControlGroupAddUnit(lv_teammate, 5, lv_unit);
                    }

                    if (((UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][0][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][0][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][1][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][1][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][2][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][2][1]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][3][0]) || (UnitGetType(lv_unit) == gv_race_spawn_unit_types[gv_player_race_index[lv_player]][3][1]))) {
                        UnitControlGroupAddUnit(lv_teammate, 1, lv_unit);
                    }

                    UnitSetOwner(lv_unit, lv_teammate, true);
                }
            }
        }
    }
    else {
        auto78359B8E_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto78359B8E_u = UnitGroupCount(auto78359B8E_g, c_unitCountAll);
        for (;; auto78359B8E_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto78359B8E_g, auto78359B8E_u);
            if (lv_unit == null) { break; }
            if (((UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][0]) || (UnitGetType(lv_unit) == gv_race_spawner_types[lv_player_race][1]))) {
                UnitCreate(1, "NaturalMineralsRed", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

            if (((UnitGetType(lv_unit) == "SupplyDepot") || (UnitGetType(lv_unit) == "SupplyDepotLowered"))) {
                UnitCreate(1, "PalletMinerals", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

            if (((UnitGetType(UnitLastCreated()) == "SensorTower") || (UnitGetType(lv_unit) == "HiveMindEmulator"))) {
                UnitCreate(1, "MineralCrystal", 0, 0, UnitGetPosition(lv_unit), 270.0);
                TriggerAddEventUnitDied(gt_ShardCollected, UnitRefFromUnit(UnitLastCreated()));
            }

        }
        UnitRemove(lv_unit);
    }
    gf_OnPlayerDead(lv_player);
    gf_NotifyPlayerLeave(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaveGame_Init () {
    gt_PlayerLeaveGame = TriggerCreate("gt_PlayerLeaveGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaveGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MineralTrickle
//--------------------------------------------------------------------------------------------------
bool gt_MineralTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto52F9A234_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto52F9A234_g = gv_all_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto52F9A234_g, lv_player);
        if (lv_player < 0) { break; }
        if ((gv_player_left_game[lv_player] == false)) {
            PlayerModifyPropertyInt(lv_player, c_playerPropMinerals, c_playerPropOperAdd, 5);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralTrickle_Init () {
    gt_MineralTrickle = TriggerCreate("gt_MineralTrickle_Func");
    TriggerAddEventTimePeriodic(gt_MineralTrickle, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Help_Init();
    gt_Control_Init();
    gt_ButtonPress_Init();
    gt_CheckForInvalidGame_Init();
    gt_MeleeInitialization_Init();
    gt_DetectMovement_Init();
    gt_DetectPlayerChat_Init();
    gt_TrackUnitMovement_Init();
    gt_TrackRallyChange_Init();
    gt_ShareControlForAfkPlayer_Init();
    gt_Records_Init();
    gt_Draw_Init();
    gt_Elo_Init();
    gt_ComputeStandings_Init();
    gt_ShowStandings_Init();
    gt_ToggleLeaderboard_Init();
    gt_LeaderboardPeriodicRefresh_Init();
    gt_TeamInfoTrackUpgrades_Init();
    gt_UpdateTeamInfo_Init();
    gt_ShardCollected_Init();
    gt_ShardSpawn_Init();
    gt_SpawnUnit_Init();
    gt_OnRallyChange_Init();
    gt_OnUpgrade_Init();
    gt_BunkerBuild_Init();
    gt_BunkerBuild2_Init();
    gt_ConstructionCancelled_Init();
    gt_BunkerDestoryed_Init();
    gt_ScvDied_Init();
    gt_OnRetire_Init();
    gt_OnUnretire_Init();
    gt_ScvCalldown_Init();
    gt_DetectNukeAction_Init();
    gt_DetectNukeEffect_Init();
    gt_ArmNuke_Init();
    gt_PeriodicCheckDeath_Init();
    gt_PlayerLeaveGame_Init();
    gt_MineralTrickle_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
